// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// winpty.h 头文件在dart的移植.
class Winpty {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  Winpty(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int winpty_error_code(
    ffi.Pointer<winpty_error_s> err,
  ) {
    _winpty_error_code ??=
        _dylib.lookupFunction<_c_winpty_error_code, _dart_winpty_error_code>(
            'winpty_error_code');
    return _winpty_error_code(
      err,
    );
  }

  _dart_winpty_error_code _winpty_error_code;

  int winpty_error_msg(
    ffi.Pointer<winpty_error_s> err,
  ) {
    _winpty_error_msg ??=
        _dylib.lookupFunction<_c_winpty_error_msg, _dart_winpty_error_msg>(
            'winpty_error_msg');
    return _winpty_error_msg(
      err,
    );
  }

  _dart_winpty_error_msg _winpty_error_msg;

  void winpty_error_free(
    ffi.Pointer<winpty_error_s> err,
  ) {
    _winpty_error_free ??=
        _dylib.lookupFunction<_c_winpty_error_free, _dart_winpty_error_free>(
            'winpty_error_free');
    return _winpty_error_free(
      err,
    );
  }

  _dart_winpty_error_free _winpty_error_free;

  ffi.Pointer<winpty_config_s> winpty_config_new(
    int agentFlags,
    ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
  ) {
    _winpty_config_new ??=
        _dylib.lookupFunction<_c_winpty_config_new, _dart_winpty_config_new>(
            'winpty_config_new');
    return _winpty_config_new(
      agentFlags,
      err,
    );
  }

  _dart_winpty_config_new _winpty_config_new;

  void winpty_config_free(
    ffi.Pointer<winpty_config_s> cfg,
  ) {
    _winpty_config_free ??=
        _dylib.lookupFunction<_c_winpty_config_free, _dart_winpty_config_free>(
            'winpty_config_free');
    return _winpty_config_free(
      cfg,
    );
  }

  _dart_winpty_config_free _winpty_config_free;

  void winpty_config_set_initial_size(
    ffi.Pointer<winpty_config_s> cfg,
    int cols,
    int rows,
  ) {
    _winpty_config_set_initial_size ??= _dylib.lookupFunction<
        _c_winpty_config_set_initial_size,
        _dart_winpty_config_set_initial_size>('winpty_config_set_initial_size');
    return _winpty_config_set_initial_size(
      cfg,
      cols,
      rows,
    );
  }

  _dart_winpty_config_set_initial_size _winpty_config_set_initial_size;

  void winpty_config_set_mouse_mode(
    ffi.Pointer<winpty_config_s> cfg,
    int mouseMode,
  ) {
    _winpty_config_set_mouse_mode ??= _dylib.lookupFunction<
        _c_winpty_config_set_mouse_mode,
        _dart_winpty_config_set_mouse_mode>('winpty_config_set_mouse_mode');
    return _winpty_config_set_mouse_mode(
      cfg,
      mouseMode,
    );
  }

  _dart_winpty_config_set_mouse_mode _winpty_config_set_mouse_mode;

  void winpty_config_set_agent_timeout(
    ffi.Pointer<winpty_config_s> cfg,
    int timeoutMs,
  ) {
    _winpty_config_set_agent_timeout ??= _dylib.lookupFunction<
            _c_winpty_config_set_agent_timeout,
            _dart_winpty_config_set_agent_timeout>(
        'winpty_config_set_agent_timeout');
    return _winpty_config_set_agent_timeout(
      cfg,
      timeoutMs,
    );
  }

  _dart_winpty_config_set_agent_timeout _winpty_config_set_agent_timeout;

  ffi.Pointer<winpty_s> winpty_open(
    ffi.Pointer<winpty_config_s> cfg,
    ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
  ) {
    _winpty_open ??=
        _dylib.lookupFunction<_c_winpty_open, _dart_winpty_open>('winpty_open');
    return _winpty_open(
      cfg,
      err,
    );
  }

  _dart_winpty_open _winpty_open;

  int winpty_agent_process(
    ffi.Pointer<winpty_s> wp,
  ) {
    _winpty_agent_process ??= _dylib.lookupFunction<_c_winpty_agent_process,
        _dart_winpty_agent_process>('winpty_agent_process');
    return _winpty_agent_process(
      wp,
    );
  }

  _dart_winpty_agent_process _winpty_agent_process;

  /// I/O pipes.
  int winpty_conin_name(
    ffi.Pointer<winpty_s> wp,
  ) {
    _winpty_conin_name ??=
        _dylib.lookupFunction<_c_winpty_conin_name, _dart_winpty_conin_name>(
            'winpty_conin_name');
    return _winpty_conin_name(
      wp,
    );
  }

  _dart_winpty_conin_name _winpty_conin_name;

  int winpty_conout_name(
    ffi.Pointer<winpty_s> wp,
  ) {
    _winpty_conout_name ??=
        _dylib.lookupFunction<_c_winpty_conout_name, _dart_winpty_conout_name>(
            'winpty_conout_name');
    return _winpty_conout_name(
      wp,
    );
  }

  _dart_winpty_conout_name _winpty_conout_name;

  int winpty_conerr_name(
    ffi.Pointer<winpty_s> wp,
  ) {
    _winpty_conerr_name ??=
        _dylib.lookupFunction<_c_winpty_conerr_name, _dart_winpty_conerr_name>(
            'winpty_conerr_name');
    return _winpty_conerr_name(
      wp,
    );
  }

  _dart_winpty_conerr_name _winpty_conerr_name;

  ffi.Pointer<winpty_spawn_config_s> winpty_spawn_config_new(
    int spawnFlags,
    int appname,
    int cmdline,
    int cwd,
    int env,
    ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
  ) {
    _winpty_spawn_config_new ??= _dylib.lookupFunction<
        _c_winpty_spawn_config_new,
        _dart_winpty_spawn_config_new>('winpty_spawn_config_new');
    return _winpty_spawn_config_new(
      spawnFlags,
      appname,
      cmdline,
      cwd,
      env,
      err,
    );
  }

  _dart_winpty_spawn_config_new _winpty_spawn_config_new;

  void winpty_spawn_config_free(
    ffi.Pointer<winpty_spawn_config_s> cfg,
  ) {
    _winpty_spawn_config_free ??= _dylib.lookupFunction<
        _c_winpty_spawn_config_free,
        _dart_winpty_spawn_config_free>('winpty_spawn_config_free');
    return _winpty_spawn_config_free(
      cfg,
    );
  }

  _dart_winpty_spawn_config_free _winpty_spawn_config_free;

  int winpty_spawn(
    ffi.Pointer<winpty_s> wp,
    ffi.Pointer<winpty_spawn_config_s> cfg,
    ffi.Pointer<ffi.Int32> process_handle,
    ffi.Pointer<ffi.Int32> thread_handle,
    ffi.Pointer<ffi.Int32> create_process_error,
    ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
  ) {
    _winpty_spawn ??= _dylib
        .lookupFunction<_c_winpty_spawn, _dart_winpty_spawn>('winpty_spawn');
    return _winpty_spawn(
      wp,
      cfg,
      process_handle,
      thread_handle,
      create_process_error,
      err,
    );
  }

  _dart_winpty_spawn _winpty_spawn;

  /// winpty agent RPC calls: everything else
  int winpty_set_size(
    ffi.Pointer<winpty_s> wp,
    int cols,
    int rows,
    ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
  ) {
    _winpty_set_size ??=
        _dylib.lookupFunction<_c_winpty_set_size, _dart_winpty_set_size>(
            'winpty_set_size');
    return _winpty_set_size(
      wp,
      cols,
      rows,
      err,
    );
  }

  _dart_winpty_set_size _winpty_set_size;

  void winpty_free(
    ffi.Pointer<winpty_s> wp,
  ) {
    _winpty_free ??=
        _dylib.lookupFunction<_c_winpty_free, _dart_winpty_free>('winpty_free');
    return _winpty_free(
      wp,
    );
  }

  _dart_winpty_free _winpty_free;
}

class winpty_error_s extends ffi.Struct {}

class winpty_config_s extends ffi.Struct {}

class winpty_s extends ffi.Struct {}

class winpty_spawn_config_s extends ffi.Struct {}

const int WINPTY_ERROR_SUCCESS = 0;

const int WINPTY_ERROR_OUT_OF_MEMORY = 1;

const int WINPTY_ERROR_SPAWN_CREATE_PROCESS_FAILED = 2;

const int WINPTY_ERROR_LOST_CONNECTION = 3;

const int WINPTY_ERROR_AGENT_EXE_MISSING = 4;

const int WINPTY_ERROR_UNSPECIFIED = 5;

const int WINPTY_ERROR_AGENT_DIED = 6;

const int WINPTY_ERROR_AGENT_TIMEOUT = 7;

const int WINPTY_ERROR_AGENT_CREATION_FAILED = 8;

const int WINPTY_FLAG_CONERR = 1;

const int WINPTY_FLAG_PLAIN_OUTPUT = 2;

const int WINPTY_FLAG_COLOR_ESCAPES = 4;

const int WINPTY_FLAG_ALLOW_CURPROC_DESKTOP_CREATION = 8;

const int WINPTY_FLAG_MASK = 15;

const int WINPTY_MOUSE_MODE_NONE = 0;

const int WINPTY_MOUSE_MODE_AUTO = 1;

const int WINPTY_MOUSE_MODE_FORCE = 2;

const int WINPTY_SPAWN_FLAG_AUTO_SHUTDOWN = 1;

const int WINPTY_SPAWN_FLAG_EXIT_AFTER_SHUTDOWN = 2;

const int WINPTY_SPAWN_FLAG_MASK = 3;

typedef _c_winpty_error_code = ffi.Int32 Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _dart_winpty_error_code = int Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _c_winpty_error_msg = ffi.Int32 Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _dart_winpty_error_msg = int Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _c_winpty_error_free = ffi.Void Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _dart_winpty_error_free = void Function(
  ffi.Pointer<winpty_error_s> err,
);

typedef _c_winpty_config_new = ffi.Pointer<winpty_config_s> Function(
  ffi.Int32 agentFlags,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _dart_winpty_config_new = ffi.Pointer<winpty_config_s> Function(
  int agentFlags,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _c_winpty_config_free = ffi.Void Function(
  ffi.Pointer<winpty_config_s> cfg,
);

typedef _dart_winpty_config_free = void Function(
  ffi.Pointer<winpty_config_s> cfg,
);

typedef _c_winpty_config_set_initial_size = ffi.Void Function(
  ffi.Pointer<winpty_config_s> cfg,
  ffi.Int32 cols,
  ffi.Int32 rows,
);

typedef _dart_winpty_config_set_initial_size = void Function(
  ffi.Pointer<winpty_config_s> cfg,
  int cols,
  int rows,
);

typedef _c_winpty_config_set_mouse_mode = ffi.Void Function(
  ffi.Pointer<winpty_config_s> cfg,
  ffi.Int32 mouseMode,
);

typedef _dart_winpty_config_set_mouse_mode = void Function(
  ffi.Pointer<winpty_config_s> cfg,
  int mouseMode,
);

typedef _c_winpty_config_set_agent_timeout = ffi.Void Function(
  ffi.Pointer<winpty_config_s> cfg,
  ffi.Int32 timeoutMs,
);

typedef _dart_winpty_config_set_agent_timeout = void Function(
  ffi.Pointer<winpty_config_s> cfg,
  int timeoutMs,
);

typedef _c_winpty_open = ffi.Pointer<winpty_s> Function(
  ffi.Pointer<winpty_config_s> cfg,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _dart_winpty_open = ffi.Pointer<winpty_s> Function(
  ffi.Pointer<winpty_config_s> cfg,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _c_winpty_agent_process = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _dart_winpty_agent_process = int Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _c_winpty_conin_name = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _dart_winpty_conin_name = int Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _c_winpty_conout_name = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _dart_winpty_conout_name = int Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _c_winpty_conerr_name = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _dart_winpty_conerr_name = int Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _c_winpty_spawn_config_new = ffi.Pointer<winpty_spawn_config_s>
    Function(
  ffi.Int32 spawnFlags,
  ffi.Int32 appname,
  ffi.Int32 cmdline,
  ffi.Int32 cwd,
  ffi.Int32 env,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _dart_winpty_spawn_config_new = ffi.Pointer<winpty_spawn_config_s>
    Function(
  int spawnFlags,
  int appname,
  int cmdline,
  int cwd,
  int env,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _c_winpty_spawn_config_free = ffi.Void Function(
  ffi.Pointer<winpty_spawn_config_s> cfg,
);

typedef _dart_winpty_spawn_config_free = void Function(
  ffi.Pointer<winpty_spawn_config_s> cfg,
);

typedef _c_winpty_spawn = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
  ffi.Pointer<winpty_spawn_config_s> cfg,
  ffi.Pointer<ffi.Int32> process_handle,
  ffi.Pointer<ffi.Int32> thread_handle,
  ffi.Pointer<ffi.Int32> create_process_error,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _dart_winpty_spawn = int Function(
  ffi.Pointer<winpty_s> wp,
  ffi.Pointer<winpty_spawn_config_s> cfg,
  ffi.Pointer<ffi.Int32> process_handle,
  ffi.Pointer<ffi.Int32> thread_handle,
  ffi.Pointer<ffi.Int32> create_process_error,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _c_winpty_set_size = ffi.Int32 Function(
  ffi.Pointer<winpty_s> wp,
  ffi.Int32 cols,
  ffi.Int32 rows,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _dart_winpty_set_size = int Function(
  ffi.Pointer<winpty_s> wp,
  int cols,
  int rows,
  ffi.Pointer<ffi.Pointer<winpty_error_s>> err,
);

typedef _c_winpty_free = ffi.Void Function(
  ffi.Pointer<winpty_s> wp,
);

typedef _dart_winpty_free = void Function(
  ffi.Pointer<winpty_s> wp,
);
