// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `headers/example.h`.
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int ioctl(
    int arg0,
    int arg1,
    ffi.Pointer<winsize> arg3,
  ) {
    return _ioctl(
      arg0,
      arg1,
      arg3,
    );
  }

  late final _ioctl_ptr = _lookup<ffi.NativeFunction<_c_ioctl>>('ioctl');
  late final _dart_ioctl _ioctl = _ioctl_ptr.asFunction<_dart_ioctl>();

  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
  ) {
    return _signal(
      arg0,
      arg1,
    );
  }

  late final _signal_ptr = _lookup<ffi.NativeFunction<_c_signal>>('signal');
  late final _dart_signal _signal = _signal_ptr.asFunction<_dart_signal>();

  int getpriority(
    int arg0,
    int arg1,
  ) {
    return _getpriority(
      arg0,
      arg1,
    );
  }

  late final _getpriority_ptr =
      _lookup<ffi.NativeFunction<_c_getpriority>>('getpriority');
  late final _dart_getpriority _getpriority =
      _getpriority_ptr.asFunction<_dart_getpriority>();

  int getiopolicy_np(
    int arg0,
    int arg1,
  ) {
    return _getiopolicy_np(
      arg0,
      arg1,
    );
  }

  late final _getiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_getiopolicy_np>>('getiopolicy_np');
  late final _dart_getiopolicy_np _getiopolicy_np =
      _getiopolicy_np_ptr.asFunction<_dart_getiopolicy_np>();

  int getrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _getrlimit(
      arg0,
      arg1,
    );
  }

  late final _getrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_getrlimit>>('getrlimit');
  late final _dart_getrlimit _getrlimit =
      _getrlimit_ptr.asFunction<_dart_getrlimit>();

  int getrusage(
    int arg0,
    ffi.Pointer<rusage> arg1,
  ) {
    return _getrusage(
      arg0,
      arg1,
    );
  }

  late final _getrusage_ptr =
      _lookup<ffi.NativeFunction<_c_getrusage>>('getrusage');
  late final _dart_getrusage _getrusage =
      _getrusage_ptr.asFunction<_dart_getrusage>();

  int setpriority(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setpriority(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setpriority_ptr =
      _lookup<ffi.NativeFunction<_c_setpriority>>('setpriority');
  late final _dart_setpriority _setpriority =
      _setpriority_ptr.asFunction<_dart_setpriority>();

  int setiopolicy_np(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _setiopolicy_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setiopolicy_np_ptr =
      _lookup<ffi.NativeFunction<_c_setiopolicy_np>>('setiopolicy_np');
  late final _dart_setiopolicy_np _setiopolicy_np =
      _setiopolicy_np_ptr.asFunction<_dart_setiopolicy_np>();

  int setrlimit(
    int arg0,
    ffi.Pointer<rlimit> arg1,
  ) {
    return _setrlimit(
      arg0,
      arg1,
    );
  }

  late final _setrlimit_ptr =
      _lookup<ffi.NativeFunction<_c_setrlimit>>('setrlimit');
  late final _dart_setrlimit _setrlimit =
      _setrlimit_ptr.asFunction<_dart_setrlimit>();

  int wait(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _wait(
      arg0,
    );
  }

  late final _wait_ptr = _lookup<ffi.NativeFunction<_c_wait>>('wait');
  late final _dart_wait _wait = _wait_ptr.asFunction<_dart_wait>();

  int waitpid(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _waitpid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _waitpid_ptr = _lookup<ffi.NativeFunction<_c_waitpid>>('waitpid');
  late final _dart_waitpid _waitpid = _waitpid_ptr.asFunction<_dart_waitpid>();

  int waitid(
    int arg0,
    int arg1,
    ffi.Pointer<siginfo_t> arg2,
    int arg3,
  ) {
    return _waitid(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _waitid_ptr = _lookup<ffi.NativeFunction<_c_waitid>>('waitid');
  late final _dart_waitid _waitid = _waitid_ptr.asFunction<_dart_waitid>();

  int wait3(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
    ffi.Pointer<rusage> arg2,
  ) {
    return _wait3(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wait3_ptr = _lookup<ffi.NativeFunction<_c_wait3>>('wait3');
  late final _dart_wait3 _wait3 = _wait3_ptr.asFunction<_dart_wait3>();

  int wait4(
    int arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
    ffi.Pointer<rusage> arg3,
  ) {
    return _wait4(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _wait4_ptr = _lookup<ffi.NativeFunction<_c_wait4>>('wait4');
  late final _dart_wait4 _wait4 = _wait4_ptr.asFunction<_dart_wait4>();

  ffi.Pointer<ffi.Void> alloca(
    int arg0,
  ) {
    return _alloca(
      arg0,
    );
  }

  late final _alloca_ptr = _lookup<ffi.NativeFunction<_c_alloca>>('alloca');
  late final _dart_alloca _alloca = _alloca_ptr.asFunction<_dart_alloca>();

  late final ffi.Pointer<ffi.Int32> ___mb_cur_max =
      _lookup<ffi.Int32>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  ffi.Pointer<ffi.Void> malloc(
    int __size,
  ) {
    return _malloc(
      __size,
    );
  }

  late final _malloc_ptr = _lookup<ffi.NativeFunction<_c_malloc>>('malloc');
  late final _dart_malloc _malloc = _malloc_ptr.asFunction<_dart_malloc>();

  ffi.Pointer<ffi.Void> calloc(
    int __count,
    int __size,
  ) {
    return _calloc(
      __count,
      __size,
    );
  }

  late final _calloc_ptr = _lookup<ffi.NativeFunction<_c_calloc>>('calloc');
  late final _dart_calloc _calloc = _calloc_ptr.asFunction<_dart_calloc>();

  void free(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _free(
      arg0,
    );
  }

  late final _free_ptr = _lookup<ffi.NativeFunction<_c_free>>('free');
  late final _dart_free _free = _free_ptr.asFunction<_dart_free>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _realloc(
      __ptr,
      __size,
    );
  }

  late final _realloc_ptr = _lookup<ffi.NativeFunction<_c_realloc>>('realloc');
  late final _dart_realloc _realloc = _realloc_ptr.asFunction<_dart_realloc>();

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    return _valloc(
      arg0,
    );
  }

  late final _valloc_ptr = _lookup<ffi.NativeFunction<_c_valloc>>('valloc');
  late final _dart_valloc _valloc = _valloc_ptr.asFunction<_dart_valloc>();

  ffi.Pointer<ffi.Void> aligned_alloc(
    int __alignment,
    int __size,
  ) {
    return _aligned_alloc(
      __alignment,
      __size,
    );
  }

  late final _aligned_alloc_ptr =
      _lookup<ffi.NativeFunction<_c_aligned_alloc>>('aligned_alloc');
  late final _dart_aligned_alloc _aligned_alloc =
      _aligned_alloc_ptr.asFunction<_dart_aligned_alloc>();

  int posix_memalign(
    ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
    int __alignment,
    int __size,
  ) {
    return _posix_memalign(
      __memptr,
      __alignment,
      __size,
    );
  }

  late final _posix_memalign_ptr =
      _lookup<ffi.NativeFunction<_c_posix_memalign>>('posix_memalign');
  late final _dart_posix_memalign _posix_memalign =
      _posix_memalign_ptr.asFunction<_dart_posix_memalign>();

  void abort() {
    return _abort();
  }

  late final _abort_ptr = _lookup<ffi.NativeFunction<_c_abort>>('abort');
  late final _dart_abort _abort = _abort_ptr.asFunction<_dart_abort>();

  int abs(
    int arg0,
  ) {
    return _abs(
      arg0,
    );
  }

  late final _abs_ptr = _lookup<ffi.NativeFunction<_c_abs>>('abs');
  late final _dart_abs _abs = _abs_ptr.asFunction<_dart_abs>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexit_ptr = _lookup<ffi.NativeFunction<_c_atexit>>('atexit');
  late final _dart_atexit _atexit = _atexit_ptr.asFunction<_dart_atexit>();

  double atof(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atof(
      arg0,
    );
  }

  late final _atof_ptr = _lookup<ffi.NativeFunction<_c_atof>>('atof');
  late final _dart_atof _atof = _atof_ptr.asFunction<_dart_atof>();

  int atoi(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoi(
      arg0,
    );
  }

  late final _atoi_ptr = _lookup<ffi.NativeFunction<_c_atoi>>('atoi');
  late final _dart_atoi _atoi = _atoi_ptr.asFunction<_dart_atoi>();

  int atol(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atol(
      arg0,
    );
  }

  late final _atol_ptr = _lookup<ffi.NativeFunction<_c_atol>>('atol');
  late final _dart_atol _atol = _atol_ptr.asFunction<_dart_atol>();

  int atoll(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _atoll(
      arg0,
    );
  }

  late final _atoll_ptr = _lookup<ffi.NativeFunction<_c_atoll>>('atoll');
  late final _dart_atoll _atoll = _atoll_ptr.asFunction<_dart_atoll>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> __key,
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
  ) {
    return _bsearch(
      __key,
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _bsearch_ptr = _lookup<ffi.NativeFunction<_c_bsearch>>('bsearch');
  late final _dart_bsearch _bsearch = _bsearch_ptr.asFunction<_dart_bsearch>();

  div_t div(
    int arg0,
    int arg1,
  ) {
    return _div(
      arg0,
      arg1,
    );
  }

  late final _div_ptr = _lookup<ffi.NativeFunction<_c_div>>('div');
  late final _dart_div _div = _div_ptr.asFunction<_dart_div>();

  void exit(
    int arg0,
  ) {
    return _exit_1(
      arg0,
    );
  }

  late final _exit_ptr = _lookup<ffi.NativeFunction<_c_exit>>('exit');
  late final _dart_exit _exit_1 = _exit_ptr.asFunction<_dart_exit>();

  ffi.Pointer<ffi.Int8> getenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getenv(
      arg0,
    );
  }

  late final _getenv_ptr = _lookup<ffi.NativeFunction<_c_getenv>>('getenv');
  late final _dart_getenv _getenv = _getenv_ptr.asFunction<_dart_getenv>();

  int labs(
    int arg0,
  ) {
    return _labs(
      arg0,
    );
  }

  late final _labs_ptr = _lookup<ffi.NativeFunction<_c_labs>>('labs');
  late final _dart_labs _labs = _labs_ptr.asFunction<_dart_labs>();

  ldiv_t ldiv(
    int arg0,
    int arg1,
  ) {
    return _ldiv(
      arg0,
      arg1,
    );
  }

  late final _ldiv_ptr = _lookup<ffi.NativeFunction<_c_ldiv>>('ldiv');
  late final _dart_ldiv _ldiv = _ldiv_ptr.asFunction<_dart_ldiv>();

  int llabs(
    int arg0,
  ) {
    return _llabs(
      arg0,
    );
  }

  late final _llabs_ptr = _lookup<ffi.NativeFunction<_c_llabs>>('llabs');
  late final _dart_llabs _llabs = _llabs_ptr.asFunction<_dart_llabs>();

  lldiv_t lldiv(
    int arg0,
    int arg1,
  ) {
    return _lldiv(
      arg0,
      arg1,
    );
  }

  late final _lldiv_ptr = _lookup<ffi.NativeFunction<_c_lldiv>>('lldiv');
  late final _dart_lldiv _lldiv = _lldiv_ptr.asFunction<_dart_lldiv>();

  int mblen(
    ffi.Pointer<ffi.Int8> __s,
    int __n,
  ) {
    return _mblen(
      __s,
      __n,
    );
  }

  late final _mblen_ptr = _lookup<ffi.NativeFunction<_c_mblen>>('mblen');
  late final _dart_mblen _mblen = _mblen_ptr.asFunction<_dart_mblen>();

  int mbstowcs(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbstowcs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbstowcs_ptr =
      _lookup<ffi.NativeFunction<_c_mbstowcs>>('mbstowcs');
  late final _dart_mbstowcs _mbstowcs =
      _mbstowcs_ptr.asFunction<_dart_mbstowcs>();

  int mbtowc(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _mbtowc(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mbtowc_ptr = _lookup<ffi.NativeFunction<_c_mbtowc>>('mbtowc');
  late final _dart_mbtowc _mbtowc = _mbtowc_ptr.asFunction<_dart_mbtowc>();

  void qsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
  ) {
    return _qsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _qsort_ptr = _lookup<ffi.NativeFunction<_c_qsort>>('qsort');
  late final _dart_qsort _qsort = _qsort_ptr.asFunction<_dart_qsort>();

  int rand() {
    return _rand();
  }

  late final _rand_ptr = _lookup<ffi.NativeFunction<_c_rand>>('rand');
  late final _dart_rand _rand = _rand_ptr.asFunction<_dart_rand>();

  void srand(
    int arg0,
  ) {
    return _srand(
      arg0,
    );
  }

  late final _srand_ptr = _lookup<ffi.NativeFunction<_c_srand>>('srand');
  late final _dart_srand _srand = _srand_ptr.asFunction<_dart_srand>();

  double strtod(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtod(
      arg0,
      arg1,
    );
  }

  late final _strtod_ptr = _lookup<ffi.NativeFunction<_c_strtod>>('strtod');
  late final _dart_strtod _strtod = _strtod_ptr.asFunction<_dart_strtod>();

  double strtof(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _strtof(
      arg0,
      arg1,
    );
  }

  late final _strtof_ptr = _lookup<ffi.NativeFunction<_c_strtof>>('strtof');
  late final _dart_strtof _strtof = _strtof_ptr.asFunction<_dart_strtof>();

  int strtol(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtol(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtol_ptr = _lookup<ffi.NativeFunction<_c_strtol>>('strtol');
  late final _dart_strtol _strtol = _strtol_ptr.asFunction<_dart_strtol>();

  int strtoll(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoll(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoll_ptr = _lookup<ffi.NativeFunction<_c_strtoll>>('strtoll');
  late final _dart_strtoll _strtoll = _strtoll_ptr.asFunction<_dart_strtoll>();

  int strtoul(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoul(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoul_ptr = _lookup<ffi.NativeFunction<_c_strtoul>>('strtoul');
  late final _dart_strtoul _strtoul = _strtoul_ptr.asFunction<_dart_strtoul>();

  int strtoull(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoull(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoull_ptr =
      _lookup<ffi.NativeFunction<_c_strtoull>>('strtoull');
  late final _dart_strtoull _strtoull =
      _strtoull_ptr.asFunction<_dart_strtoull>();

  int system(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _system(
      arg0,
    );
  }

  late final _system_ptr = _lookup<ffi.NativeFunction<_c_system>>('system');
  late final _dart_system _system = _system_ptr.asFunction<_dart_system>();

  int wcstombs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int32> arg1,
    int arg2,
  ) {
    return _wcstombs(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _wcstombs_ptr =
      _lookup<ffi.NativeFunction<_c_wcstombs>>('wcstombs');
  late final _dart_wcstombs _wcstombs =
      _wcstombs_ptr.asFunction<_dart_wcstombs>();

  int wctomb(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _wctomb(
      arg0,
      arg1,
    );
  }

  late final _wctomb_ptr = _lookup<ffi.NativeFunction<_c_wctomb>>('wctomb');
  late final _dart_wctomb _wctomb = _wctomb_ptr.asFunction<_dart_wctomb>();

  void _Exit(
    int arg0,
  ) {
    return __Exit(
      arg0,
    );
  }

  late final __Exit_ptr = _lookup<ffi.NativeFunction<_c__Exit>>('_Exit');
  late final _dart__Exit __Exit = __Exit_ptr.asFunction<_dart__Exit>();

  int a64l(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _a64l(
      arg0,
    );
  }

  late final _a64l_ptr = _lookup<ffi.NativeFunction<_c_a64l>>('a64l');
  late final _dart_a64l _a64l = _a64l_ptr.asFunction<_dart_a64l>();

  double drand48() {
    return _drand48();
  }

  late final _drand48_ptr = _lookup<ffi.NativeFunction<_c_drand48>>('drand48');
  late final _dart_drand48 _drand48 = _drand48_ptr.asFunction<_dart_drand48>();

  ffi.Pointer<ffi.Int8> ecvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _ecvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ecvt_ptr = _lookup<ffi.NativeFunction<_c_ecvt>>('ecvt');
  late final _dart_ecvt _ecvt = _ecvt_ptr.asFunction<_dart_ecvt>();

  double erand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _erand48(
      arg0,
    );
  }

  late final _erand48_ptr = _lookup<ffi.NativeFunction<_c_erand48>>('erand48');
  late final _dart_erand48 _erand48 = _erand48_ptr.asFunction<_dart_erand48>();

  ffi.Pointer<ffi.Int8> fcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _fcvt(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fcvt_ptr = _lookup<ffi.NativeFunction<_c_fcvt>>('fcvt');
  late final _dart_fcvt _fcvt = _fcvt_ptr.asFunction<_dart_fcvt>();

  ffi.Pointer<ffi.Int8> gcvt(
    double arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _gcvt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _gcvt_ptr = _lookup<ffi.NativeFunction<_c_gcvt>>('gcvt');
  late final _dart_gcvt _gcvt = _gcvt_ptr.asFunction<_dart_gcvt>();

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getsubopt_ptr =
      _lookup<ffi.NativeFunction<_c_getsubopt>>('getsubopt');
  late final _dart_getsubopt _getsubopt =
      _getsubopt_ptr.asFunction<_dart_getsubopt>();

  int grantpt(
    int arg0,
  ) {
    return _grantpt(
      arg0,
    );
  }

  late final _grantpt_ptr = _lookup<ffi.NativeFunction<_c_grantpt>>('grantpt');
  late final _dart_grantpt _grantpt = _grantpt_ptr.asFunction<_dart_grantpt>();

  ffi.Pointer<ffi.Int8> initstate(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _initstate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _initstate_ptr =
      _lookup<ffi.NativeFunction<_c_initstate>>('initstate');
  late final _dart_initstate _initstate =
      _initstate_ptr.asFunction<_dart_initstate>();

  int jrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _jrand48(
      arg0,
    );
  }

  late final _jrand48_ptr = _lookup<ffi.NativeFunction<_c_jrand48>>('jrand48');
  late final _dart_jrand48 _jrand48 = _jrand48_ptr.asFunction<_dart_jrand48>();

  ffi.Pointer<ffi.Int8> l64a(
    int arg0,
  ) {
    return _l64a(
      arg0,
    );
  }

  late final _l64a_ptr = _lookup<ffi.NativeFunction<_c_l64a>>('l64a');
  late final _dart_l64a _l64a = _l64a_ptr.asFunction<_dart_l64a>();

  void lcong48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _lcong48(
      arg0,
    );
  }

  late final _lcong48_ptr = _lookup<ffi.NativeFunction<_c_lcong48>>('lcong48');
  late final _dart_lcong48 _lcong48 = _lcong48_ptr.asFunction<_dart_lcong48>();

  int lrand48() {
    return _lrand48();
  }

  late final _lrand48_ptr = _lookup<ffi.NativeFunction<_c_lrand48>>('lrand48');
  late final _dart_lrand48 _lrand48 = _lrand48_ptr.asFunction<_dart_lrand48>();

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mktemp(
      arg0,
    );
  }

  late final _mktemp_ptr = _lookup<ffi.NativeFunction<_c_mktemp>>('mktemp');
  late final _dart_mktemp _mktemp = _mktemp_ptr.asFunction<_dart_mktemp>();

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mkstemp(
      arg0,
    );
  }

  late final _mkstemp_ptr = _lookup<ffi.NativeFunction<_c_mkstemp>>('mkstemp');
  late final _dart_mkstemp _mkstemp = _mkstemp_ptr.asFunction<_dart_mkstemp>();

  int mrand48() {
    return _mrand48();
  }

  late final _mrand48_ptr = _lookup<ffi.NativeFunction<_c_mrand48>>('mrand48');
  late final _dart_mrand48 _mrand48 = _mrand48_ptr.asFunction<_dart_mrand48>();

  int nrand48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _nrand48(
      arg0,
    );
  }

  late final _nrand48_ptr = _lookup<ffi.NativeFunction<_c_nrand48>>('nrand48');
  late final _dart_nrand48 _nrand48 = _nrand48_ptr.asFunction<_dart_nrand48>();

  int posix_openpt(
    int arg0,
  ) {
    return _posix_openpt(
      arg0,
    );
  }

  late final _posix_openpt_ptr =
      _lookup<ffi.NativeFunction<_c_posix_openpt>>('posix_openpt');
  late final _dart_posix_openpt _posix_openpt =
      _posix_openpt_ptr.asFunction<_dart_posix_openpt>();

  ffi.Pointer<ffi.Int8> ptsname(
    int arg0,
  ) {
    return _ptsname(
      arg0,
    );
  }

  late final _ptsname_ptr = _lookup<ffi.NativeFunction<_c_ptsname>>('ptsname');
  late final _dart_ptsname _ptsname = _ptsname_ptr.asFunction<_dart_ptsname>();

  int ptsname_r(
    int fildes,
    ffi.Pointer<ffi.Int8> buffer,
    int buflen,
  ) {
    return _ptsname_r(
      fildes,
      buffer,
      buflen,
    );
  }

  late final _ptsname_r_ptr =
      _lookup<ffi.NativeFunction<_c_ptsname_r>>('ptsname_r');
  late final _dart_ptsname_r _ptsname_r =
      _ptsname_r_ptr.asFunction<_dart_ptsname_r>();

  int putenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _putenv(
      arg0,
    );
  }

  late final _putenv_ptr = _lookup<ffi.NativeFunction<_c_putenv>>('putenv');
  late final _dart_putenv _putenv = _putenv_ptr.asFunction<_dart_putenv>();

  int random() {
    return _random();
  }

  late final _random_ptr = _lookup<ffi.NativeFunction<_c_random>>('random');
  late final _dart_random _random = _random_ptr.asFunction<_dart_random>();

  int rand_r(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _rand_r(
      arg0,
    );
  }

  late final _rand_r_ptr = _lookup<ffi.NativeFunction<_c_rand_r>>('rand_r');
  late final _dart_rand_r _rand_r = _rand_r_ptr.asFunction<_dart_rand_r>();

  ffi.Pointer<ffi.Int8> realpath(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _realpath(
      arg0,
      arg1,
    );
  }

  late final _realpath_ptr =
      _lookup<ffi.NativeFunction<_c_realpath>>('realpath');
  late final _dart_realpath _realpath =
      _realpath_ptr.asFunction<_dart_realpath>();

  ffi.Pointer<ffi.Uint16> seed48(
    ffi.Pointer<ffi.Uint16> arg0,
  ) {
    return _seed48(
      arg0,
    );
  }

  late final _seed48_ptr = _lookup<ffi.NativeFunction<_c_seed48>>('seed48');
  late final _dart_seed48 _seed48 = _seed48_ptr.asFunction<_dart_seed48>();

  int setenv(
    ffi.Pointer<ffi.Int8> __name,
    ffi.Pointer<ffi.Int8> __value,
    int __overwrite,
  ) {
    return _setenv(
      __name,
      __value,
      __overwrite,
    );
  }

  late final _setenv_ptr = _lookup<ffi.NativeFunction<_c_setenv>>('setenv');
  late final _dart_setenv _setenv = _setenv_ptr.asFunction<_dart_setenv>();

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setkey(
      arg0,
    );
  }

  late final _setkey_ptr = _lookup<ffi.NativeFunction<_c_setkey>>('setkey');
  late final _dart_setkey _setkey = _setkey_ptr.asFunction<_dart_setkey>();

  ffi.Pointer<ffi.Int8> setstate(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setstate(
      arg0,
    );
  }

  late final _setstate_ptr =
      _lookup<ffi.NativeFunction<_c_setstate>>('setstate');
  late final _dart_setstate _setstate =
      _setstate_ptr.asFunction<_dart_setstate>();

  void srand48(
    int arg0,
  ) {
    return _srand48(
      arg0,
    );
  }

  late final _srand48_ptr = _lookup<ffi.NativeFunction<_c_srand48>>('srand48');
  late final _dart_srand48 _srand48 = _srand48_ptr.asFunction<_dart_srand48>();

  void srandom(
    int arg0,
  ) {
    return _srandom(
      arg0,
    );
  }

  late final _srandom_ptr = _lookup<ffi.NativeFunction<_c_srandom>>('srandom');
  late final _dart_srandom _srandom = _srandom_ptr.asFunction<_dart_srandom>();

  int unlockpt(
    int arg0,
  ) {
    return _unlockpt(
      arg0,
    );
  }

  late final _unlockpt_ptr =
      _lookup<ffi.NativeFunction<_c_unlockpt>>('unlockpt');
  late final _dart_unlockpt _unlockpt =
      _unlockpt_ptr.asFunction<_dart_unlockpt>();

  int unsetenv(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unsetenv(
      arg0,
    );
  }

  late final _unsetenv_ptr =
      _lookup<ffi.NativeFunction<_c_unsetenv>>('unsetenv');
  late final _dart_unsetenv _unsetenv =
      _unsetenv_ptr.asFunction<_dart_unsetenv>();

  int arc4random() {
    return _arc4random();
  }

  late final _arc4random_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random>>('arc4random');
  late final _dart_arc4random _arc4random =
      _arc4random_ptr.asFunction<_dart_arc4random>();

  void arc4random_addrandom(
    ffi.Pointer<ffi.Uint8> arg0,
    int arg1,
  ) {
    return _arc4random_addrandom(
      arg0,
      arg1,
    );
  }

  late final _arc4random_addrandom_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_addrandom>>(
          'arc4random_addrandom');
  late final _dart_arc4random_addrandom _arc4random_addrandom =
      _arc4random_addrandom_ptr.asFunction<_dart_arc4random_addrandom>();

  void arc4random_buf(
    ffi.Pointer<ffi.Void> __buf,
    int __nbytes,
  ) {
    return _arc4random_buf(
      __buf,
      __nbytes,
    );
  }

  late final _arc4random_buf_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_buf>>('arc4random_buf');
  late final _dart_arc4random_buf _arc4random_buf =
      _arc4random_buf_ptr.asFunction<_dart_arc4random_buf>();

  void arc4random_stir() {
    return _arc4random_stir();
  }

  late final _arc4random_stir_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_stir>>('arc4random_stir');
  late final _dart_arc4random_stir _arc4random_stir =
      _arc4random_stir_ptr.asFunction<_dart_arc4random_stir>();

  int arc4random_uniform(
    int __upper_bound,
  ) {
    return _arc4random_uniform(
      __upper_bound,
    );
  }

  late final _arc4random_uniform_ptr =
      _lookup<ffi.NativeFunction<_c_arc4random_uniform>>('arc4random_uniform');
  late final _dart_arc4random_uniform _arc4random_uniform =
      _arc4random_uniform_ptr.asFunction<_dart_arc4random_uniform>();

  ffi.Pointer<ffi.Int8> cgetcap(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _cgetcap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetcap_ptr = _lookup<ffi.NativeFunction<_c_cgetcap>>('cgetcap');
  late final _dart_cgetcap _cgetcap = _cgetcap_ptr.asFunction<_dart_cgetcap>();

  int cgetclose() {
    return _cgetclose();
  }

  late final _cgetclose_ptr =
      _lookup<ffi.NativeFunction<_c_cgetclose>>('cgetclose');
  late final _dart_cgetclose _cgetclose =
      _cgetclose_ptr.asFunction<_dart_cgetclose>();

  int cgetent(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _cgetent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetent_ptr = _lookup<ffi.NativeFunction<_c_cgetent>>('cgetent');
  late final _dart_cgetent _cgetent = _cgetent_ptr.asFunction<_dart_cgetent>();

  int cgetfirst(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetfirst(
      arg0,
      arg1,
    );
  }

  late final _cgetfirst_ptr =
      _lookup<ffi.NativeFunction<_c_cgetfirst>>('cgetfirst');
  late final _dart_cgetfirst _cgetfirst =
      _cgetfirst_ptr.asFunction<_dart_cgetfirst>();

  int cgetmatch(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _cgetmatch(
      arg0,
      arg1,
    );
  }

  late final _cgetmatch_ptr =
      _lookup<ffi.NativeFunction<_c_cgetmatch>>('cgetmatch');
  late final _dart_cgetmatch _cgetmatch =
      _cgetmatch_ptr.asFunction<_dart_cgetmatch>();

  int cgetnext(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ) {
    return _cgetnext(
      arg0,
      arg1,
    );
  }

  late final _cgetnext_ptr =
      _lookup<ffi.NativeFunction<_c_cgetnext>>('cgetnext');
  late final _dart_cgetnext _cgetnext =
      _cgetnext_ptr.asFunction<_dart_cgetnext>();

  int cgetnum(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int64> arg2,
  ) {
    return _cgetnum(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetnum_ptr = _lookup<ffi.NativeFunction<_c_cgetnum>>('cgetnum');
  late final _dart_cgetnum _cgetnum = _cgetnum_ptr.asFunction<_dart_cgetnum>();

  int cgetset(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _cgetset(
      arg0,
    );
  }

  late final _cgetset_ptr = _lookup<ffi.NativeFunction<_c_cgetset>>('cgetset');
  late final _dart_cgetset _cgetset = _cgetset_ptr.asFunction<_dart_cgetset>();

  int cgetstr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetstr_ptr = _lookup<ffi.NativeFunction<_c_cgetstr>>('cgetstr');
  late final _dart_cgetstr _cgetstr = _cgetstr_ptr.asFunction<_dart_cgetstr>();

  int cgetustr(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    return _cgetustr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _cgetustr_ptr =
      _lookup<ffi.NativeFunction<_c_cgetustr>>('cgetustr');
  late final _dart_cgetustr _cgetustr =
      _cgetustr_ptr.asFunction<_dart_cgetustr>();

  int daemon(
    int arg0,
    int arg1,
  ) {
    return _daemon(
      arg0,
      arg1,
    );
  }

  late final _daemon_ptr = _lookup<ffi.NativeFunction<_c_daemon>>('daemon');
  late final _dart_daemon _daemon = _daemon_ptr.asFunction<_dart_daemon>();

  ffi.Pointer<ffi.Int8> devname(
    int arg0,
    int arg1,
  ) {
    return _devname(
      arg0,
      arg1,
    );
  }

  late final _devname_ptr = _lookup<ffi.NativeFunction<_c_devname>>('devname');
  late final _dart_devname _devname = _devname_ptr.asFunction<_dart_devname>();

  ffi.Pointer<ffi.Int8> devname_r(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    return _devname_r(
      arg0,
      arg1,
      buf,
      len,
    );
  }

  late final _devname_r_ptr =
      _lookup<ffi.NativeFunction<_c_devname_r>>('devname_r');
  late final _dart_devname_r _devname_r =
      _devname_r_ptr.asFunction<_dart_devname_r>();

  ffi.Pointer<ffi.Int8> getbsize(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _getbsize(
      arg0,
      arg1,
    );
  }

  late final _getbsize_ptr =
      _lookup<ffi.NativeFunction<_c_getbsize>>('getbsize');
  late final _dart_getbsize _getbsize =
      _getbsize_ptr.asFunction<_dart_getbsize>();

  int getloadavg(
    ffi.Pointer<ffi.Double> arg0,
    int arg1,
  ) {
    return _getloadavg(
      arg0,
      arg1,
    );
  }

  late final _getloadavg_ptr =
      _lookup<ffi.NativeFunction<_c_getloadavg>>('getloadavg');
  late final _dart_getloadavg _getloadavg =
      _getloadavg_ptr.asFunction<_dart_getloadavg>();

  ffi.Pointer<ffi.Int8> getprogname() {
    return _getprogname();
  }

  late final _getprogname_ptr =
      _lookup<ffi.NativeFunction<_c_getprogname>>('getprogname');
  late final _dart_getprogname _getprogname =
      _getprogname_ptr.asFunction<_dart_getprogname>();

  void setprogname(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setprogname(
      arg0,
    );
  }

  late final _setprogname_ptr =
      _lookup<ffi.NativeFunction<_c_setprogname>>('setprogname');
  late final _dart_setprogname _setprogname =
      _setprogname_ptr.asFunction<_dart_setprogname>();

  int heapsort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
  ) {
    return _heapsort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _heapsort_ptr =
      _lookup<ffi.NativeFunction<_c_heapsort>>('heapsort');
  late final _dart_heapsort _heapsort =
      _heapsort_ptr.asFunction<_dart_heapsort>();

  int mergesort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
  ) {
    return _mergesort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _mergesort_ptr =
      _lookup<ffi.NativeFunction<_c_mergesort>>('mergesort');
  late final _dart_mergesort _mergesort =
      _mergesort_ptr.asFunction<_dart_mergesort>();

  void psort(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
  ) {
    return _psort(
      __base,
      __nel,
      __width,
      __compar,
    );
  }

  late final _psort_ptr = _lookup<ffi.NativeFunction<_c_psort>>('psort');
  late final _dart_psort _psort = _psort_ptr.asFunction<_dart_psort>();

  void psort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
  ) {
    return _psort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _psort_r_ptr = _lookup<ffi.NativeFunction<_c_psort_r>>('psort_r');
  late final _dart_psort_r _psort_r = _psort_r_ptr.asFunction<_dart_psort_r>();

  void qsort_r(
    ffi.Pointer<ffi.Void> __base,
    int __nel,
    int __width,
    ffi.Pointer<ffi.Void> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
  ) {
    return _qsort_r(
      __base,
      __nel,
      __width,
      arg3,
      __compar,
    );
  }

  late final _qsort_r_ptr = _lookup<ffi.NativeFunction<_c_qsort_r>>('qsort_r');
  late final _dart_qsort_r _qsort_r = _qsort_r_ptr.asFunction<_dart_qsort_r>();

  int radixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _radixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _radixsort_ptr =
      _lookup<ffi.NativeFunction<_c_radixsort>>('radixsort');
  late final _dart_radixsort _radixsort =
      _radixsort_ptr.asFunction<_dart_radixsort>();

  int rpmatch(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _rpmatch(
      arg0,
    );
  }

  late final _rpmatch_ptr = _lookup<ffi.NativeFunction<_c_rpmatch>>('rpmatch');
  late final _dart_rpmatch _rpmatch = _rpmatch_ptr.asFunction<_dart_rpmatch>();

  int sradixsort(
    ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
    int __nel,
    ffi.Pointer<ffi.Uint8> __table,
    int __endbyte,
  ) {
    return _sradixsort(
      __base,
      __nel,
      __table,
      __endbyte,
    );
  }

  late final _sradixsort_ptr =
      _lookup<ffi.NativeFunction<_c_sradixsort>>('sradixsort');
  late final _dart_sradixsort _sradixsort =
      _sradixsort_ptr.asFunction<_dart_sradixsort>();

  void sranddev() {
    return _sranddev();
  }

  late final _sranddev_ptr =
      _lookup<ffi.NativeFunction<_c_sranddev>>('sranddev');
  late final _dart_sranddev _sranddev =
      _sranddev_ptr.asFunction<_dart_sranddev>();

  void srandomdev() {
    return _srandomdev();
  }

  late final _srandomdev_ptr =
      _lookup<ffi.NativeFunction<_c_srandomdev>>('srandomdev');
  late final _dart_srandomdev _srandomdev =
      _srandomdev_ptr.asFunction<_dart_srandomdev>();

  ffi.Pointer<ffi.Void> reallocf(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
  ) {
    return _reallocf(
      __ptr,
      __size,
    );
  }

  late final _reallocf_ptr =
      _lookup<ffi.NativeFunction<_c_reallocf>>('reallocf');
  late final _dart_reallocf _reallocf =
      _reallocf_ptr.asFunction<_dart_reallocf>();

  int strtonum(
    ffi.Pointer<ffi.Int8> __numstr,
    int __minval,
    int __maxval,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
  ) {
    return _strtonum(
      __numstr,
      __minval,
      __maxval,
      __errstrp,
    );
  }

  late final _strtonum_ptr =
      _lookup<ffi.NativeFunction<_c_strtonum>>('strtonum');
  late final _dart_strtonum _strtonum =
      _strtonum_ptr.asFunction<_dart_strtonum>();

  int strtoq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtoq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtoq_ptr = _lookup<ffi.NativeFunction<_c_strtoq>>('strtoq');
  late final _dart_strtoq _strtoq = _strtoq_ptr.asFunction<_dart_strtoq>();

  int strtouq(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
    int __base,
  ) {
    return _strtouq(
      __str,
      __endptr,
      __base,
    );
  }

  late final _strtouq_ptr = _lookup<ffi.NativeFunction<_c_strtouq>>('strtouq');
  late final _dart_strtouq _strtouq = _strtouq_ptr.asFunction<_dart_strtouq>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlistbulk_ptr =
      _lookup<ffi.NativeFunction<_c_getattrlistbulk>>('getattrlistbulk');
  late final _dart_getattrlistbulk _getattrlistbulk =
      _getattrlistbulk_ptr.asFunction<_dart_getattrlistbulk>();

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _getattrlistat_ptr =
      _lookup<ffi.NativeFunction<_c_getattrlistat>>('getattrlistat');
  late final _dart_getattrlistat _getattrlistat =
      _getattrlistat_ptr.asFunction<_dart_getattrlistat>();

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _setattrlistat_ptr =
      _lookup<ffi.NativeFunction<_c_setattrlistat>>('setattrlistat');
  late final _dart_setattrlistat _setattrlistat =
      _setattrlistat_ptr.asFunction<_dart_setattrlistat>();

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _faccessat_ptr =
      _lookup<ffi.NativeFunction<_c_faccessat>>('faccessat');
  late final _dart_faccessat _faccessat =
      _faccessat_ptr.asFunction<_dart_faccessat>();

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fchownat_ptr =
      _lookup<ffi.NativeFunction<_c_fchownat>>('fchownat');
  late final _dart_fchownat _fchownat =
      _fchownat_ptr.asFunction<_dart_fchownat>();

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _linkat_ptr = _lookup<ffi.NativeFunction<_c_linkat>>('linkat');
  late final _dart_linkat _linkat = _linkat_ptr.asFunction<_dart_linkat>();

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _readlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_readlinkat>>('readlinkat');
  late final _dart_readlinkat _readlinkat =
      _readlinkat_ptr.asFunction<_dart_readlinkat>();

  int symlinkat(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _symlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_symlinkat>>('symlinkat');
  late final _dart_symlinkat _symlinkat =
      _symlinkat_ptr.asFunction<_dart_symlinkat>();

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _unlinkat_ptr =
      _lookup<ffi.NativeFunction<_c_unlinkat>>('unlinkat');
  late final _dart_unlinkat _unlinkat =
      _unlinkat_ptr.asFunction<_dart_unlinkat>();

  void _exit(
    int arg0,
  ) {
    return __exit(
      arg0,
    );
  }

  late final __exit_ptr = _lookup<ffi.NativeFunction<_c__exit>>('_exit');
  late final _dart__exit __exit = __exit_ptr.asFunction<_dart__exit>();

  int access(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _access(
      arg0,
      arg1,
    );
  }

  late final _access_ptr = _lookup<ffi.NativeFunction<_c_access>>('access');
  late final _dart_access _access = _access_ptr.asFunction<_dart_access>();

  int alarm(
    int arg0,
  ) {
    return _alarm(
      arg0,
    );
  }

  late final _alarm_ptr = _lookup<ffi.NativeFunction<_c_alarm>>('alarm');
  late final _dart_alarm _alarm = _alarm_ptr.asFunction<_dart_alarm>();

  int chdir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _chdir(
      arg0,
    );
  }

  late final _chdir_ptr = _lookup<ffi.NativeFunction<_c_chdir>>('chdir');
  late final _dart_chdir _chdir = _chdir_ptr.asFunction<_dart_chdir>();

  int chown(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _chown_ptr = _lookup<ffi.NativeFunction<_c_chown>>('chown');
  late final _dart_chown _chown = _chown_ptr.asFunction<_dart_chown>();

  int close(
    int arg0,
  ) {
    return _close(
      arg0,
    );
  }

  late final _close_ptr = _lookup<ffi.NativeFunction<_c_close>>('close');
  late final _dart_close _close = _close_ptr.asFunction<_dart_close>();

  int dup(
    int arg0,
  ) {
    return _dup(
      arg0,
    );
  }

  late final _dup_ptr = _lookup<ffi.NativeFunction<_c_dup>>('dup');
  late final _dart_dup _dup = _dup_ptr.asFunction<_dart_dup>();

  int dup2(
    int arg0,
    int arg1,
  ) {
    return _dup2(
      arg0,
      arg1,
    );
  }

  late final _dup2_ptr = _lookup<ffi.NativeFunction<_c_dup2>>('dup2');
  late final _dart_dup2 _dup2 = _dup2_ptr.asFunction<_dart_dup2>();

  int execl(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    return _execl(
      __path,
      __arg0,
    );
  }

  late final _execl_ptr = _lookup<ffi.NativeFunction<_c_execl>>('execl');
  late final _dart_execl _execl = _execl_ptr.asFunction<_dart_execl>();

  int execle(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    return _execle(
      __path,
      __arg0,
    );
  }

  late final _execle_ptr = _lookup<ffi.NativeFunction<_c_execle>>('execle');
  late final _dart_execle _execle = _execle_ptr.asFunction<_dart_execle>();

  int execlp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    return _execlp(
      __file,
      __arg0,
    );
  }

  late final _execlp_ptr = _lookup<ffi.NativeFunction<_c_execlp>>('execlp');
  late final _dart_execlp _execlp = _execlp_ptr.asFunction<_dart_execlp>();

  int execv(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    return _execv(
      __path,
      __argv,
    );
  }

  late final _execv_ptr = _lookup<ffi.NativeFunction<_c_execv>>('execv');
  late final _dart_execv _execv = _execv_ptr.asFunction<_dart_execv>();

  int execve(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  late final _execve_ptr = _lookup<ffi.NativeFunction<_c_execve>>('execve');
  late final _dart_execve _execve = _execve_ptr.asFunction<_dart_execve>();

  int execvp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    return _execvp(
      __file,
      __argv,
    );
  }

  late final _execvp_ptr = _lookup<ffi.NativeFunction<_c_execvp>>('execvp');
  late final _dart_execvp _execvp = _execvp_ptr.asFunction<_dart_execvp>();

  int fork() {
    return _fork();
  }

  late final _fork_ptr = _lookup<ffi.NativeFunction<_c_fork>>('fork');
  late final _dart_fork _fork = _fork_ptr.asFunction<_dart_fork>();

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  late final _fpathconf_ptr =
      _lookup<ffi.NativeFunction<_c_fpathconf>>('fpathconf');
  late final _dart_fpathconf _fpathconf =
      _fpathconf_ptr.asFunction<_dart_fpathconf>();

  ffi.Pointer<ffi.Int8> getcwd(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _getcwd(
      arg0,
      arg1,
    );
  }

  late final _getcwd_ptr = _lookup<ffi.NativeFunction<_c_getcwd>>('getcwd');
  late final _dart_getcwd _getcwd = _getcwd_ptr.asFunction<_dart_getcwd>();

  int getegid() {
    return _getegid();
  }

  late final _getegid_ptr = _lookup<ffi.NativeFunction<_c_getegid>>('getegid');
  late final _dart_getegid _getegid = _getegid_ptr.asFunction<_dart_getegid>();

  int geteuid() {
    return _geteuid();
  }

  late final _geteuid_ptr = _lookup<ffi.NativeFunction<_c_geteuid>>('geteuid');
  late final _dart_geteuid _geteuid = _geteuid_ptr.asFunction<_dart_geteuid>();

  int getgid() {
    return _getgid();
  }

  late final _getgid_ptr = _lookup<ffi.NativeFunction<_c_getgid>>('getgid');
  late final _dart_getgid _getgid = _getgid_ptr.asFunction<_dart_getgid>();

  int getgroups(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _getgroups(
      arg0,
      arg1,
    );
  }

  late final _getgroups_ptr =
      _lookup<ffi.NativeFunction<_c_getgroups>>('getgroups');
  late final _dart_getgroups _getgroups =
      _getgroups_ptr.asFunction<_dart_getgroups>();

  ffi.Pointer<ffi.Int8> getlogin() {
    return _getlogin();
  }

  late final _getlogin_ptr =
      _lookup<ffi.NativeFunction<_c_getlogin>>('getlogin');
  late final _dart_getlogin _getlogin =
      _getlogin_ptr.asFunction<_dart_getlogin>();

  int getpgrp() {
    return _getpgrp();
  }

  late final _getpgrp_ptr = _lookup<ffi.NativeFunction<_c_getpgrp>>('getpgrp');
  late final _dart_getpgrp _getpgrp = _getpgrp_ptr.asFunction<_dart_getpgrp>();

  int getpid() {
    return _getpid();
  }

  late final _getpid_ptr = _lookup<ffi.NativeFunction<_c_getpid>>('getpid');
  late final _dart_getpid _getpid = _getpid_ptr.asFunction<_dart_getpid>();

  int getppid() {
    return _getppid();
  }

  late final _getppid_ptr = _lookup<ffi.NativeFunction<_c_getppid>>('getppid');
  late final _dart_getppid _getppid = _getppid_ptr.asFunction<_dart_getppid>();

  int getuid() {
    return _getuid();
  }

  late final _getuid_ptr = _lookup<ffi.NativeFunction<_c_getuid>>('getuid');
  late final _dart_getuid _getuid = _getuid_ptr.asFunction<_dart_getuid>();

  int isatty(
    int arg0,
  ) {
    return _isatty(
      arg0,
    );
  }

  late final _isatty_ptr = _lookup<ffi.NativeFunction<_c_isatty>>('isatty');
  late final _dart_isatty _isatty = _isatty_ptr.asFunction<_dart_isatty>();

  int link(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _link(
      arg0,
      arg1,
    );
  }

  late final _link_ptr = _lookup<ffi.NativeFunction<_c_link>>('link');
  late final _dart_link _link = _link_ptr.asFunction<_dart_link>();

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lseek_ptr = _lookup<ffi.NativeFunction<_c_lseek>>('lseek');
  late final _dart_lseek _lseek = _lseek_ptr.asFunction<_dart_lseek>();

  int pathconf(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _pathconf(
      arg0,
      arg1,
    );
  }

  late final _pathconf_ptr =
      _lookup<ffi.NativeFunction<_c_pathconf>>('pathconf');
  late final _dart_pathconf _pathconf =
      _pathconf_ptr.asFunction<_dart_pathconf>();

  int pause() {
    return _pause();
  }

  late final _pause_ptr = _lookup<ffi.NativeFunction<_c_pause>>('pause');
  late final _dart_pause _pause = _pause_ptr.asFunction<_dart_pause>();

  int pipe(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _pipe(
      arg0,
    );
  }

  late final _pipe_ptr = _lookup<ffi.NativeFunction<_c_pipe>>('pipe');
  late final _dart_pipe _pipe = _pipe_ptr.asFunction<_dart_pipe>();

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _read_ptr = _lookup<ffi.NativeFunction<_c_read>>('read');
  late final _dart_read _read = _read_ptr.asFunction<_dart_read>();

  int rmdir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _rmdir(
      arg0,
    );
  }

  late final _rmdir_ptr = _lookup<ffi.NativeFunction<_c_rmdir>>('rmdir');
  late final _dart_rmdir _rmdir = _rmdir_ptr.asFunction<_dart_rmdir>();

  int setgid(
    int arg0,
  ) {
    return _setgid(
      arg0,
    );
  }

  late final _setgid_ptr = _lookup<ffi.NativeFunction<_c_setgid>>('setgid');
  late final _dart_setgid _setgid = _setgid_ptr.asFunction<_dart_setgid>();

  int setpgid(
    int arg0,
    int arg1,
  ) {
    return _setpgid(
      arg0,
      arg1,
    );
  }

  late final _setpgid_ptr = _lookup<ffi.NativeFunction<_c_setpgid>>('setpgid');
  late final _dart_setpgid _setpgid = _setpgid_ptr.asFunction<_dart_setpgid>();

  int setsid() {
    return _setsid();
  }

  late final _setsid_ptr = _lookup<ffi.NativeFunction<_c_setsid>>('setsid');
  late final _dart_setsid _setsid = _setsid_ptr.asFunction<_dart_setsid>();

  int setuid(
    int arg0,
  ) {
    return _setuid(
      arg0,
    );
  }

  late final _setuid_ptr = _lookup<ffi.NativeFunction<_c_setuid>>('setuid');
  late final _dart_setuid _setuid = _setuid_ptr.asFunction<_dart_setuid>();

  int sleep(
    int arg0,
  ) {
    return _sleep(
      arg0,
    );
  }

  late final _sleep_ptr = _lookup<ffi.NativeFunction<_c_sleep>>('sleep');
  late final _dart_sleep _sleep = _sleep_ptr.asFunction<_dart_sleep>();

  int sysconf(
    int arg0,
  ) {
    return _sysconf(
      arg0,
    );
  }

  late final _sysconf_ptr = _lookup<ffi.NativeFunction<_c_sysconf>>('sysconf');
  late final _dart_sysconf _sysconf = _sysconf_ptr.asFunction<_dart_sysconf>();

  int tcgetpgrp(
    int arg0,
  ) {
    return _tcgetpgrp(
      arg0,
    );
  }

  late final _tcgetpgrp_ptr =
      _lookup<ffi.NativeFunction<_c_tcgetpgrp>>('tcgetpgrp');
  late final _dart_tcgetpgrp _tcgetpgrp =
      _tcgetpgrp_ptr.asFunction<_dart_tcgetpgrp>();

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  late final _tcsetpgrp_ptr =
      _lookup<ffi.NativeFunction<_c_tcsetpgrp>>('tcsetpgrp');
  late final _dart_tcsetpgrp _tcsetpgrp =
      _tcsetpgrp_ptr.asFunction<_dart_tcsetpgrp>();

  ffi.Pointer<ffi.Int8> ttyname(
    int arg0,
  ) {
    return _ttyname(
      arg0,
    );
  }

  late final _ttyname_ptr = _lookup<ffi.NativeFunction<_c_ttyname>>('ttyname');
  late final _dart_ttyname _ttyname = _ttyname_ptr.asFunction<_dart_ttyname>();

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ttyname_r_ptr =
      _lookup<ffi.NativeFunction<_c_ttyname_r>>('ttyname_r');
  late final _dart_ttyname_r _ttyname_r =
      _ttyname_r_ptr.asFunction<_dart_ttyname_r>();

  int unlink(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unlink(
      arg0,
    );
  }

  late final _unlink_ptr = _lookup<ffi.NativeFunction<_c_unlink>>('unlink');
  late final _dart_unlink _unlink = _unlink_ptr.asFunction<_dart_unlink>();

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  late final _write_ptr = _lookup<ffi.NativeFunction<_c_write>>('write');
  late final _dart_write _write = _write_ptr.asFunction<_dart_write>();

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _confstr_ptr = _lookup<ffi.NativeFunction<_c_confstr>>('confstr');
  late final _dart_confstr _confstr = _confstr_ptr.asFunction<_dart_confstr>();

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getopt_ptr = _lookup<ffi.NativeFunction<_c_getopt>>('getopt');
  late final _dart_getopt _getopt = _getopt_ptr.asFunction<_dart_getopt>();

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _optarg =
      _lookup<ffi.Pointer<ffi.Int8>>('optarg');

  ffi.Pointer<ffi.Int8> get optarg => _optarg.value;

  set optarg(ffi.Pointer<ffi.Int8> value) => _optarg.value = value;

  late final ffi.Pointer<ffi.Int32> _optind = _lookup<ffi.Int32>('optind');

  int get optind => _optind.value;

  set optind(int value) => _optind.value = value;

  late final ffi.Pointer<ffi.Int32> _opterr = _lookup<ffi.Int32>('opterr');

  int get opterr => _opterr.value;

  set opterr(int value) => _opterr.value = value;

  late final ffi.Pointer<ffi.Int32> _optopt = _lookup<ffi.Int32>('optopt');

  int get optopt => _optopt.value;

  set optopt(int value) => _optopt.value = value;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _ctermid(
      arg0,
    );
  }

  late final _ctermid_ptr = _lookup<ffi.NativeFunction<_c_ctermid>>('ctermid');
  late final _dart_ctermid _ctermid = _ctermid_ptr.asFunction<_dart_ctermid>();

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _brk(
      arg0,
    );
  }

  late final _brk_ptr = _lookup<ffi.NativeFunction<_c_brk>>('brk');
  late final _dart_brk _brk = _brk_ptr.asFunction<_dart_brk>();

  int chroot(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _chroot(
      arg0,
    );
  }

  late final _chroot_ptr = _lookup<ffi.NativeFunction<_c_chroot>>('chroot');
  late final _dart_chroot _chroot = _chroot_ptr.asFunction<_dart_chroot>();

  ffi.Pointer<ffi.Int8> crypt(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _crypt(
      arg0,
      arg1,
    );
  }

  late final _crypt_ptr = _lookup<ffi.NativeFunction<_c_crypt>>('crypt');
  late final _dart_crypt _crypt = _crypt_ptr.asFunction<_dart_crypt>();

  void encrypt(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _encrypt(
      arg0,
      arg1,
    );
  }

  late final _encrypt_ptr = _lookup<ffi.NativeFunction<_c_encrypt>>('encrypt');
  late final _dart_encrypt _encrypt = _encrypt_ptr.asFunction<_dart_encrypt>();

  int fchdir(
    int arg0,
  ) {
    return _fchdir(
      arg0,
    );
  }

  late final _fchdir_ptr = _lookup<ffi.NativeFunction<_c_fchdir>>('fchdir');
  late final _dart_fchdir _fchdir = _fchdir_ptr.asFunction<_dart_fchdir>();

  int gethostid() {
    return _gethostid();
  }

  late final _gethostid_ptr =
      _lookup<ffi.NativeFunction<_c_gethostid>>('gethostid');
  late final _dart_gethostid _gethostid =
      _gethostid_ptr.asFunction<_dart_gethostid>();

  int getpgid(
    int arg0,
  ) {
    return _getpgid(
      arg0,
    );
  }

  late final _getpgid_ptr = _lookup<ffi.NativeFunction<_c_getpgid>>('getpgid');
  late final _dart_getpgid _getpgid = _getpgid_ptr.asFunction<_dart_getpgid>();

  int getsid(
    int arg0,
  ) {
    return _getsid(
      arg0,
    );
  }

  late final _getsid_ptr = _lookup<ffi.NativeFunction<_c_getsid>>('getsid');
  late final _dart_getsid _getsid = _getsid_ptr.asFunction<_dart_getsid>();

  int getdtablesize() {
    return _getdtablesize();
  }

  late final _getdtablesize_ptr =
      _lookup<ffi.NativeFunction<_c_getdtablesize>>('getdtablesize');
  late final _dart_getdtablesize _getdtablesize =
      _getdtablesize_ptr.asFunction<_dart_getdtablesize>();

  int getpagesize() {
    return _getpagesize();
  }

  late final _getpagesize_ptr =
      _lookup<ffi.NativeFunction<_c_getpagesize>>('getpagesize');
  late final _dart_getpagesize _getpagesize =
      _getpagesize_ptr.asFunction<_dart_getpagesize>();

  ffi.Pointer<ffi.Int8> getpass(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getpass(
      arg0,
    );
  }

  late final _getpass_ptr = _lookup<ffi.NativeFunction<_c_getpass>>('getpass');
  late final _dart_getpass _getpass = _getpass_ptr.asFunction<_dart_getpass>();

  ffi.Pointer<ffi.Int8> getwd(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _getwd(
      arg0,
    );
  }

  late final _getwd_ptr = _lookup<ffi.NativeFunction<_c_getwd>>('getwd');
  late final _dart_getwd _getwd = _getwd_ptr.asFunction<_dart_getwd>();

  int lchown(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lchown_ptr = _lookup<ffi.NativeFunction<_c_lchown>>('lchown');
  late final _dart_lchown _lchown = _lchown_ptr.asFunction<_dart_lchown>();

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _lockf_ptr = _lookup<ffi.NativeFunction<_c_lockf>>('lockf');
  late final _dart_lockf _lockf = _lockf_ptr.asFunction<_dart_lockf>();

  int nice(
    int arg0,
  ) {
    return _nice(
      arg0,
    );
  }

  late final _nice_ptr = _lookup<ffi.NativeFunction<_c_nice>>('nice');
  late final _dart_nice _nice = _nice_ptr.asFunction<_dart_nice>();

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pread_ptr = _lookup<ffi.NativeFunction<_c_pread>>('pread');
  late final _dart_pread _pread = _pread_ptr.asFunction<_dart_pread>();

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  late final _pwrite_ptr = _lookup<ffi.NativeFunction<_c_pwrite>>('pwrite');
  late final _dart_pwrite _pwrite = _pwrite_ptr.asFunction<_dart_pwrite>();

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    return _sbrk(
      arg0,
    );
  }

  late final _sbrk_ptr = _lookup<ffi.NativeFunction<_c_sbrk>>('sbrk');
  late final _dart_sbrk _sbrk = _sbrk_ptr.asFunction<_dart_sbrk>();

  int setpgrp() {
    return _setpgrp();
  }

  late final _setpgrp_ptr = _lookup<ffi.NativeFunction<_c_setpgrp>>('setpgrp');
  late final _dart_setpgrp _setpgrp = _setpgrp_ptr.asFunction<_dart_setpgrp>();

  int setregid(
    int arg0,
    int arg1,
  ) {
    return _setregid(
      arg0,
      arg1,
    );
  }

  late final _setregid_ptr =
      _lookup<ffi.NativeFunction<_c_setregid>>('setregid');
  late final _dart_setregid _setregid =
      _setregid_ptr.asFunction<_dart_setregid>();

  int setreuid(
    int arg0,
    int arg1,
  ) {
    return _setreuid(
      arg0,
      arg1,
    );
  }

  late final _setreuid_ptr =
      _lookup<ffi.NativeFunction<_c_setreuid>>('setreuid');
  late final _dart_setreuid _setreuid =
      _setreuid_ptr.asFunction<_dart_setreuid>();

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _swab_ptr = _lookup<ffi.NativeFunction<_c_swab>>('swab');
  late final _dart_swab _swab = _swab_ptr.asFunction<_dart_swab>();

  void sync_1() {
    return _sync_1();
  }

  late final _sync_1_ptr = _lookup<ffi.NativeFunction<_c_sync_1>>('sync');
  late final _dart_sync_1 _sync_1 = _sync_1_ptr.asFunction<_dart_sync_1>();

  int truncate(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _truncate(
      arg0,
      arg1,
    );
  }

  late final _truncate_ptr =
      _lookup<ffi.NativeFunction<_c_truncate>>('truncate');
  late final _dart_truncate _truncate =
      _truncate_ptr.asFunction<_dart_truncate>();

  int ualarm(
    int arg0,
    int arg1,
  ) {
    return _ualarm(
      arg0,
      arg1,
    );
  }

  late final _ualarm_ptr = _lookup<ffi.NativeFunction<_c_ualarm>>('ualarm');
  late final _dart_ualarm _ualarm = _ualarm_ptr.asFunction<_dart_ualarm>();

  int usleep(
    int arg0,
  ) {
    return _usleep(
      arg0,
    );
  }

  late final _usleep_ptr = _lookup<ffi.NativeFunction<_c_usleep>>('usleep');
  late final _dart_usleep _usleep = _usleep_ptr.asFunction<_dart_usleep>();

  int vfork() {
    return _vfork();
  }

  late final _vfork_ptr = _lookup<ffi.NativeFunction<_c_vfork>>('vfork');
  late final _dart_vfork _vfork = _vfork_ptr.asFunction<_dart_vfork>();

  int fsync(
    int arg0,
  ) {
    return _fsync(
      arg0,
    );
  }

  late final _fsync_ptr = _lookup<ffi.NativeFunction<_c_fsync>>('fsync');
  late final _dart_fsync _fsync = _fsync_ptr.asFunction<_dart_fsync>();

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  late final _ftruncate_ptr =
      _lookup<ffi.NativeFunction<_c_ftruncate>>('ftruncate');
  late final _dart_ftruncate _ftruncate =
      _ftruncate_ptr.asFunction<_dart_ftruncate>();

  int getlogin_r(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  late final _getlogin_r_ptr =
      _lookup<ffi.NativeFunction<_c_getlogin_r>>('getlogin_r');
  late final _dart_getlogin_r _getlogin_r =
      _getlogin_r_ptr.asFunction<_dart_getlogin_r>();

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fchown_ptr = _lookup<ffi.NativeFunction<_c_fchown>>('fchown');
  late final _dart_fchown _fchown = _fchown_ptr.asFunction<_dart_fchown>();

  int gethostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _gethostname(
      arg0,
      arg1,
    );
  }

  late final _gethostname_ptr =
      _lookup<ffi.NativeFunction<_c_gethostname>>('gethostname');
  late final _dart_gethostname _gethostname =
      _gethostname_ptr.asFunction<_dart_gethostname>();

  int readlink(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readlink_ptr =
      _lookup<ffi.NativeFunction<_c_readlink>>('readlink');
  late final _dart_readlink _readlink =
      _readlink_ptr.asFunction<_dart_readlink>();

  int setegid(
    int arg0,
  ) {
    return _setegid(
      arg0,
    );
  }

  late final _setegid_ptr = _lookup<ffi.NativeFunction<_c_setegid>>('setegid');
  late final _dart_setegid _setegid = _setegid_ptr.asFunction<_dart_setegid>();

  int seteuid(
    int arg0,
  ) {
    return _seteuid(
      arg0,
    );
  }

  late final _seteuid_ptr = _lookup<ffi.NativeFunction<_c_seteuid>>('seteuid');
  late final _dart_seteuid _seteuid = _seteuid_ptr.asFunction<_dart_seteuid>();

  int symlink(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _symlink(
      arg0,
      arg1,
    );
  }

  late final _symlink_ptr = _lookup<ffi.NativeFunction<_c_symlink>>('symlink');
  late final _dart_symlink _symlink = _symlink_ptr.asFunction<_dart_symlink>();

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___darwin_check_fd_set_overflow_ptr =
      _lookup<ffi.NativeFunction<_c___darwin_check_fd_set_overflow>>(
          '__darwin_check_fd_set_overflow');
  late final _dart___darwin_check_fd_set_overflow
      ___darwin_check_fd_set_overflow = ___darwin_check_fd_set_overflow_ptr
          .asFunction<_dart___darwin_check_fd_set_overflow>();

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _pselect_ptr = _lookup<ffi.NativeFunction<_c_pselect>>('pselect');
  late final _dart_pselect _pselect = _pselect_ptr.asFunction<_dart_pselect>();

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _select_ptr = _lookup<ffi.NativeFunction<_c_select>>('select');
  late final _dart_select _select = _select_ptr.asFunction<_dart_select>();

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
  ) {
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _accessx_np_ptr =
      _lookup<ffi.NativeFunction<_c_accessx_np>>('accessx_np');
  late final _dart_accessx_np _accessx_np =
      _accessx_np_ptr.asFunction<_dart_accessx_np>();

  int acct(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _acct(
      arg0,
    );
  }

  late final _acct_ptr = _lookup<ffi.NativeFunction<_c_acct>>('acct');
  late final _dart_acct _acct = _acct_ptr.asFunction<_dart_acct>();

  int add_profil(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _add_profil_ptr =
      _lookup<ffi.NativeFunction<_c_add_profil>>('add_profil');
  late final _dart_add_profil _add_profil =
      _add_profil_ptr.asFunction<_dart_add_profil>();

  void endusershell() {
    return _endusershell();
  }

  late final _endusershell_ptr =
      _lookup<ffi.NativeFunction<_c_endusershell>>('endusershell');
  late final _dart_endusershell _endusershell =
      _endusershell_ptr.asFunction<_dart_endusershell>();

  int execvP(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  late final _execvP_ptr = _lookup<ffi.NativeFunction<_c_execvP>>('execvP');
  late final _dart_execvP _execvP = _execvP_ptr.asFunction<_dart_execvP>();

  ffi.Pointer<ffi.Int8> fflagstostr(
    int arg0,
  ) {
    return _fflagstostr(
      arg0,
    );
  }

  late final _fflagstostr_ptr =
      _lookup<ffi.NativeFunction<_c_fflagstostr>>('fflagstostr');
  late final _dart_fflagstostr _fflagstostr =
      _fflagstostr_ptr.asFunction<_dart_fflagstostr>();

  int getdomainname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  late final _getdomainname_ptr =
      _lookup<ffi.NativeFunction<_c_getdomainname>>('getdomainname');
  late final _dart_getdomainname _getdomainname =
      _getdomainname_ptr.asFunction<_dart_getdomainname>();

  int getgrouplist(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getgrouplist_ptr =
      _lookup<ffi.NativeFunction<_c_getgrouplist>>('getgrouplist');
  late final _dart_getgrouplist _getgrouplist =
      _getgrouplist_ptr.asFunction<_dart_getgrouplist>();

  int gethostuuid(
    ffi.Pointer<ffi.Uint8> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  late final _gethostuuid_ptr =
      _lookup<ffi.NativeFunction<_c_gethostuuid>>('gethostuuid');
  late final _dart_gethostuuid _gethostuuid =
      _gethostuuid_ptr.asFunction<_dart_gethostuuid>();

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _getmode(
      arg0,
      arg1,
    );
  }

  late final _getmode_ptr = _lookup<ffi.NativeFunction<_c_getmode>>('getmode');
  late final _dart_getmode _getmode = _getmode_ptr.asFunction<_dart_getmode>();

  int getpeereid(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _getpeereid_ptr =
      _lookup<ffi.NativeFunction<_c_getpeereid>>('getpeereid');
  late final _dart_getpeereid _getpeereid =
      _getpeereid_ptr.asFunction<_dart_getpeereid>();

  int getsgroups_np(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getsgroups_np_ptr =
      _lookup<ffi.NativeFunction<_c_getsgroups_np>>('getsgroups_np');
  late final _dart_getsgroups_np _getsgroups_np =
      _getsgroups_np_ptr.asFunction<_dart_getsgroups_np>();

  ffi.Pointer<ffi.Int8> getusershell() {
    return _getusershell();
  }

  late final _getusershell_ptr =
      _lookup<ffi.NativeFunction<_c_getusershell>>('getusershell');
  late final _dart_getusershell _getusershell =
      _getusershell_ptr.asFunction<_dart_getusershell>();

  int getwgroups_np(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _getwgroups_np_ptr =
      _lookup<ffi.NativeFunction<_c_getwgroups_np>>('getwgroups_np');
  late final _dart_getwgroups_np _getwgroups_np =
      _getwgroups_np_ptr.asFunction<_dart_getwgroups_np>();

  int initgroups(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _initgroups(
      arg0,
      arg1,
    );
  }

  late final _initgroups_ptr =
      _lookup<ffi.NativeFunction<_c_initgroups>>('initgroups');
  late final _dart_initgroups _initgroups =
      _initgroups_ptr.asFunction<_dart_initgroups>();

  int issetugid() {
    return _issetugid();
  }

  late final _issetugid_ptr =
      _lookup<ffi.NativeFunction<_c_issetugid>>('issetugid');
  late final _dart_issetugid _issetugid =
      _issetugid_ptr.asFunction<_dart_issetugid>();

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _mkdtemp(
      arg0,
    );
  }

  late final _mkdtemp_ptr = _lookup<ffi.NativeFunction<_c_mkdtemp>>('mkdtemp');
  late final _dart_mkdtemp _mkdtemp = _mkdtemp_ptr.asFunction<_dart_mkdtemp>();

  int mknod(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _mknod_ptr = _lookup<ffi.NativeFunction<_c_mknod>>('mknod');
  late final _dart_mknod _mknod = _mknod_ptr.asFunction<_dart_mknod>();

  int mkpath_np(
    ffi.Pointer<ffi.Int8> path,
    int omode,
  ) {
    return _mkpath_np(
      path,
      omode,
    );
  }

  late final _mkpath_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkpath_np>>('mkpath_np');
  late final _dart_mkpath_np _mkpath_np =
      _mkpath_np_ptr.asFunction<_dart_mkpath_np>();

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int omode,
  ) {
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  late final _mkpathat_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkpathat_np>>('mkpathat_np');
  late final _dart_mkpathat_np _mkpathat_np =
      _mkpathat_np_ptr.asFunction<_dart_mkpathat_np>();

  int mkstemps(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  late final _mkstemps_ptr =
      _lookup<ffi.NativeFunction<_c_mkstemps>>('mkstemps');
  late final _dart_mkstemps _mkstemps =
      _mkstemps_ptr.asFunction<_dart_mkstemps>();

  int mkostemp(
    ffi.Pointer<ffi.Int8> path,
    int oflags,
  ) {
    return _mkostemp(
      path,
      oflags,
    );
  }

  late final _mkostemp_ptr =
      _lookup<ffi.NativeFunction<_c_mkostemp>>('mkostemp');
  late final _dart_mkostemp _mkostemp =
      _mkostemp_ptr.asFunction<_dart_mkostemp>();

  int mkostemps(
    ffi.Pointer<ffi.Int8> path,
    int slen,
    int oflags,
  ) {
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  late final _mkostemps_ptr =
      _lookup<ffi.NativeFunction<_c_mkostemps>>('mkostemps');
  late final _dart_mkostemps _mkostemps =
      _mkostemps_ptr.asFunction<_dart_mkostemps>();

  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Int8> path,
    int dpclass,
    int dpflags,
  ) {
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  late final _mkstemp_dprotected_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkstemp_dprotected_np>>(
          'mkstemp_dprotected_np');
  late final _dart_mkstemp_dprotected_np _mkstemp_dprotected_np =
      _mkstemp_dprotected_np_ptr.asFunction<_dart_mkstemp_dprotected_np>();

  ffi.Pointer<ffi.Int8> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  late final _mkdtempat_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkdtempat_np>>('mkdtempat_np');
  late final _dart_mkdtempat_np _mkdtempat_np =
      _mkdtempat_np_ptr.asFunction<_dart_mkdtempat_np>();

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int slen,
  ) {
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  late final _mkstempsat_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkstempsat_np>>('mkstempsat_np');
  late final _dart_mkstempsat_np _mkstempsat_np =
      _mkstempsat_np_ptr.asFunction<_dart_mkstempsat_np>();

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int slen,
    int oflags,
  ) {
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  late final _mkostempsat_np_ptr =
      _lookup<ffi.NativeFunction<_c_mkostempsat_np>>('mkostempsat_np');
  late final _dart_mkostempsat_np _mkostempsat_np =
      _mkostempsat_np_ptr.asFunction<_dart_mkostempsat_np>();

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  late final _nfssvc_ptr = _lookup<ffi.NativeFunction<_c_nfssvc>>('nfssvc');
  late final _dart_nfssvc _nfssvc = _nfssvc_ptr.asFunction<_dart_nfssvc>();

  int profil(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _profil_ptr = _lookup<ffi.NativeFunction<_c_profil>>('profil');
  late final _dart_profil _profil = _profil_ptr.asFunction<_dart_profil>();

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_setugid_np_ptr =
      _lookup<ffi.NativeFunction<_c_pthread_setugid_np>>('pthread_setugid_np');
  late final _dart_pthread_setugid_np _pthread_setugid_np =
      _pthread_setugid_np_ptr.asFunction<_dart_pthread_setugid_np>();

  int pthread_getugid_np(
    ffi.Pointer<ffi.Uint32> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  late final _pthread_getugid_np_ptr =
      _lookup<ffi.NativeFunction<_c_pthread_getugid_np>>('pthread_getugid_np');
  late final _dart_pthread_getugid_np _pthread_getugid_np =
      _pthread_getugid_np_ptr.asFunction<_dart_pthread_getugid_np>();

  int reboot(
    int arg0,
  ) {
    return _reboot(
      arg0,
    );
  }

  late final _reboot_ptr = _lookup<ffi.NativeFunction<_c_reboot>>('reboot');
  late final _dart_reboot _reboot = _reboot_ptr.asFunction<_dart_reboot>();

  int revoke(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _revoke(
      arg0,
    );
  }

  late final _revoke_ptr = _lookup<ffi.NativeFunction<_c_revoke>>('revoke');
  late final _dart_revoke _revoke = _revoke_ptr.asFunction<_dart_revoke>();

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _rcmd_ptr = _lookup<ffi.NativeFunction<_c_rcmd>>('rcmd');
  late final _dart_rcmd _rcmd = _rcmd_ptr.asFunction<_dart_rcmd>();

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    int arg6,
  ) {
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _rcmd_af_ptr = _lookup<ffi.NativeFunction<_c_rcmd_af>>('rcmd_af');
  late final _dart_rcmd_af _rcmd_af = _rcmd_af_ptr.asFunction<_dart_rcmd_af>();

  int rresvport(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    return _rresvport(
      arg0,
    );
  }

  late final _rresvport_ptr =
      _lookup<ffi.NativeFunction<_c_rresvport>>('rresvport');
  late final _dart_rresvport _rresvport =
      _rresvport_ptr.asFunction<_dart_rresvport>();

  int rresvport_af(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  late final _rresvport_af_ptr =
      _lookup<ffi.NativeFunction<_c_rresvport_af>>('rresvport_af');
  late final _dart_rresvport_af _rresvport_af =
      _rresvport_af_ptr.asFunction<_dart_rresvport_af>();

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _iruserok_ptr =
      _lookup<ffi.NativeFunction<_c_iruserok>>('iruserok');
  late final _dart_iruserok _iruserok =
      _iruserok_ptr.asFunction<_dart_iruserok>();

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _iruserok_sa_ptr =
      _lookup<ffi.NativeFunction<_c_iruserok_sa>>('iruserok_sa');
  late final _dart_iruserok_sa _iruserok_sa =
      _iruserok_sa_ptr.asFunction<_dart_iruserok_sa>();

  int ruserok(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ruserok_ptr = _lookup<ffi.NativeFunction<_c_ruserok>>('ruserok');
  late final _dart_ruserok _ruserok = _ruserok_ptr.asFunction<_dart_ruserok>();

  int setdomainname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  late final _setdomainname_ptr =
      _lookup<ffi.NativeFunction<_c_setdomainname>>('setdomainname');
  late final _dart_setdomainname _setdomainname =
      _setdomainname_ptr.asFunction<_dart_setdomainname>();

  int setgroups(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    return _setgroups(
      arg0,
      arg1,
    );
  }

  late final _setgroups_ptr =
      _lookup<ffi.NativeFunction<_c_setgroups>>('setgroups');
  late final _dart_setgroups _setgroups =
      _setgroups_ptr.asFunction<_dart_setgroups>();

  void sethostid(
    int arg0,
  ) {
    return _sethostid(
      arg0,
    );
  }

  late final _sethostid_ptr =
      _lookup<ffi.NativeFunction<_c_sethostid>>('sethostid');
  late final _dart_sethostid _sethostid =
      _sethostid_ptr.asFunction<_dart_sethostid>();

  int sethostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _sethostname(
      arg0,
      arg1,
    );
  }

  late final _sethostname_ptr =
      _lookup<ffi.NativeFunction<_c_sethostname>>('sethostname');
  late final _dart_sethostname _sethostname =
      _sethostname_ptr.asFunction<_dart_sethostname>();

  int setlogin(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setlogin(
      arg0,
    );
  }

  late final _setlogin_ptr =
      _lookup<ffi.NativeFunction<_c_setlogin>>('setlogin');
  late final _dart_setlogin _setlogin =
      _setlogin_ptr.asFunction<_dart_setlogin>();

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _setmode(
      arg0,
    );
  }

  late final _setmode_ptr = _lookup<ffi.NativeFunction<_c_setmode>>('setmode');
  late final _dart_setmode _setmode = _setmode_ptr.asFunction<_dart_setmode>();

  int setrgid(
    int arg0,
  ) {
    return _setrgid(
      arg0,
    );
  }

  late final _setrgid_ptr = _lookup<ffi.NativeFunction<_c_setrgid>>('setrgid');
  late final _dart_setrgid _setrgid = _setrgid_ptr.asFunction<_dart_setrgid>();

  int setruid(
    int arg0,
  ) {
    return _setruid(
      arg0,
    );
  }

  late final _setruid_ptr = _lookup<ffi.NativeFunction<_c_setruid>>('setruid');
  late final _dart_setruid _setruid = _setruid_ptr.asFunction<_dart_setruid>();

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setsgroups_np_ptr =
      _lookup<ffi.NativeFunction<_c_setsgroups_np>>('setsgroups_np');
  late final _dart_setsgroups_np _setsgroups_np =
      _setsgroups_np_ptr.asFunction<_dart_setsgroups_np>();

  void setusershell() {
    return _setusershell();
  }

  late final _setusershell_ptr =
      _lookup<ffi.NativeFunction<_c_setusershell>>('setusershell');
  late final _dart_setusershell _setusershell =
      _setusershell_ptr.asFunction<_dart_setusershell>();

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  late final _setwgroups_np_ptr =
      _lookup<ffi.NativeFunction<_c_setwgroups_np>>('setwgroups_np');
  late final _dart_setwgroups_np _setwgroups_np =
      _setwgroups_np_ptr.asFunction<_dart_setwgroups_np>();

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strtofflags_ptr =
      _lookup<ffi.NativeFunction<_c_strtofflags>>('strtofflags');
  late final _dart_strtofflags _strtofflags =
      _strtofflags_ptr.asFunction<_dart_strtofflags>();

  int swapon(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _swapon(
      arg0,
    );
  }

  late final _swapon_ptr = _lookup<ffi.NativeFunction<_c_swapon>>('swapon');
  late final _dart_swapon _swapon = _swapon_ptr.asFunction<_dart_swapon>();

  int ttyslot() {
    return _ttyslot();
  }

  late final _ttyslot_ptr = _lookup<ffi.NativeFunction<_c_ttyslot>>('ttyslot');
  late final _dart_ttyslot _ttyslot = _ttyslot_ptr.asFunction<_dart_ttyslot>();

  int undelete(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _undelete(
      arg0,
    );
  }

  late final _undelete_ptr =
      _lookup<ffi.NativeFunction<_c_undelete>>('undelete');
  late final _dart_undelete _undelete =
      _undelete_ptr.asFunction<_dart_undelete>();

  int unwhiteout(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _unwhiteout(
      arg0,
    );
  }

  late final _unwhiteout_ptr =
      _lookup<ffi.NativeFunction<_c_unwhiteout>>('unwhiteout');
  late final _dart_unwhiteout _unwhiteout =
      _unwhiteout_ptr.asFunction<_dart_unwhiteout>();

  int syscall(
    int arg0,
  ) {
    return _syscall(
      arg0,
    );
  }

  late final _syscall_ptr = _lookup<ffi.NativeFunction<_c_syscall>>('syscall');
  late final _dart_syscall _syscall = _syscall_ptr.asFunction<_dart_syscall>();

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fgetattrlist_ptr =
      _lookup<ffi.NativeFunction<_c_fgetattrlist>>('fgetattrlist');
  late final _dart_fgetattrlist _fgetattrlist =
      _fgetattrlist_ptr.asFunction<_dart_fgetattrlist>();

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _fsetattrlist_ptr =
      _lookup<ffi.NativeFunction<_c_fsetattrlist>>('fsetattrlist');
  late final _dart_fsetattrlist _fsetattrlist =
      _fsetattrlist_ptr.asFunction<_dart_fsetattrlist>();

  int getattrlist(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _getattrlist_ptr =
      _lookup<ffi.NativeFunction<_c_getattrlist>>('getattrlist');
  late final _dart_getattrlist _getattrlist =
      _getattrlist_ptr.asFunction<_dart_getattrlist>();

  int setattrlist(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _setattrlist_ptr =
      _lookup<ffi.NativeFunction<_c_setattrlist>>('setattrlist');
  late final _dart_setattrlist _setattrlist =
      _setattrlist_ptr.asFunction<_dart_setattrlist>();

  int exchangedata(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _exchangedata_ptr =
      _lookup<ffi.NativeFunction<_c_exchangedata>>('exchangedata');
  late final _dart_exchangedata _exchangedata =
      _exchangedata_ptr.asFunction<_dart_exchangedata>();

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
    int arg7,
  ) {
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _getdirentriesattr_ptr =
      _lookup<ffi.NativeFunction<_c_getdirentriesattr>>('getdirentriesattr');
  late final _dart_getdirentriesattr _getdirentriesattr =
      _getdirentriesattr_ptr.asFunction<_dart_getdirentriesattr>();

  int searchfs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _searchfs_ptr =
      _lookup<ffi.NativeFunction<_c_searchfs>>('searchfs');
  late final _dart_searchfs _searchfs =
      _searchfs_ptr.asFunction<_dart_searchfs>();

  int fsctl(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _fsctl_ptr = _lookup<ffi.NativeFunction<_c_fsctl>>('fsctl');
  late final _dart_fsctl _fsctl = _fsctl_ptr.asFunction<_dart_fsctl>();

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ffsctl_ptr = _lookup<ffi.NativeFunction<_c_ffsctl>>('ffsctl');
  late final _dart_ffsctl _ffsctl = _ffsctl_ptr.asFunction<_dart_ffsctl>();

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _fsync_volume_np_ptr =
      _lookup<ffi.NativeFunction<_c_fsync_volume_np>>('fsync_volume_np');
  late final _dart_fsync_volume_np _fsync_volume_np =
      _fsync_volume_np_ptr.asFunction<_dart_fsync_volume_np>();

  int sync_volume_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  late final _sync_volume_np_ptr =
      _lookup<ffi.NativeFunction<_c_sync_volume_np>>('sync_volume_np');
  late final _dart_sync_volume_np _sync_volume_np =
      _sync_volume_np_ptr.asFunction<_dart_sync_volume_np>();

  late final ffi.Pointer<ffi.Int32> _optreset = _lookup<ffi.Int32>('optreset');

  int get optreset => _optreset.value;

  set optreset(int value) => _optreset.value = value;

  int open(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _open(
      arg0,
      arg1,
    );
  }

  late final _open_ptr = _lookup<ffi.NativeFunction<_c_open>>('open');
  late final _dart_open _open = _open_ptr.asFunction<_dart_open>();

  int openat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openat_ptr = _lookup<ffi.NativeFunction<_c_openat>>('openat');
  late final _dart_openat _openat = _openat_ptr.asFunction<_dart_openat>();

  int creat(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _creat(
      arg0,
      arg1,
    );
  }

  late final _creat_ptr = _lookup<ffi.NativeFunction<_c_creat>>('creat');
  late final _dart_creat _creat = _creat_ptr.asFunction<_dart_creat>();

  int fcntl(int arg0, int arg1, int arg3) {
    return _fcntl(
      arg0,
      arg1,
      arg3,
    );
  }

  late final _fcntl_ptr = _lookup<ffi.NativeFunction<_c_fcntl>>('fcntl');
  late final _dart_fcntl _fcntl = _fcntl_ptr.asFunction<_dart_fcntl>();

  int openx_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<_filesec> arg2,
  ) {
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _openx_np_ptr =
      _lookup<ffi.NativeFunction<_c_openx_np>>('openx_np');
  late final _dart_openx_np _openx_np =
      _openx_np_ptr.asFunction<_dart_openx_np>();

  int open_dprotected_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _open_dprotected_np_ptr =
      _lookup<ffi.NativeFunction<_c_open_dprotected_np>>('open_dprotected_np');
  late final _dart_open_dprotected_np _open_dprotected_np =
      _open_dprotected_np_ptr.asFunction<_dart_open_dprotected_np>();

  int flock_1(
    int arg0,
    int arg1,
  ) {
    return _flock_1(
      arg0,
      arg1,
    );
  }

  late final _flock_1_ptr = _lookup<ffi.NativeFunction<_c_flock_1>>('flock');
  late final _dart_flock_1 _flock_1 = _flock_1_ptr.asFunction<_dart_flock_1>();

  ffi.Pointer<_filesec> filesec_init() {
    return _filesec_init();
  }

  late final _filesec_init_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_init>>('filesec_init');
  late final _dart_filesec_init _filesec_init =
      _filesec_init_ptr.asFunction<_dart_filesec_init>();

  ffi.Pointer<_filesec> filesec_dup(
    ffi.Pointer<_filesec> arg0,
  ) {
    return _filesec_dup(
      arg0,
    );
  }

  late final _filesec_dup_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_dup>>('filesec_dup');
  late final _dart_filesec_dup _filesec_dup =
      _filesec_dup_ptr.asFunction<_dart_filesec_dup>();

  void filesec_free(
    ffi.Pointer<_filesec> arg0,
  ) {
    return _filesec_free(
      arg0,
    );
  }

  late final _filesec_free_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_free>>('filesec_free');
  late final _dart_filesec_free _filesec_free =
      _filesec_free_ptr.asFunction<_dart_filesec_free>();

  int filesec_get_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_get_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_get_property_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_get_property>>(
          'filesec_get_property');
  late final _dart_filesec_get_property _filesec_get_property =
      _filesec_get_property_ptr.asFunction<_dart_filesec_get_property>();

  int filesec_query_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    return _filesec_query_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_query_property_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_query_property>>(
          'filesec_query_property');
  late final _dart_filesec_query_property _filesec_query_property =
      _filesec_query_property_ptr.asFunction<_dart_filesec_query_property>();

  int filesec_set_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _filesec_set_property(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _filesec_set_property_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_set_property>>(
          'filesec_set_property');
  late final _dart_filesec_set_property _filesec_set_property =
      _filesec_set_property_ptr.asFunction<_dart_filesec_set_property>();

  int filesec_unset_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
  ) {
    return _filesec_unset_property(
      arg0,
      arg1,
    );
  }

  late final _filesec_unset_property_ptr =
      _lookup<ffi.NativeFunction<_c_filesec_unset_property>>(
          'filesec_unset_property');
  late final _dart_filesec_unset_property _filesec_unset_property =
      _filesec_unset_property_ptr.asFunction<_dart_filesec_unset_property>();

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_signame =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_signame');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_signame => _sys_signame.value;

  set sys_signame(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_signame.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_siglist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_siglist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_siglist => _sys_siglist.value;

  set sys_siglist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_siglist.value = value;

  int raise(
    int arg0,
  ) {
    return _raise(
      arg0,
    );
  }

  late final _raise_ptr = _lookup<ffi.NativeFunction<_c_raise>>('raise');
  late final _dart_raise _raise = _raise_ptr.asFunction<_dart_raise>();

  ffi.Pointer<ffi.NativeFunction<_typedefC_14>> bsd_signal(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_15>> arg1,
  ) {
    return _bsd_signal(
      arg0,
      arg1,
    );
  }

  late final _bsd_signal_ptr =
      _lookup<ffi.NativeFunction<_c_bsd_signal>>('bsd_signal');
  late final _dart_bsd_signal _bsd_signal =
      _bsd_signal_ptr.asFunction<_dart_bsd_signal>();

  int kill(
    int arg0,
    int arg1,
  ) {
    return _kill(
      arg0,
      arg1,
    );
  }

  late final _kill_ptr = _lookup<ffi.NativeFunction<_c_kill>>('kill');
  late final _dart_kill _kill = _kill_ptr.asFunction<_dart_kill>();

  int killpg(
    int arg0,
    int arg1,
  ) {
    return _killpg(
      arg0,
      arg1,
    );
  }

  late final _killpg_ptr = _lookup<ffi.NativeFunction<_c_killpg>>('killpg');
  late final _dart_killpg _killpg = _killpg_ptr.asFunction<_dart_killpg>();

  int pthread_kill(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
  ) {
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  late final _pthread_kill_ptr =
      _lookup<ffi.NativeFunction<_c_pthread_kill>>('pthread_kill');
  late final _dart_pthread_kill _pthread_kill =
      _pthread_kill_ptr.asFunction<_dart_pthread_kill>();

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _pthread_sigmask_ptr =
      _lookup<ffi.NativeFunction<_c_pthread_sigmask>>('pthread_sigmask');
  late final _dart_pthread_sigmask _pthread_sigmask =
      _pthread_sigmask_ptr.asFunction<_dart_pthread_sigmask>();

  int sigaction_1(
    int arg0,
    ffi.Pointer<sigaction> arg1,
    ffi.Pointer<sigaction> arg2,
  ) {
    return _sigaction_1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigaction_1_ptr =
      _lookup<ffi.NativeFunction<_c_sigaction_1>>('sigaction');
  late final _dart_sigaction_1 _sigaction_1 =
      _sigaction_1_ptr.asFunction<_dart_sigaction_1>();

  int sigaddset(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  late final _sigaddset_ptr =
      _lookup<ffi.NativeFunction<_c_sigaddset>>('sigaddset');
  late final _dart_sigaddset _sigaddset =
      _sigaddset_ptr.asFunction<_dart_sigaddset>();

  int sigaltstack(
    ffi.Pointer<__darwin_sigaltstack> arg0,
    ffi.Pointer<__darwin_sigaltstack> arg1,
  ) {
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  late final _sigaltstack_ptr =
      _lookup<ffi.NativeFunction<_c_sigaltstack>>('sigaltstack');
  late final _dart_sigaltstack _sigaltstack =
      _sigaltstack_ptr.asFunction<_dart_sigaltstack>();

  int sigdelset(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  late final _sigdelset_ptr =
      _lookup<ffi.NativeFunction<_c_sigdelset>>('sigdelset');
  late final _dart_sigdelset _sigdelset =
      _sigdelset_ptr.asFunction<_dart_sigdelset>();

  int sigemptyset(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _sigemptyset(
      arg0,
    );
  }

  late final _sigemptyset_ptr =
      _lookup<ffi.NativeFunction<_c_sigemptyset>>('sigemptyset');
  late final _dart_sigemptyset _sigemptyset =
      _sigemptyset_ptr.asFunction<_dart_sigemptyset>();

  int sigfillset(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _sigfillset(
      arg0,
    );
  }

  late final _sigfillset_ptr =
      _lookup<ffi.NativeFunction<_c_sigfillset>>('sigfillset');
  late final _dart_sigfillset _sigfillset =
      _sigfillset_ptr.asFunction<_dart_sigfillset>();

  int sighold(
    int arg0,
  ) {
    return _sighold(
      arg0,
    );
  }

  late final _sighold_ptr = _lookup<ffi.NativeFunction<_c_sighold>>('sighold');
  late final _dart_sighold _sighold = _sighold_ptr.asFunction<_dart_sighold>();

  int sigignore(
    int arg0,
  ) {
    return _sigignore(
      arg0,
    );
  }

  late final _sigignore_ptr =
      _lookup<ffi.NativeFunction<_c_sigignore>>('sigignore');
  late final _dart_sigignore _sigignore =
      _sigignore_ptr.asFunction<_dart_sigignore>();

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  late final _siginterrupt_ptr =
      _lookup<ffi.NativeFunction<_c_siginterrupt>>('siginterrupt');
  late final _dart_siginterrupt _siginterrupt =
      _siginterrupt_ptr.asFunction<_dart_siginterrupt>();

  int sigismember(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    return _sigismember(
      arg0,
      arg1,
    );
  }

  late final _sigismember_ptr =
      _lookup<ffi.NativeFunction<_c_sigismember>>('sigismember');
  late final _dart_sigismember _sigismember =
      _sigismember_ptr.asFunction<_dart_sigismember>();

  int sigpause(
    int arg0,
  ) {
    return _sigpause(
      arg0,
    );
  }

  late final _sigpause_ptr =
      _lookup<ffi.NativeFunction<_c_sigpause>>('sigpause');
  late final _dart_sigpause _sigpause =
      _sigpause_ptr.asFunction<_dart_sigpause>();

  int sigpending(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _sigpending(
      arg0,
    );
  }

  late final _sigpending_ptr =
      _lookup<ffi.NativeFunction<_c_sigpending>>('sigpending');
  late final _dart_sigpending _sigpending =
      _sigpending_ptr.asFunction<_dart_sigpending>();

  int sigprocmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigprocmask_ptr =
      _lookup<ffi.NativeFunction<_c_sigprocmask>>('sigprocmask');
  late final _dart_sigprocmask _sigprocmask =
      _sigprocmask_ptr.asFunction<_dart_sigprocmask>();

  int sigrelse(
    int arg0,
  ) {
    return _sigrelse(
      arg0,
    );
  }

  late final _sigrelse_ptr =
      _lookup<ffi.NativeFunction<_c_sigrelse>>('sigrelse');
  late final _dart_sigrelse _sigrelse =
      _sigrelse_ptr.asFunction<_dart_sigrelse>();

  ffi.Pointer<ffi.NativeFunction<_typedefC_16>> sigset(
    int arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_17>> arg1,
  ) {
    return _sigset(
      arg0,
      arg1,
    );
  }

  late final _sigset_ptr = _lookup<ffi.NativeFunction<_c_sigset>>('sigset');
  late final _dart_sigset _sigset = _sigset_ptr.asFunction<_dart_sigset>();

  int sigsuspend(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    return _sigsuspend(
      arg0,
    );
  }

  late final _sigsuspend_ptr =
      _lookup<ffi.NativeFunction<_c_sigsuspend>>('sigsuspend');
  late final _dart_sigsuspend _sigsuspend =
      _sigsuspend_ptr.asFunction<_dart_sigsuspend>();

  int sigwait(
    ffi.Pointer<ffi.Uint32> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _sigwait(
      arg0,
      arg1,
    );
  }

  late final _sigwait_ptr = _lookup<ffi.NativeFunction<_c_sigwait>>('sigwait');
  late final _dart_sigwait _sigwait = _sigwait_ptr.asFunction<_dart_sigwait>();

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _psignal(
      arg0,
      arg1,
    );
  }

  late final _psignal_ptr = _lookup<ffi.NativeFunction<_c_psignal>>('psignal');
  late final _dart_psignal _psignal = _psignal_ptr.asFunction<_dart_psignal>();

  int sigblock(
    int arg0,
  ) {
    return _sigblock(
      arg0,
    );
  }

  late final _sigblock_ptr =
      _lookup<ffi.NativeFunction<_c_sigblock>>('sigblock');
  late final _dart_sigblock _sigblock =
      _sigblock_ptr.asFunction<_dart_sigblock>();

  int sigsetmask(
    int arg0,
  ) {
    return _sigsetmask(
      arg0,
    );
  }

  late final _sigsetmask_ptr =
      _lookup<ffi.NativeFunction<_c_sigsetmask>>('sigsetmask');
  late final _dart_sigsetmask _sigsetmask =
      _sigsetmask_ptr.asFunction<_dart_sigsetmask>();

  int sigvec_1(
    int arg0,
    ffi.Pointer<sigvec> arg1,
    ffi.Pointer<sigvec> arg2,
  ) {
    return _sigvec_1(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _sigvec_1_ptr = _lookup<ffi.NativeFunction<_c_sigvec_1>>('sigvec');
  late final _dart_sigvec_1 _sigvec_1 =
      _sigvec_1_ptr.asFunction<_dart_sigvec_1>();

  int closedir(
    ffi.Pointer<DIR> arg0,
  ) {
    return _closedir(
      arg0,
    );
  }

  late final _closedir_ptr =
      _lookup<ffi.NativeFunction<_c_closedir>>('closedir');
  late final _dart_closedir _closedir =
      _closedir_ptr.asFunction<_dart_closedir>();

  ffi.Pointer<DIR> opendir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _opendir(
      arg0,
    );
  }

  late final _opendir_ptr = _lookup<ffi.NativeFunction<_c_opendir>>('opendir');
  late final _dart_opendir _opendir = _opendir_ptr.asFunction<_dart_opendir>();

  ffi.Pointer<dirent> readdir(
    ffi.Pointer<DIR> arg0,
  ) {
    return _readdir(
      arg0,
    );
  }

  late final _readdir_ptr = _lookup<ffi.NativeFunction<_c_readdir>>('readdir');
  late final _dart_readdir _readdir = _readdir_ptr.asFunction<_dart_readdir>();

  int readdir_r(
    ffi.Pointer<DIR> arg0,
    ffi.Pointer<dirent> arg1,
    ffi.Pointer<ffi.Pointer<dirent>> arg2,
  ) {
    return _readdir_r(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _readdir_r_ptr =
      _lookup<ffi.NativeFunction<_c_readdir_r>>('readdir_r');
  late final _dart_readdir_r _readdir_r =
      _readdir_r_ptr.asFunction<_dart_readdir_r>();

  void rewinddir(
    ffi.Pointer<DIR> arg0,
  ) {
    return _rewinddir(
      arg0,
    );
  }

  late final _rewinddir_ptr =
      _lookup<ffi.NativeFunction<_c_rewinddir>>('rewinddir');
  late final _dart_rewinddir _rewinddir =
      _rewinddir_ptr.asFunction<_dart_rewinddir>();

  void seekdir(
    ffi.Pointer<DIR> arg0,
    int arg1,
  ) {
    return _seekdir(
      arg0,
      arg1,
    );
  }

  late final _seekdir_ptr = _lookup<ffi.NativeFunction<_c_seekdir>>('seekdir');
  late final _dart_seekdir _seekdir = _seekdir_ptr.asFunction<_dart_seekdir>();

  int telldir(
    ffi.Pointer<DIR> arg0,
  ) {
    return _telldir(
      arg0,
    );
  }

  late final _telldir_ptr = _lookup<ffi.NativeFunction<_c_telldir>>('telldir');
  late final _dart_telldir _telldir = _telldir_ptr.asFunction<_dart_telldir>();

  ffi.Pointer<DIR> fdopendir(
    int arg0,
  ) {
    return _fdopendir(
      arg0,
    );
  }

  late final _fdopendir_ptr =
      _lookup<ffi.NativeFunction<_c_fdopendir>>('fdopendir');
  late final _dart_fdopendir _fdopendir =
      _fdopendir_ptr.asFunction<_dart_fdopendir>();

  int alphasort(
    ffi.Pointer<ffi.Pointer<dirent>> arg0,
    ffi.Pointer<ffi.Pointer<dirent>> arg1,
  ) {
    return _alphasort(
      arg0,
      arg1,
    );
  }

  late final _alphasort_ptr =
      _lookup<ffi.NativeFunction<_c_alphasort>>('alphasort');
  late final _dart_alphasort _alphasort =
      _alphasort_ptr.asFunction<_dart_alphasort>();

  int dirfd(
    ffi.Pointer<DIR> dirp,
  ) {
    return _dirfd(
      dirp,
    );
  }

  late final _dirfd_ptr = _lookup<ffi.NativeFunction<_c_dirfd>>('dirfd');
  late final _dart_dirfd _dirfd = _dirfd_ptr.asFunction<_dart_dirfd>();

  int scandir(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg3,
  ) {
    return _scandir(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _scandir_ptr = _lookup<ffi.NativeFunction<_c_scandir>>('scandir');
  late final _dart_scandir _scandir = _scandir_ptr.asFunction<_dart_scandir>();

  int getdirentries(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int64> arg3,
  ) {
    return _getdirentries(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _getdirentries_ptr =
      _lookup<ffi.NativeFunction<_c_getdirentries>>('getdirentries');
  late final _dart_getdirentries _getdirentries =
      _getdirentries_ptr.asFunction<_dart_getdirentries>();

  ffi.Pointer<DIR> __opendir2(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return ___opendir2(
      arg0,
      arg1,
    );
  }

  late final ___opendir2_ptr =
      _lookup<ffi.NativeFunction<_c___opendir2>>('__opendir2');
  late final _dart___opendir2 ___opendir2 =
      ___opendir2_ptr.asFunction<_dart___opendir2>();

  int cfgetispeed(
    ffi.Pointer<termios> arg0,
  ) {
    return _cfgetispeed(
      arg0,
    );
  }

  late final _cfgetispeed_ptr =
      _lookup<ffi.NativeFunction<_c_cfgetispeed>>('cfgetispeed');
  late final _dart_cfgetispeed _cfgetispeed =
      _cfgetispeed_ptr.asFunction<_dart_cfgetispeed>();

  int cfgetospeed(
    ffi.Pointer<termios> arg0,
  ) {
    return _cfgetospeed(
      arg0,
    );
  }

  late final _cfgetospeed_ptr =
      _lookup<ffi.NativeFunction<_c_cfgetospeed>>('cfgetospeed');
  late final _dart_cfgetospeed _cfgetospeed =
      _cfgetospeed_ptr.asFunction<_dart_cfgetospeed>();

  int cfsetispeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    return _cfsetispeed(
      arg0,
      arg1,
    );
  }

  late final _cfsetispeed_ptr =
      _lookup<ffi.NativeFunction<_c_cfsetispeed>>('cfsetispeed');
  late final _dart_cfsetispeed _cfsetispeed =
      _cfsetispeed_ptr.asFunction<_dart_cfsetispeed>();

  int cfsetospeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    return _cfsetospeed(
      arg0,
      arg1,
    );
  }

  late final _cfsetospeed_ptr =
      _lookup<ffi.NativeFunction<_c_cfsetospeed>>('cfsetospeed');
  late final _dart_cfsetospeed _cfsetospeed =
      _cfsetospeed_ptr.asFunction<_dart_cfsetospeed>();

  int tcgetattr(
    int arg0,
    ffi.Pointer<termios> arg1,
  ) {
    return _tcgetattr(
      arg0,
      arg1,
    );
  }

  late final _tcgetattr_ptr =
      _lookup<ffi.NativeFunction<_c_tcgetattr>>('tcgetattr');
  late final _dart_tcgetattr _tcgetattr =
      _tcgetattr_ptr.asFunction<_dart_tcgetattr>();

  int tcsetattr(
    int arg0,
    int arg1,
    ffi.Pointer<termios> arg2,
  ) {
    return _tcsetattr(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _tcsetattr_ptr =
      _lookup<ffi.NativeFunction<_c_tcsetattr>>('tcsetattr');
  late final _dart_tcsetattr _tcsetattr =
      _tcsetattr_ptr.asFunction<_dart_tcsetattr>();

  int tcdrain(
    int arg0,
  ) {
    return _tcdrain(
      arg0,
    );
  }

  late final _tcdrain_ptr = _lookup<ffi.NativeFunction<_c_tcdrain>>('tcdrain');
  late final _dart_tcdrain _tcdrain = _tcdrain_ptr.asFunction<_dart_tcdrain>();

  int tcflow(
    int arg0,
    int arg1,
  ) {
    return _tcflow(
      arg0,
      arg1,
    );
  }

  late final _tcflow_ptr = _lookup<ffi.NativeFunction<_c_tcflow>>('tcflow');
  late final _dart_tcflow _tcflow = _tcflow_ptr.asFunction<_dart_tcflow>();

  int tcflush(
    int arg0,
    int arg1,
  ) {
    return _tcflush(
      arg0,
      arg1,
    );
  }

  late final _tcflush_ptr = _lookup<ffi.NativeFunction<_c_tcflush>>('tcflush');
  late final _dart_tcflush _tcflush = _tcflush_ptr.asFunction<_dart_tcflush>();

  int tcsendbreak(
    int arg0,
    int arg1,
  ) {
    return _tcsendbreak(
      arg0,
      arg1,
    );
  }

  late final _tcsendbreak_ptr =
      _lookup<ffi.NativeFunction<_c_tcsendbreak>>('tcsendbreak');
  late final _dart_tcsendbreak _tcsendbreak =
      _tcsendbreak_ptr.asFunction<_dart_tcsendbreak>();

  void cfmakeraw(
    ffi.Pointer<termios> arg0,
  ) {
    return _cfmakeraw(
      arg0,
    );
  }

  late final _cfmakeraw_ptr =
      _lookup<ffi.NativeFunction<_c_cfmakeraw>>('cfmakeraw');
  late final _dart_cfmakeraw _cfmakeraw =
      _cfmakeraw_ptr.asFunction<_dart_cfmakeraw>();

  int cfsetspeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    return _cfsetspeed(
      arg0,
      arg1,
    );
  }

  late final _cfsetspeed_ptr =
      _lookup<ffi.NativeFunction<_c_cfsetspeed>>('cfsetspeed');
  late final _dart_cfsetspeed _cfsetspeed =
      _cfsetspeed_ptr.asFunction<_dart_cfsetspeed>();

  int tcgetsid(
    int arg0,
  ) {
    return _tcgetsid(
      arg0,
    );
  }

  late final _tcgetsid_ptr =
      _lookup<ffi.NativeFunction<_c_tcgetsid>>('tcgetsid');
  late final _dart_tcgetsid _tcgetsid =
      _tcgetsid_ptr.asFunction<_dart_tcgetsid>();

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _renameat_ptr =
      _lookup<ffi.NativeFunction<_c_renameat>>('renameat');
  late final _dart_renameat _renameat =
      _renameat_ptr.asFunction<_dart_renameat>();

  int renamex_np(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _renamex_np_ptr =
      _lookup<ffi.NativeFunction<_c_renamex_np>>('renamex_np');
  late final _dart_renamex_np _renamex_np =
      _renamex_np_ptr.asFunction<_dart_renamex_np>();

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _renameatx_np_ptr =
      _lookup<ffi.NativeFunction<_c_renameatx_np>>('renameatx_np');
  late final _dart_renameatx_np _renameatx_np =
      _renameatx_np_ptr.asFunction<_dart_renameatx_np>();

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  void clearerr(
    ffi.Pointer<FILE> arg0,
  ) {
    return _clearerr(
      arg0,
    );
  }

  late final _clearerr_ptr =
      _lookup<ffi.NativeFunction<_c_clearerr>>('clearerr');
  late final _dart_clearerr _clearerr =
      _clearerr_ptr.asFunction<_dart_clearerr>();

  int fclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fclose(
      arg0,
    );
  }

  late final _fclose_ptr = _lookup<ffi.NativeFunction<_c_fclose>>('fclose');
  late final _dart_fclose _fclose = _fclose_ptr.asFunction<_dart_fclose>();

  int feof(
    ffi.Pointer<FILE> arg0,
  ) {
    return _feof(
      arg0,
    );
  }

  late final _feof_ptr = _lookup<ffi.NativeFunction<_c_feof>>('feof');
  late final _dart_feof _feof = _feof_ptr.asFunction<_dart_feof>();

  int ferror(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ferror(
      arg0,
    );
  }

  late final _ferror_ptr = _lookup<ffi.NativeFunction<_c_ferror>>('ferror');
  late final _dart_ferror _ferror = _ferror_ptr.asFunction<_dart_ferror>();

  int fflush(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fflush(
      arg0,
    );
  }

  late final _fflush_ptr = _lookup<ffi.NativeFunction<_c_fflush>>('fflush');
  late final _dart_fflush _fflush = _fflush_ptr.asFunction<_dart_fflush>();

  int fgetc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fgetc(
      arg0,
    );
  }

  late final _fgetc_ptr = _lookup<ffi.NativeFunction<_c_fgetc>>('fgetc');
  late final _dart_fgetc _fgetc = _fgetc_ptr.asFunction<_dart_fgetc>();

  int fgetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  late final _fgetpos_ptr = _lookup<ffi.NativeFunction<_c_fgetpos>>('fgetpos');
  late final _dart_fgetpos _fgetpos = _fgetpos_ptr.asFunction<_dart_fgetpos>();

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fgets_ptr = _lookup<ffi.NativeFunction<_c_fgets>>('fgets');
  late final _dart_fgets _fgets = _fgets_ptr.asFunction<_dart_fgets>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    return _fopen(
      __filename,
      __mode,
    );
  }

  late final _fopen_ptr = _lookup<ffi.NativeFunction<_c_fopen>>('fopen');
  late final _dart_fopen _fopen = _fopen_ptr.asFunction<_dart_fopen>();

  int fprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fprintf(
      arg0,
      arg1,
    );
  }

  late final _fprintf_ptr = _lookup<ffi.NativeFunction<_c_fprintf>>('fprintf');
  late final _dart_fprintf _fprintf = _fprintf_ptr.asFunction<_dart_fprintf>();

  int fputc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputc(
      arg0,
      arg1,
    );
  }

  late final _fputc_ptr = _lookup<ffi.NativeFunction<_c_fputc>>('fputc');
  late final _dart_fputc _fputc = _fputc_ptr.asFunction<_dart_fputc>();

  int fputs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _fputs(
      arg0,
      arg1,
    );
  }

  late final _fputs_ptr = _lookup<ffi.NativeFunction<_c_fputs>>('fputs');
  late final _dart_fputs _fputs = _fputs_ptr.asFunction<_dart_fputs>();

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fread_ptr = _lookup<ffi.NativeFunction<_c_fread>>('fread');
  late final _dart_fread _fread = _fread_ptr.asFunction<_dart_fread>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<FILE> arg2,
  ) {
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _freopen_ptr = _lookup<ffi.NativeFunction<_c_freopen>>('freopen');
  late final _dart_freopen _freopen = _freopen_ptr.asFunction<_dart_freopen>();

  int fscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fscanf(
      arg0,
      arg1,
    );
  }

  late final _fscanf_ptr = _lookup<ffi.NativeFunction<_c_fscanf>>('fscanf');
  late final _dart_fscanf _fscanf = _fscanf_ptr.asFunction<_dart_fscanf>();

  int fseek(
    ffi.Pointer<FILE> arg0,
    int arg1,
    int arg2,
  ) {
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _fseek_ptr = _lookup<ffi.NativeFunction<_c_fseek>>('fseek');
  late final _dart_fseek _fseek = _fseek_ptr.asFunction<_dart_fseek>();

  int fsetpos(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  late final _fsetpos_ptr = _lookup<ffi.NativeFunction<_c_fsetpos>>('fsetpos');
  late final _dart_fsetpos _fsetpos = _fsetpos_ptr.asFunction<_dart_fsetpos>();

  int ftell(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftell(
      arg0,
    );
  }

  late final _ftell_ptr = _lookup<ffi.NativeFunction<_c_ftell>>('ftell');
  late final _dart_ftell _ftell = _ftell_ptr.asFunction<_dart_ftell>();

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<FILE> __stream,
  ) {
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  late final _fwrite_ptr = _lookup<ffi.NativeFunction<_c_fwrite>>('fwrite');
  late final _dart_fwrite _fwrite = _fwrite_ptr.asFunction<_dart_fwrite>();

  int getc(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc(
      arg0,
    );
  }

  late final _getc_ptr = _lookup<ffi.NativeFunction<_c_getc>>('getc');
  late final _dart_getc _getc = _getc_ptr.asFunction<_dart_getc>();

  int getchar() {
    return _getchar();
  }

  late final _getchar_ptr = _lookup<ffi.NativeFunction<_c_getchar>>('getchar');
  late final _dart_getchar _getchar = _getchar_ptr.asFunction<_dart_getchar>();

  ffi.Pointer<ffi.Int8> gets(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _gets(
      arg0,
    );
  }

  late final _gets_ptr = _lookup<ffi.NativeFunction<_c_gets>>('gets');
  late final _dart_gets _gets = _gets_ptr.asFunction<_dart_gets>();

  void perror(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _perror(
      arg0,
    );
  }

  late final _perror_ptr = _lookup<ffi.NativeFunction<_c_perror>>('perror');
  late final _dart_perror _perror = _perror_ptr.asFunction<_dart_perror>();

  int printf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _printf(
      arg0,
    );
  }

  late final _printf_ptr = _lookup<ffi.NativeFunction<_c_printf>>('printf');
  late final _dart_printf _printf = _printf_ptr.asFunction<_dart_printf>();

  int putc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc(
      arg0,
      arg1,
    );
  }

  late final _putc_ptr = _lookup<ffi.NativeFunction<_c_putc>>('putc');
  late final _dart_putc _putc = _putc_ptr.asFunction<_dart_putc>();

  int putchar(
    int arg0,
  ) {
    return _putchar(
      arg0,
    );
  }

  late final _putchar_ptr = _lookup<ffi.NativeFunction<_c_putchar>>('putchar');
  late final _dart_putchar _putchar = _putchar_ptr.asFunction<_dart_putchar>();

  int puts(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _puts(
      arg0,
    );
  }

  late final _puts_ptr = _lookup<ffi.NativeFunction<_c_puts>>('puts');
  late final _dart_puts _puts = _puts_ptr.asFunction<_dart_puts>();

  int remove(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _remove(
      arg0,
    );
  }

  late final _remove_ptr = _lookup<ffi.NativeFunction<_c_remove>>('remove');
  late final _dart_remove _remove = _remove_ptr.asFunction<_dart_remove>();

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    return _rename(
      __old,
      __new,
    );
  }

  late final _rename_ptr = _lookup<ffi.NativeFunction<_c_rename>>('rename');
  late final _dart_rename _rename = _rename_ptr.asFunction<_dart_rename>();

  void rewind(
    ffi.Pointer<FILE> arg0,
  ) {
    return _rewind(
      arg0,
    );
  }

  late final _rewind_ptr = _lookup<ffi.NativeFunction<_c_rewind>>('rewind');
  late final _dart_rewind _rewind = _rewind_ptr.asFunction<_dart_rewind>();

  int scanf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _scanf(
      arg0,
    );
  }

  late final _scanf_ptr = _lookup<ffi.NativeFunction<_c_scanf>>('scanf');
  late final _dart_scanf _scanf = _scanf_ptr.asFunction<_dart_scanf>();

  void setbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _setbuf(
      arg0,
      arg1,
    );
  }

  late final _setbuf_ptr = _lookup<ffi.NativeFunction<_c_setbuf>>('setbuf');
  late final _dart_setbuf _setbuf = _setbuf_ptr.asFunction<_dart_setbuf>();

  int setvbuf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _setvbuf_ptr = _lookup<ffi.NativeFunction<_c_setvbuf>>('setvbuf');
  late final _dart_setvbuf _setvbuf = _setvbuf_ptr.asFunction<_dart_setvbuf>();

  int sprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _sprintf(
      arg0,
      arg1,
    );
  }

  late final _sprintf_ptr = _lookup<ffi.NativeFunction<_c_sprintf>>('sprintf');
  late final _dart_sprintf _sprintf = _sprintf_ptr.asFunction<_dart_sprintf>();

  int sscanf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _sscanf(
      arg0,
      arg1,
    );
  }

  late final _sscanf_ptr = _lookup<ffi.NativeFunction<_c_sscanf>>('sscanf');
  late final _dart_sscanf _sscanf = _sscanf_ptr.asFunction<_dart_sscanf>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfile_ptr = _lookup<ffi.NativeFunction<_c_tmpfile>>('tmpfile');
  late final _dart_tmpfile _tmpfile = _tmpfile_ptr.asFunction<_dart_tmpfile>();

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _tmpnam(
      arg0,
    );
  }

  late final _tmpnam_ptr = _lookup<ffi.NativeFunction<_c_tmpnam>>('tmpnam');
  late final _dart_tmpnam _tmpnam = _tmpnam_ptr.asFunction<_dart_tmpnam>();

  int ungetc(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _ungetc(
      arg0,
      arg1,
    );
  }

  late final _ungetc_ptr = _lookup<ffi.NativeFunction<_c_ungetc>>('ungetc');
  late final _dart_ungetc _ungetc = _ungetc_ptr.asFunction<_dart_ungetc>();

  int vfprintf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vfprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vfprintf>>('vfprintf');
  late final _dart_vfprintf _vfprintf =
      _vfprintf_ptr.asFunction<_dart_vfprintf>();

  int vprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vprintf(
      arg0,
      arg1,
    );
  }

  late final _vprintf_ptr = _lookup<ffi.NativeFunction<_c_vprintf>>('vprintf');
  late final _dart_vprintf _vprintf = _vprintf_ptr.asFunction<_dart_vprintf>();

  int vsprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vsprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsprintf>>('vsprintf');
  late final _dart_vsprintf _vsprintf =
      _vsprintf_ptr.asFunction<_dart_vsprintf>();

  ffi.Pointer<FILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fdopen(
      arg0,
      arg1,
    );
  }

  late final _fdopen_ptr = _lookup<ffi.NativeFunction<_c_fdopen>>('fdopen');
  late final _dart_fdopen _fdopen = _fdopen_ptr.asFunction<_dart_fdopen>();

  int fileno(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fileno(
      arg0,
    );
  }

  late final _fileno_ptr = _lookup<ffi.NativeFunction<_c_fileno>>('fileno');
  late final _dart_fileno _fileno = _fileno_ptr.asFunction<_dart_fileno>();

  int pclose(
    ffi.Pointer<FILE> arg0,
  ) {
    return _pclose(
      arg0,
    );
  }

  late final _pclose_ptr = _lookup<ffi.NativeFunction<_c_pclose>>('pclose');
  late final _dart_pclose _pclose = _pclose_ptr.asFunction<_dart_pclose>();

  ffi.Pointer<FILE> popen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _popen(
      arg0,
      arg1,
    );
  }

  late final _popen_ptr = _lookup<ffi.NativeFunction<_c_popen>>('popen');
  late final _dart_popen _popen = _popen_ptr.asFunction<_dart_popen>();

  int __srget(
    ffi.Pointer<FILE> arg0,
  ) {
    return ___srget(
      arg0,
    );
  }

  late final ___srget_ptr = _lookup<ffi.NativeFunction<_c___srget>>('__srget');
  late final _dart___srget ___srget = ___srget_ptr.asFunction<_dart___srget>();

  int __svfscanf(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final ___svfscanf_ptr =
      _lookup<ffi.NativeFunction<_c___svfscanf>>('__svfscanf');
  late final _dart___svfscanf ___svfscanf =
      ___svfscanf_ptr.asFunction<_dart___svfscanf>();

  int __swbuf(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  late final ___swbuf_ptr = _lookup<ffi.NativeFunction<_c___swbuf>>('__swbuf');
  late final _dart___swbuf ___swbuf = ___swbuf_ptr.asFunction<_dart___swbuf>();

  void flockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _flockfile(
      arg0,
    );
  }

  late final _flockfile_ptr =
      _lookup<ffi.NativeFunction<_c_flockfile>>('flockfile');
  late final _dart_flockfile _flockfile =
      _flockfile_ptr.asFunction<_dart_flockfile>();

  int ftrylockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ftrylockfile(
      arg0,
    );
  }

  late final _ftrylockfile_ptr =
      _lookup<ffi.NativeFunction<_c_ftrylockfile>>('ftrylockfile');
  late final _dart_ftrylockfile _ftrylockfile =
      _ftrylockfile_ptr.asFunction<_dart_ftrylockfile>();

  void funlockfile(
    ffi.Pointer<FILE> arg0,
  ) {
    return _funlockfile(
      arg0,
    );
  }

  late final _funlockfile_ptr =
      _lookup<ffi.NativeFunction<_c_funlockfile>>('funlockfile');
  late final _dart_funlockfile _funlockfile =
      _funlockfile_ptr.asFunction<_dart_funlockfile>();

  int getc_unlocked(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getc_unlocked(
      arg0,
    );
  }

  late final _getc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getc_unlocked>>('getc_unlocked');
  late final _dart_getc_unlocked _getc_unlocked =
      _getc_unlocked_ptr.asFunction<_dart_getc_unlocked>();

  int getchar_unlocked() {
    return _getchar_unlocked();
  }

  late final _getchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_getchar_unlocked>>('getchar_unlocked');
  late final _dart_getchar_unlocked _getchar_unlocked =
      _getchar_unlocked_ptr.asFunction<_dart_getchar_unlocked>();

  int putc_unlocked(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  late final _putc_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putc_unlocked>>('putc_unlocked');
  late final _dart_putc_unlocked _putc_unlocked =
      _putc_unlocked_ptr.asFunction<_dart_putc_unlocked>();

  int putchar_unlocked(
    int arg0,
  ) {
    return _putchar_unlocked(
      arg0,
    );
  }

  late final _putchar_unlocked_ptr =
      _lookup<ffi.NativeFunction<_c_putchar_unlocked>>('putchar_unlocked');
  late final _dart_putchar_unlocked _putchar_unlocked =
      _putchar_unlocked_ptr.asFunction<_dart_putchar_unlocked>();

  int getw(
    ffi.Pointer<FILE> arg0,
  ) {
    return _getw(
      arg0,
    );
  }

  late final _getw_ptr = _lookup<ffi.NativeFunction<_c_getw>>('getw');
  late final _dart_getw _getw = _getw_ptr.asFunction<_dart_getw>();

  int putw(
    int arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _putw(
      arg0,
      arg1,
    );
  }

  late final _putw_ptr = _lookup<ffi.NativeFunction<_c_putw>>('putw');
  late final _dart_putw _putw = _putw_ptr.asFunction<_dart_putw>();

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __prefix,
  ) {
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  late final _tempnam_ptr = _lookup<ffi.NativeFunction<_c_tempnam>>('tempnam');
  late final _dart_tempnam _tempnam = _tempnam_ptr.asFunction<_dart_tempnam>();

  int fseeko(
    ffi.Pointer<FILE> __stream,
    int __offset,
    int __whence,
  ) {
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  late final _fseeko_ptr = _lookup<ffi.NativeFunction<_c_fseeko>>('fseeko');
  late final _dart_fseeko _fseeko = _fseeko_ptr.asFunction<_dart_fseeko>();

  int ftello(
    ffi.Pointer<FILE> __stream,
  ) {
    return _ftello(
      __stream,
    );
  }

  late final _ftello_ptr = _lookup<ffi.NativeFunction<_c_ftello>>('ftello');
  late final _dart_ftello _ftello = _ftello_ptr.asFunction<_dart_ftello>();

  int snprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  late final _snprintf_ptr =
      _lookup<ffi.NativeFunction<_c_snprintf>>('snprintf');
  late final _dart_snprintf _snprintf =
      _snprintf_ptr.asFunction<_dart_snprintf>();

  int vfscanf(
    ffi.Pointer<FILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  late final _vfscanf_ptr = _lookup<ffi.NativeFunction<_c_vfscanf>>('vfscanf');
  late final _dart_vfscanf _vfscanf = _vfscanf_ptr.asFunction<_dart_vfscanf>();

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    return _vscanf(
      __format,
      arg1,
    );
  }

  late final _vscanf_ptr = _lookup<ffi.NativeFunction<_c_vscanf>>('vscanf');
  late final _dart_vscanf _vscanf = _vscanf_ptr.asFunction<_dart_vscanf>();

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  late final _vsnprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vsnprintf>>('vsnprintf');
  late final _dart_vsnprintf _vsnprintf =
      _vsnprintf_ptr.asFunction<_dart_vsnprintf>();

  int vsscanf(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  late final _vsscanf_ptr = _lookup<ffi.NativeFunction<_c_vsscanf>>('vsscanf');
  late final _dart_vsscanf _vsscanf = _vsscanf_ptr.asFunction<_dart_vsscanf>();

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _dprintf(
      arg0,
      arg1,
    );
  }

  late final _dprintf_ptr = _lookup<ffi.NativeFunction<_c_dprintf>>('dprintf');
  late final _dart_dprintf _dprintf = _dprintf_ptr.asFunction<_dart_dprintf>();

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vdprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vdprintf>>('vdprintf');
  late final _dart_vdprintf _vdprintf =
      _vdprintf_ptr.asFunction<_dart_vdprintf>();

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    int __delimiter,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  late final _getdelim_ptr =
      _lookup<ffi.NativeFunction<_c_getdelim>>('getdelim');
  late final _dart_getdelim _getdelim =
      _getdelim_ptr.asFunction<_dart_getdelim>();

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    ffi.Pointer<FILE> __stream,
  ) {
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  late final _getline_ptr = _lookup<ffi.NativeFunction<_c_getline>>('getline');
  late final _dart_getline _getline = _getline_ptr.asFunction<_dart_getline>();

  ffi.Pointer<FILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  late final _fmemopen_ptr =
      _lookup<ffi.NativeFunction<_c_fmemopen>>('fmemopen');
  late final _dart_fmemopen _fmemopen =
      _fmemopen_ptr.asFunction<_dart_fmemopen>();

  ffi.Pointer<FILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
    ffi.Pointer<ffi.Uint64> __sizep,
  ) {
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  late final _open_memstream_ptr =
      _lookup<ffi.NativeFunction<_c_open_memstream>>('open_memstream');
  late final _dart_open_memstream _open_memstream =
      _open_memstream_ptr.asFunction<_dart_open_memstream>();

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _asprintf(
      arg0,
      arg1,
    );
  }

  late final _asprintf_ptr =
      _lookup<ffi.NativeFunction<_c_asprintf>>('asprintf');
  late final _dart_asprintf _asprintf =
      _asprintf_ptr.asFunction<_dart_asprintf>();

  ffi.Pointer<ffi.Int8> ctermid_r(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    return _ctermid_r(
      arg0,
    );
  }

  late final _ctermid_r_ptr =
      _lookup<ffi.NativeFunction<_c_ctermid_r>>('ctermid_r');
  late final _dart_ctermid_r _ctermid_r =
      _ctermid_r_ptr.asFunction<_dart_ctermid_r>();

  ffi.Pointer<ffi.Int8> fgetln(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    return _fgetln(
      arg0,
      arg1,
    );
  }

  late final _fgetln_ptr = _lookup<ffi.NativeFunction<_c_fgetln>>('fgetln');
  late final _dart_fgetln _fgetln = _fgetln_ptr.asFunction<_dart_fgetln>();

  ffi.Pointer<ffi.Int8> fmtcheck(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  late final _fmtcheck_ptr =
      _lookup<ffi.NativeFunction<_c_fmtcheck>>('fmtcheck');
  late final _dart_fmtcheck _fmtcheck =
      _fmtcheck_ptr.asFunction<_dart_fmtcheck>();

  int fpurge(
    ffi.Pointer<FILE> arg0,
  ) {
    return _fpurge(
      arg0,
    );
  }

  late final _fpurge_ptr = _lookup<ffi.NativeFunction<_c_fpurge>>('fpurge');
  late final _dart_fpurge _fpurge = _fpurge_ptr.asFunction<_dart_fpurge>();

  void setbuffer(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _setbuffer_ptr =
      _lookup<ffi.NativeFunction<_c_setbuffer>>('setbuffer');
  late final _dart_setbuffer _setbuffer =
      _setbuffer_ptr.asFunction<_dart_setbuffer>();

  int setlinebuf(
    ffi.Pointer<FILE> arg0,
  ) {
    return _setlinebuf(
      arg0,
    );
  }

  late final _setlinebuf_ptr =
      _lookup<ffi.NativeFunction<_c_setlinebuf>>('setlinebuf');
  late final _dart_setlinebuf _setlinebuf =
      _setlinebuf_ptr.asFunction<_dart_setlinebuf>();

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _vasprintf_ptr =
      _lookup<ffi.NativeFunction<_c_vasprintf>>('vasprintf');
  late final _dart_vasprintf _vasprintf =
      _vasprintf_ptr.asFunction<_dart_vasprintf>();

  ffi.Pointer<FILE> zopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _zopen(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _zopen_ptr = _lookup<ffi.NativeFunction<_c_zopen>>('zopen');
  late final _dart_zopen _zopen = _zopen_ptr.asFunction<_dart_zopen>();

  ffi.Pointer<FILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_24>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_25>> arg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_26>> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_27>> arg4,
  ) {
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _funopen_ptr = _lookup<ffi.NativeFunction<_c_funopen>>('funopen');
  late final _dart_funopen _funopen = _funopen_ptr.asFunction<_dart_funopen>();

  int __sprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final ___sprintf_chk_ptr =
      _lookup<ffi.NativeFunction<_c___sprintf_chk>>('__sprintf_chk');
  late final _dart___sprintf_chk ___sprintf_chk =
      ___sprintf_chk_ptr.asFunction<_dart___sprintf_chk>();

  int __snprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___snprintf_chk_ptr =
      _lookup<ffi.NativeFunction<_c___snprintf_chk>>('__snprintf_chk');
  late final _dart___snprintf_chk ___snprintf_chk =
      ___snprintf_chk_ptr.asFunction<_dart___snprintf_chk>();

  int __vsprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final ___vsprintf_chk_ptr =
      _lookup<ffi.NativeFunction<_c___vsprintf_chk>>('__vsprintf_chk');
  late final _dart___vsprintf_chk ___vsprintf_chk =
      ___vsprintf_chk_ptr.asFunction<_dart___vsprintf_chk>();

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final ___vsnprintf_chk_ptr =
      _lookup<ffi.NativeFunction<_c___vsnprintf_chk>>('__vsnprintf_chk');
  late final _dart___vsnprintf_chk ___vsnprintf_chk =
      ___vsnprintf_chk_ptr.asFunction<_dart___vsnprintf_chk>();

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  late final _memchr_ptr = _lookup<ffi.NativeFunction<_c_memchr>>('memchr');
  late final _dart_memchr _memchr = _memchr_ptr.asFunction<_dart_memchr>();

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _memcmp_ptr = _lookup<ffi.NativeFunction<_c_memcmp>>('memcmp');
  late final _dart_memcmp _memcmp = _memcmp_ptr.asFunction<_dart_memcmp>();

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _memcpy_ptr = _lookup<ffi.NativeFunction<_c_memcpy>>('memcpy');
  late final _dart_memcpy _memcpy = _memcpy_ptr.asFunction<_dart_memcpy>();

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  late final _memmove_ptr = _lookup<ffi.NativeFunction<_c_memmove>>('memmove');
  late final _dart_memmove _memmove = _memmove_ptr.asFunction<_dart_memmove>();

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  late final _memset_ptr = _lookup<ffi.NativeFunction<_c_memset>>('memset');
  late final _dart_memset _memset = _memset_ptr.asFunction<_dart_memset>();

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcat(
      __s1,
      __s2,
    );
  }

  late final _strcat_ptr = _lookup<ffi.NativeFunction<_c_strcat>>('strcat');
  late final _dart_strcat _strcat = _strcat_ptr.asFunction<_dart_strcat>();

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strchr(
      __s,
      __c,
    );
  }

  late final _strchr_ptr = _lookup<ffi.NativeFunction<_c_strchr>>('strchr');
  late final _dart_strchr _strchr = _strchr_ptr.asFunction<_dart_strchr>();

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcmp(
      __s1,
      __s2,
    );
  }

  late final _strcmp_ptr = _lookup<ffi.NativeFunction<_c_strcmp>>('strcmp');
  late final _dart_strcmp _strcmp = _strcmp_ptr.asFunction<_dart_strcmp>();

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    return _strcoll(
      __s1,
      __s2,
    );
  }

  late final _strcoll_ptr = _lookup<ffi.NativeFunction<_c_strcoll>>('strcoll');
  late final _dart_strcoll _strcoll = _strcoll_ptr.asFunction<_dart_strcoll>();

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _strcpy(
      __dst,
      __src,
    );
  }

  late final _strcpy_ptr = _lookup<ffi.NativeFunction<_c_strcpy>>('strcpy');
  late final _dart_strcpy _strcpy = _strcpy_ptr.asFunction<_dart_strcpy>();

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strcspn(
      __s,
      __charset,
    );
  }

  late final _strcspn_ptr = _lookup<ffi.NativeFunction<_c_strcspn>>('strcspn');
  late final _dart_strcspn _strcspn = _strcspn_ptr.asFunction<_dart_strcspn>();

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    return _strerror(
      __errnum,
    );
  }

  late final _strerror_ptr =
      _lookup<ffi.NativeFunction<_c_strerror>>('strerror');
  late final _dart_strerror _strerror =
      _strerror_ptr.asFunction<_dart_strerror>();

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    return _strlen(
      __s,
    );
  }

  late final _strlen_ptr = _lookup<ffi.NativeFunction<_c_strlen>>('strlen');
  late final _dart_strlen _strlen = _strlen_ptr.asFunction<_dart_strlen>();

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncat_ptr = _lookup<ffi.NativeFunction<_c_strncat>>('strncat');
  late final _dart_strncat _strncat = _strncat_ptr.asFunction<_dart_strncat>();

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strncmp_ptr = _lookup<ffi.NativeFunction<_c_strncmp>>('strncmp');
  late final _dart_strncmp _strncmp = _strncmp_ptr.asFunction<_dart_strncmp>();

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _strncpy_ptr = _lookup<ffi.NativeFunction<_c_strncpy>>('strncpy');
  late final _dart_strncpy _strncpy = _strncpy_ptr.asFunction<_dart_strncpy>();

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strpbrk(
      __s,
      __charset,
    );
  }

  late final _strpbrk_ptr = _lookup<ffi.NativeFunction<_c_strpbrk>>('strpbrk');
  late final _dart_strpbrk _strpbrk = _strpbrk_ptr.asFunction<_dart_strpbrk>();

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    return _strrchr(
      __s,
      __c,
    );
  }

  late final _strrchr_ptr = _lookup<ffi.NativeFunction<_c_strrchr>>('strrchr');
  late final _dart_strrchr _strrchr = _strrchr_ptr.asFunction<_dart_strrchr>();

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    return _strspn(
      __s,
      __charset,
    );
  }

  late final _strspn_ptr = _lookup<ffi.NativeFunction<_c_strspn>>('strspn');
  late final _dart_strspn _strspn = _strspn_ptr.asFunction<_dart_strspn>();

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strstr(
      __big,
      __little,
    );
  }

  late final _strstr_ptr = _lookup<ffi.NativeFunction<_c_strstr>>('strstr');
  late final _dart_strstr _strstr = _strstr_ptr.asFunction<_dart_strstr>();

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    return _strtok(
      __str,
      __sep,
    );
  }

  late final _strtok_ptr = _lookup<ffi.NativeFunction<_c_strtok>>('strtok');
  late final _dart_strtok _strtok = _strtok_ptr.asFunction<_dart_strtok>();

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  late final _strxfrm_ptr = _lookup<ffi.NativeFunction<_c_strxfrm>>('strxfrm');
  late final _dart_strxfrm _strxfrm = _strxfrm_ptr.asFunction<_dart_strxfrm>();

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  late final _strtok_r_ptr =
      _lookup<ffi.NativeFunction<_c_strtok_r>>('strtok_r');
  late final _dart_strtok_r _strtok_r =
      _strtok_r_ptr.asFunction<_dart_strtok_r>();

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  late final _strerror_r_ptr =
      _lookup<ffi.NativeFunction<_c_strerror_r>>('strerror_r');
  late final _dart_strerror_r _strerror_r =
      _strerror_r_ptr.asFunction<_dart_strerror_r>();

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    return _strdup(
      __s1,
    );
  }

  late final _strdup_ptr = _lookup<ffi.NativeFunction<_c_strdup>>('strdup');
  late final _dart_strdup _strdup = _strdup_ptr.asFunction<_dart_strdup>();

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  late final _memccpy_ptr = _lookup<ffi.NativeFunction<_c_memccpy>>('memccpy');
  late final _dart_memccpy _memccpy = _memccpy_ptr.asFunction<_dart_memccpy>();

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    return _stpcpy(
      __dst,
      __src,
    );
  }

  late final _stpcpy_ptr = _lookup<ffi.NativeFunction<_c_stpcpy>>('stpcpy');
  late final _dart_stpcpy _stpcpy = _stpcpy_ptr.asFunction<_dart_stpcpy>();

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  late final _stpncpy_ptr = _lookup<ffi.NativeFunction<_c_stpncpy>>('stpncpy');
  late final _dart_stpncpy _stpncpy = _stpncpy_ptr.asFunction<_dart_stpncpy>();

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strndup(
      __s1,
      __n,
    );
  }

  late final _strndup_ptr = _lookup<ffi.NativeFunction<_c_strndup>>('strndup');
  late final _dart_strndup _strndup = _strndup_ptr.asFunction<_dart_strndup>();

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    return _strnlen(
      __s1,
      __n,
    );
  }

  late final _strnlen_ptr = _lookup<ffi.NativeFunction<_c_strnlen>>('strnlen');
  late final _dart_strnlen _strnlen = _strnlen_ptr.asFunction<_dart_strnlen>();

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    return _strsignal(
      __sig,
    );
  }

  late final _strsignal_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal>>('strsignal');
  late final _dart_strsignal _strsignal =
      _strsignal_ptr.asFunction<_dart_strsignal>();

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  late final _memset_s_ptr =
      _lookup<ffi.NativeFunction<_c_memset_s>>('memset_s');
  late final _dart_memset_s _memset_s =
      _memset_s_ptr.asFunction<_dart_memset_s>();

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  late final _memmem_ptr = _lookup<ffi.NativeFunction<_c_memmem>>('memmem');
  late final _dart_memmem _memmem = _memmem_ptr.asFunction<_dart_memmem>();

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  late final _memset_pattern4_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern4>>('memset_pattern4');
  late final _dart_memset_pattern4 _memset_pattern4 =
      _memset_pattern4_ptr.asFunction<_dart_memset_pattern4>();

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  late final _memset_pattern8_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern8>>('memset_pattern8');
  late final _dart_memset_pattern8 _memset_pattern8 =
      _memset_pattern8_ptr.asFunction<_dart_memset_pattern8>();

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  late final _memset_pattern16_ptr =
      _lookup<ffi.NativeFunction<_c_memset_pattern16>>('memset_pattern16');
  late final _dart_memset_pattern16 _memset_pattern16 =
      _memset_pattern16_ptr.asFunction<_dart_memset_pattern16>();

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    return _strcasestr(
      __big,
      __little,
    );
  }

  late final _strcasestr_ptr =
      _lookup<ffi.NativeFunction<_c_strcasestr>>('strcasestr');
  late final _dart_strcasestr _strcasestr =
      _strcasestr_ptr.asFunction<_dart_strcasestr>();

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  late final _strnstr_ptr = _lookup<ffi.NativeFunction<_c_strnstr>>('strnstr');
  late final _dart_strnstr _strnstr = _strnstr_ptr.asFunction<_dart_strnstr>();

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcat_ptr = _lookup<ffi.NativeFunction<_c_strlcat>>('strlcat');
  late final _dart_strlcat _strlcat = _strlcat_ptr.asFunction<_dart_strlcat>();

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  late final _strlcpy_ptr = _lookup<ffi.NativeFunction<_c_strlcpy>>('strlcpy');
  late final _dart_strlcpy _strlcpy = _strlcpy_ptr.asFunction<_dart_strlcpy>();

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    return _strmode(
      __mode,
      __bp,
    );
  }

  late final _strmode_ptr = _lookup<ffi.NativeFunction<_c_strmode>>('strmode');
  late final _dart_strmode _strmode = _strmode_ptr.asFunction<_dart_strmode>();

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    return _strsep(
      __stringp,
      __delim,
    );
  }

  late final _strsep_ptr = _lookup<ffi.NativeFunction<_c_strsep>>('strsep');
  late final _dart_strsep _strsep = _strsep_ptr.asFunction<_dart_strsep>();

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  late final _timingsafe_bcmp_ptr =
      _lookup<ffi.NativeFunction<_c_timingsafe_bcmp>>('timingsafe_bcmp');
  late final _dart_timingsafe_bcmp _timingsafe_bcmp =
      _timingsafe_bcmp_ptr.asFunction<_dart_timingsafe_bcmp>();

  int strsignal_r(
    int __sig,
    ffi.Pointer<ffi.Int8> __strsignalbuf,
    int __buflen,
  ) {
    return _strsignal_r(
      __sig,
      __strsignalbuf,
      __buflen,
    );
  }

  late final _strsignal_r_ptr =
      _lookup<ffi.NativeFunction<_c_strsignal_r>>('strsignal_r');
  late final _dart_strsignal_r _strsignal_r =
      _strsignal_r_ptr.asFunction<_dart_strsignal_r>();

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcmp_ptr = _lookup<ffi.NativeFunction<_c_bcmp>>('bcmp');
  late final _dart_bcmp _bcmp = _bcmp_ptr.asFunction<_dart_bcmp>();

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _bcopy_ptr = _lookup<ffi.NativeFunction<_c_bcopy>>('bcopy');
  late final _dart_bcopy _bcopy = _bcopy_ptr.asFunction<_dart_bcopy>();

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _bzero(
      arg0,
      arg1,
    );
  }

  late final _bzero_ptr = _lookup<ffi.NativeFunction<_c_bzero>>('bzero');
  late final _dart_bzero _bzero = _bzero_ptr.asFunction<_dart_bzero>();

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _index(
      arg0,
      arg1,
    );
  }

  late final _index_ptr = _lookup<ffi.NativeFunction<_c_index>>('index');
  late final _dart_index _index = _index_ptr.asFunction<_dart_index>();

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    return _rindex(
      arg0,
      arg1,
    );
  }

  late final _rindex_ptr = _lookup<ffi.NativeFunction<_c_rindex>>('rindex');
  late final _dart_rindex _rindex = _rindex_ptr.asFunction<_dart_rindex>();

  int ffs(
    int arg0,
  ) {
    return _ffs(
      arg0,
    );
  }

  late final _ffs_ptr = _lookup<ffi.NativeFunction<_c_ffs>>('ffs');
  late final _dart_ffs _ffs = _ffs_ptr.asFunction<_dart_ffs>();

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  late final _strcasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strcasecmp>>('strcasecmp');
  late final _dart_strcasecmp _strcasecmp =
      _strcasecmp_ptr.asFunction<_dart_strcasecmp>();

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _strncasecmp_ptr =
      _lookup<ffi.NativeFunction<_c_strncasecmp>>('strncasecmp');
  late final _dart_strncasecmp _strncasecmp =
      _strncasecmp_ptr.asFunction<_dart_strncasecmp>();

  int ffsl(
    int arg0,
  ) {
    return _ffsl(
      arg0,
    );
  }

  late final _ffsl_ptr = _lookup<ffi.NativeFunction<_c_ffsl>>('ffsl');
  late final _dart_ffsl _ffsl = _ffsl_ptr.asFunction<_dart_ffsl>();

  int ffsll(
    int arg0,
  ) {
    return _ffsll(
      arg0,
    );
  }

  late final _ffsll_ptr = _lookup<ffi.NativeFunction<_c_ffsll>>('ffsll');
  late final _dart_ffsll _ffsll = _ffsll_ptr.asFunction<_dart_ffsll>();

  int fls(
    int arg0,
  ) {
    return _fls(
      arg0,
    );
  }

  late final _fls_ptr = _lookup<ffi.NativeFunction<_c_fls>>('fls');
  late final _dart_fls _fls = _fls_ptr.asFunction<_dart_fls>();

  int flsl(
    int arg0,
  ) {
    return _flsl(
      arg0,
    );
  }

  late final _flsl_ptr = _lookup<ffi.NativeFunction<_c_flsl>>('flsl');
  late final _dart_flsl _flsl = _flsl_ptr.asFunction<_dart_flsl>();

  int flsll(
    int arg0,
  ) {
    return _flsll(
      arg0,
    );
  }

  late final _flsll_ptr = _lookup<ffi.NativeFunction<_c_flsll>>('flsll');
  late final _dart_flsll _flsll = _flsll_ptr.asFunction<_dart_flsll>();
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Opaque {}

class _opaque_pthread_cond_t extends ffi.Opaque {}

class _opaque_pthread_condattr_t extends ffi.Opaque {}

class _opaque_pthread_mutex_t extends ffi.Opaque {}

class _opaque_pthread_mutexattr_t extends ffi.Opaque {}

class _opaque_pthread_once_t extends ffi.Opaque {}

class _opaque_pthread_rwlock_t extends ffi.Opaque {}

class _opaque_pthread_rwlockattr_t extends ffi.Opaque {}

class _opaque_pthread_t extends ffi.Opaque {}

class winsize extends ffi.Struct {
  @ffi.Uint16()
  external int ws_row;

  @ffi.Uint16()
  external int ws_col;

  @ffi.Uint16()
  external int ws_xpixel;

  @ffi.Uint16()
  external int ws_ypixel;
}

class ttysize extends ffi.Struct {
  @ffi.Uint16()
  external int ts_lines;

  @ffi.Uint16()
  external int ts_cols;

  @ffi.Uint16()
  external int ts_xxx;

  @ffi.Uint16()
  external int ts_yyy;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  external int __eax;

  @ffi.Uint32()
  external int __ebx;

  @ffi.Uint32()
  external int __ecx;

  @ffi.Uint32()
  external int __edx;

  @ffi.Uint32()
  external int __edi;

  @ffi.Uint32()
  external int __esi;

  @ffi.Uint32()
  external int __ebp;

  @ffi.Uint32()
  external int __esp;

  @ffi.Uint32()
  external int __ss;

  @ffi.Uint32()
  external int __eflags;

  @ffi.Uint32()
  external int __eip;

  @ffi.Uint32()
  external int __cs;

  @ffi.Uint32()
  external int __ds;

  @ffi.Uint32()
  external int __es;

  @ffi.Uint32()
  external int __fs;

  @ffi.Uint32()
  external int __gs;
}

class __darwin_fp_control extends ffi.Opaque {}

class __darwin_fp_status extends ffi.Opaque {}

class __darwin_mmst_reg extends ffi.Opaque {}

class __darwin_xmm_reg extends ffi.Opaque {}

class __darwin_ymm_reg extends ffi.Opaque {}

class __darwin_zmm_reg extends ffi.Opaque {}

class __darwin_opmask_reg extends ffi.Opaque {}

class __darwin_i386_float_state extends ffi.Opaque {}

class __darwin_i386_avx_state extends ffi.Opaque {}

class __darwin_i386_avx512_state extends ffi.Opaque {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint32()
  external int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  external int __dr0;

  @ffi.Uint32()
  external int __dr1;

  @ffi.Uint32()
  external int __dr2;

  @ffi.Uint32()
  external int __dr3;

  @ffi.Uint32()
  external int __dr4;

  @ffi.Uint32()
  external int __dr5;

  @ffi.Uint32()
  external int __dr6;

  @ffi.Uint32()
  external int __dr7;
}

class __x86_instruction_state extends ffi.Opaque {}

class __last_branch_record extends ffi.Opaque {}

class __last_branch_state extends ffi.Opaque {}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  external int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __rax;

  @ffi.Uint64()
  external int __rbx;

  @ffi.Uint64()
  external int __rcx;

  @ffi.Uint64()
  external int __rdx;

  @ffi.Uint64()
  external int __rdi;

  @ffi.Uint64()
  external int __rsi;

  @ffi.Uint64()
  external int __rbp;

  @ffi.Uint64()
  external int __rsp;

  @ffi.Uint64()
  external int __r8;

  @ffi.Uint64()
  external int __r9;

  @ffi.Uint64()
  external int __r10;

  @ffi.Uint64()
  external int __r11;

  @ffi.Uint64()
  external int __r12;

  @ffi.Uint64()
  external int __r13;

  @ffi.Uint64()
  external int __r14;

  @ffi.Uint64()
  external int __r15;

  @ffi.Uint64()
  external int __rip;

  @ffi.Uint64()
  external int __rflags;

  @ffi.Uint64()
  external int __cs;

  @ffi.Uint64()
  external int __fs;

  @ffi.Uint64()
  external int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @ffi.Uint64()
  external int __ds;

  @ffi.Uint64()
  external int __es;

  @ffi.Uint64()
  external int __ss;

  @ffi.Uint64()
  external int __gsbase;
}

class __darwin_x86_float_state64 extends ffi.Opaque {}

class __darwin_x86_avx_state64 extends ffi.Opaque {}

class __darwin_x86_avx512_state64 extends ffi.Opaque {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint64()
  external int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __dr0;

  @ffi.Uint64()
  external int __dr1;

  @ffi.Uint64()
  external int __dr2;

  @ffi.Uint64()
  external int __dr3;

  @ffi.Uint64()
  external int __dr4;

  @ffi.Uint64()
  external int __dr5;

  @ffi.Uint64()
  external int __dr6;

  @ffi.Uint64()
  external int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Opaque {}

class __darwin_mcontext32 extends ffi.Opaque {}

class __darwin_mcontext_avx32 extends ffi.Opaque {}

class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_mcontext64_full extends ffi.Opaque {}

class __darwin_mcontext_avx64 extends ffi.Opaque {}

class __darwin_mcontext_avx64_full extends ffi.Opaque {}

class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  external int ss_size;

  @ffi.Int32()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int32()
  external int uc_onstack;

  @ffi.Uint32()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @ffi.Uint64()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

class sigevent extends ffi.Opaque {}

class siginfo_t extends ffi.Opaque {}

class __sigaction extends ffi.Opaque {}

class sigaction extends ffi.Opaque {}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_3>> sv_handler;

  @ffi.Int32()
  external int sv_mask;

  @ffi.Int32()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Int64()
  external int ru_maxrss;

  @ffi.Int64()
  external int ru_ixrss;

  @ffi.Int64()
  external int ru_idrss;

  @ffi.Int64()
  external int ru_isrss;

  @ffi.Int64()
  external int ru_minflt;

  @ffi.Int64()
  external int ru_majflt;

  @ffi.Int64()
  external int ru_nswap;

  @ffi.Int64()
  external int ru_inblock;

  @ffi.Int64()
  external int ru_oublock;

  @ffi.Int64()
  external int ru_msgsnd;

  @ffi.Int64()
  external int ru_msgrcv;

  @ffi.Int64()
  external int ru_nsignals;

  @ffi.Int64()
  external int ru_nvcsw;

  @ffi.Int64()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Opaque {}

class rusage_info_v1 extends ffi.Opaque {}

class rusage_info_v2 extends ffi.Opaque {}

class rusage_info_v3 extends ffi.Opaque {}

class rusage_info_v4 extends ffi.Opaque {}

class rusage_info_v5 extends ffi.Opaque {}

class rlimit extends ffi.Struct {
  @ffi.Uint64()
  external int rlim_cur;

  @ffi.Uint64()
  external int rlim_max;
}

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class accessx_descriptor extends ffi.Opaque {}

class fd_set extends ffi.Opaque {}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class fssearchblock extends ffi.Opaque {}

class searchstate extends ffi.Opaque {}

class flock extends ffi.Struct {
  @ffi.Int64()
  external int l_start;

  @ffi.Int64()
  external int l_len;

  @ffi.Int32()
  external int l_pid;

  @ffi.Int16()
  external int l_type;

  @ffi.Int16()
  external int l_whence;
}

class flocktimeout extends ffi.Struct {
  external flock fl;

  external timespec timeout;
}

class radvisory extends ffi.Struct {
  @ffi.Int64()
  external int ra_offset;

  @ffi.Int32()
  external int ra_count;
}

class fsignatures_t extends ffi.Opaque {}

class fsupplement_t extends ffi.Struct {
  @ffi.Int64()
  external int fs_file_start;

  @ffi.Int64()
  external int fs_blob_start;

  @ffi.Uint64()
  external int fs_blob_size;

  @ffi.Int32()
  external int fs_orig_fd;
}

class fchecklv_t extends ffi.Struct {
  @ffi.Int64()
  external int lv_file_start;

  @ffi.Uint64()
  external int lv_error_message_size;

  external ffi.Pointer<ffi.Void> lv_error_message;
}

class fgetsigsinfo_t extends ffi.Struct {
  @ffi.Int64()
  external int fg_file_start;

  @ffi.Int32()
  external int fg_info_request;

  @ffi.Int32()
  external int fg_sig_is_platform;
}

class fstore_t extends ffi.Struct {
  @ffi.Uint32()
  external int fst_flags;

  @ffi.Int32()
  external int fst_posmode;

  @ffi.Int64()
  external int fst_offset;

  @ffi.Int64()
  external int fst_length;

  @ffi.Int64()
  external int fst_bytesalloc;
}

class fpunchhole_t extends ffi.Struct {
  @ffi.Uint32()
  external int fp_flags;

  @ffi.Uint32()
  external int reserved;

  @ffi.Int64()
  external int fp_offset;

  @ffi.Int64()
  external int fp_length;
}

class ftrimactivefile_t extends ffi.Struct {
  @ffi.Int64()
  external int fta_offset;

  @ffi.Int64()
  external int fta_length;
}

class fspecread_t extends ffi.Struct {
  @ffi.Uint32()
  external int fsr_flags;

  @ffi.Uint32()
  external int reserved;

  @ffi.Int64()
  external int fsr_offset;

  @ffi.Int64()
  external int fsr_length;
}

class fbootstraptransfer_t extends ffi.Struct {
  @ffi.Int64()
  external int fbt_offset;

  @ffi.Uint64()
  external int fbt_length;

  external ffi.Pointer<ffi.Void> fbt_buffer;
}

class log2phys extends ffi.Struct {
  @ffi.Uint32()
  external int l2p_flags;

  @ffi.Int64()
  external int l2p_contigbytes;

  @ffi.Int64()
  external int l2p_devoffset;
}

class _filesec extends ffi.Opaque {}

abstract class filesec_property_t {
  static const int FILESEC_OWNER = 1;
  static const int FILESEC_GROUP = 2;
  static const int FILESEC_UUID = 3;
  static const int FILESEC_MODE = 4;
  static const int FILESEC_ACL = 5;
  static const int FILESEC_GRPUUID = 6;
  static const int FILESEC_ACL_RAW = 100;
  static const int FILESEC_ACL_ALLOCSIZE = 101;
}

class dirent extends ffi.Opaque {}

class _telldir extends ffi.Opaque {}

class DIR extends ffi.Opaque {}

class termios extends ffi.Struct {
  @ffi.Uint64()
  external int c_iflag; /* input mode flags */
  @ffi.Uint64()
  external int c_oflag; /* output mode flags */
  @ffi.Uint64()
  external int c_cflag; /* control mode flags */
  @ffi.Uint64()
  external int c_lflag; /* local mode flags */

  @ffi.Uint8()
  external int c_line; /* line discipline */

  @ffi.Int8()
  external int c_cc_0;
  @ffi.Int8()
  external int c_cc_1;
  @ffi.Int8()
  external int c_cc_2;
  @ffi.Int8()
  external int c_cc_3;
  @ffi.Int8()
  external int c_cc_4;
  @ffi.Int8()
  external int c_cc_5;
  @ffi.Int8()
  external int c_cc_6;
  @ffi.Int8()
  external int c_cc_7;
  @ffi.Int8()
  external int c_cc_8;
  @ffi.Int8()
  external int c_cc_9;
  @ffi.Int8()
  external int c_cc_10;
  @ffi.Int8()
  external int c_cc_11;
  @ffi.Int8()
  external int c_cc_12;
  @ffi.Int8()
  external int c_cc_13;
  @ffi.Int8()
  external int c_cc_14;
  @ffi.Int8()
  external int c_cc_15;
  @ffi.Int8()
  external int c_cc_16;
  @ffi.Int8()
  external int c_cc_17;
  @ffi.Int8()
  external int c_cc_18;
  @ffi.Int8()
  external int c_cc_19;
  @ffi.Int8()
  external int c_cc_20;
  @ffi.Int8()
  external int c_cc_21;
  @ffi.Int8()
  external int c_cc_22;
  @ffi.Int8()
  external int c_cc_23;
  @ffi.Int8()
  external int c_cc_24;
  @ffi.Int8()
  external int c_cc_25;
  @ffi.Int8()
  external int c_cc_26;
  @ffi.Int8()
  external int c_cc_27;
  @ffi.Int8()
  external int c_cc_28;
  @ffi.Int8()
  external int c_cc_29;
  @ffi.Int8()
  external int c_cc_30;
  @ffi.Int8()
  external int c_cc_31;

  @ffi.Uint64()
  external int c_ispeed; /* input speed */
  @ffi.Uint64()
  external int c_ospeed; /* output speed */
}

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class FILE extends ffi.Opaque {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  external int gp_offset;

  @ffi.Uint32()
  external int fp_offset;

  external ffi.Pointer<ffi.Void> overflow_arg_area;

  external ffi.Pointer<ffi.Void> reg_save_area;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int IOCPARM_MASK = 8191;

const int IOCPARM_MAX = 8192;

const int IOC_VOID = 536870912;

const int IOC_OUT = 1073741824;

const int IOC_IN = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOC_DIRMASK = 3758096384;

const int TIOCMODG = 1074033667;

const int TIOCMODS = 2147775492;

const int TIOCM_LE = 1;

const int TIOCM_DTR = 2;

const int TIOCM_RTS = 4;

const int TIOCM_ST = 8;

const int TIOCM_SR = 16;

const int TIOCM_CTS = 32;

const int TIOCM_CAR = 64;

const int TIOCM_CD = 64;

const int TIOCM_RNG = 128;

const int TIOCM_RI = 128;

const int TIOCM_DSR = 256;

const int TIOCEXCL = 536900621;

const int TIOCNXCL = 536900622;

const int TIOCFLUSH = 2147775504;

const int TIOCGETA = 1078490131;

const int TIOCSETA = 2152231956;

const int TIOCSETAW = 2152231957;

const int TIOCSETAF = 2152231958;

const int TIOCGETD = 1074033690;

const int TIOCSETD = 2147775515;

const int TIOCIXON = 536900737;

const int TIOCIXOFF = 536900736;

const int TIOCSBRK = 536900731;

const int TIOCCBRK = 536900730;

const int TIOCSDTR = 536900729;

const int TIOCCDTR = 536900728;

const int TIOCGPGRP = 1074033783;

const int TIOCSPGRP = 2147775606;

const int TIOCOUTQ = 1074033779;

const int TIOCSTI = 2147578994;

const int TIOCNOTTY = 536900721;

const int TIOCPKT = 2147775600;

const int TIOCPKT_DATA = 0;

const int TIOCPKT_FLUSHREAD = 1;

const int TIOCPKT_FLUSHWRITE = 2;

const int TIOCPKT_STOP = 4;

const int TIOCPKT_START = 8;

const int TIOCPKT_NOSTOP = 16;

const int TIOCPKT_DOSTOP = 32;

const int TIOCPKT_IOCTL = 64;

const int TIOCSTOP = 536900719;

const int TIOCSTART = 536900718;

const int TIOCMSET = 2147775597;

const int TIOCMBIS = 2147775596;

const int TIOCMBIC = 2147775595;

const int TIOCMGET = 1074033770;

const int TIOCREMOTE = 2147775593;

const int TIOCGWINSZ = 1074295912;

const int TIOCSWINSZ_ANDROID = 0x5414;

const int TIOCSWINSZ = 2148037735;

const int TIOCUCNTL = 2147775590;

const int TIOCSTAT = 536900709;

const int TIOCSCONS = 536900707;

const int TIOCCONS = 2147775586;

const int TIOCSCTTY = 536900705;

const int TIOCEXT = 2147775584;

const int TIOCSIG = 536900703;

const int TIOCDRAIN = 536900702;

const int TIOCMSDTRWAIT = 2147775579;

const int TIOCMGDTRWAIT = 1074033754;

const int TIOCTIMESTAMP = 1074820185;

const int TIOCDCDTIMESTAMP = 1074820184;

const int TIOCSDRAINWAIT = 2147775575;

const int TIOCGDRAINWAIT = 1074033750;

const int TIOCDSIMICROCODE = 536900693;

const int TIOCPTYGRANT = 536900692;

const int TIOCPTYGNAME = 1082160211;

const int TIOCPTYUNLK = 536900690;

const int TTYDISC = 0;

const int TABLDISC = 3;

const int SLIPDISC = 4;

const int PPPDISC = 5;

const int TIOCGSIZE = 1074295912;

const int TIOCSSIZE = 2148037735;

const int FIOCLEX = 536897025;

const int FIONCLEX = 536897026;

const int FIONREAD = 1074030207;

const int FIONBIO = 2147772030;

const int FIOASYNC = 2147772029;

const int FIOSETOWN = 2147772028;

const int FIOGETOWN = 1074030203;

const int FIODTYPE = 1074030202;

const int SIOCSHIWAT = 2147775232;

const int SIOCGHIWAT = 1074033409;

const int SIOCSLOWAT = 2147775234;

const int SIOCGLOWAT = 1074033411;

const int SIOCATMARK = 1074033415;

const int SIOCSPGRP = 2147775240;

const int SIOCGPGRP = 1074033417;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_14_6 = 101406;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __MAC_10_16 = 101600;

const int __MAC_11_0 = 110000;

const int __MAC_11_1 = 110100;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_12_4 = 120400;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __IPHONE_13_7 = 130700;

const int __IPHONE_14_0 = 140000;

const int __IPHONE_14_1 = 140100;

const int __IPHONE_14_2 = 140200;

const int __IPHONE_14_3 = 140300;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_12_4 = 120400;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __TVOS_14_0 = 140000;

const int __TVOS_14_1 = 140100;

const int __TVOS_14_2 = 140200;

const int __TVOS_14_3 = 140300;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_5_3 = 50300;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __WATCHOS_7_0 = 70000;

const int __WATCHOS_7_1 = 70100;

const int __WATCHOS_7_2 = 70200;

const int MAC_OS_X_VERSION_10_0 = 1000;

const int MAC_OS_X_VERSION_10_1 = 1010;

const int MAC_OS_X_VERSION_10_2 = 1020;

const int MAC_OS_X_VERSION_10_3 = 1030;

const int MAC_OS_X_VERSION_10_4 = 1040;

const int MAC_OS_X_VERSION_10_5 = 1050;

const int MAC_OS_X_VERSION_10_6 = 1060;

const int MAC_OS_X_VERSION_10_7 = 1070;

const int MAC_OS_X_VERSION_10_8 = 1080;

const int MAC_OS_X_VERSION_10_9 = 1090;

const int MAC_OS_X_VERSION_10_10 = 101000;

const int MAC_OS_X_VERSION_10_10_2 = 101002;

const int MAC_OS_X_VERSION_10_10_3 = 101003;

const int MAC_OS_X_VERSION_10_11 = 101100;

const int MAC_OS_X_VERSION_10_11_2 = 101102;

const int MAC_OS_X_VERSION_10_11_3 = 101103;

const int MAC_OS_X_VERSION_10_11_4 = 101104;

const int MAC_OS_X_VERSION_10_12 = 101200;

const int MAC_OS_X_VERSION_10_12_1 = 101201;

const int MAC_OS_X_VERSION_10_12_2 = 101202;

const int MAC_OS_X_VERSION_10_12_4 = 101204;

const int MAC_OS_X_VERSION_10_13 = 101300;

const int MAC_OS_X_VERSION_10_13_1 = 101301;

const int MAC_OS_X_VERSION_10_13_2 = 101302;

const int MAC_OS_X_VERSION_10_13_4 = 101304;

const int MAC_OS_X_VERSION_10_14 = 101400;

const int MAC_OS_X_VERSION_10_14_1 = 101401;

const int MAC_OS_X_VERSION_10_14_4 = 101404;

const int MAC_OS_X_VERSION_10_14_6 = 101406;

const int MAC_OS_X_VERSION_10_15 = 101500;

const int MAC_OS_X_VERSION_10_15_1 = 101501;

const int MAC_OS_X_VERSION_10_16 = 101600;

const int MAC_OS_VERSION_11_0 = 110000;

const int __DRIVERKIT_19_0 = 190000;

const int __DRIVERKIT_20_0 = 200000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 110000;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 110100;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int _X86_INSTRUCTION_STATE_MAX_INSN_BYTES = 2380;

const int _X86_INSTRUCTION_STATE_CACHELINE_SIZE = 64;

const int __LASTBRANCH_MAX = 32;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_V5 = 5;

const int RUSAGE_INFO_CURRENT = 5;

const int RU_PROC_RUNS_RESLIDE = 1;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_TYPE_VFS_TRIGGER_RESOLVE = 5;

const int IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = 6;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = 0;

const int IOPOL_VFS_TRIGGER_RESOLVE_OFF = 1;

const int IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = 0;

const int IOPOL_VFS_CONTENT_PROTECTION_IGNORE = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int NULL = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = -1;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;
const int O_NONBLOCK_ANDROID = 04000;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_NOFOLLOW_ANY = 536870912;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int F_ADDFILESIGS_INFO = 103;

const int F_ADDFILESUPPL = 104;

const int F_GETSIGSINFO = 105;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_FSIGNATURES_CDHASH_LEN = 20;

const int GETSIGSINFO_PLATFORM_BINARY = 1;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

const int __DARWIN_MAXNAMLEN = 255;

const int __DARWIN_MAXPATHLEN = 1024;

const int MAXNAMLEN = 255;

const int DT_UNKNOWN = 0;

const int DT_FIFO = 1;

const int DT_CHR = 2;

const int DT_DIR = 4;

const int DT_BLK = 6;

const int DT_REG = 8;

const int DT_LNK = 10;

const int DT_SOCK = 12;

const int DT_WHT = 14;

const int DIRBLKSIZ = 1024;

const int DTF_HIDEW = 1;

const int DTF_NODUP = 2;

const int DTF_REWIND = 4;

const int __DTF_READALL = 8;

const int __DTF_SKIPREAD = 16;

const int __DTF_ATEND = 32;

const int VEOF = 0;

const int VEOL = 1;

const int VEOL2 = 2;

const int VERASE = 3;

const int VWERASE = 4;

const int VKILL = 5;

const int VREPRINT = 6;

const int VINTR = 8;

const int VQUIT = 9;

const int VSUSP = 10;

const int VDSUSP = 11;

const int VSTART = 12;

const int VSTOP = 13;

const int VLNEXT = 14;

const int VDISCARD = 15;

const int VMIN = 16;

const int VTIME = 17;

const int VSTATUS = 18;

const int NCCS = 20;

const int IGNBRK = 1;

const int BRKINT = 2;

const int IGNPAR = 4;

const int PARMRK = 8;

const int INPCK = 16;

const int ISTRIP = 32;

const int INLCR = 64;

const int IGNCR = 128;

const int ICRNL = 256;

const int IXON = 512;

const int IXOFF = 1024;

const int IXANY = 2048;

const int IMAXBEL = 8192;

const int IUTF8 = 16384;

const int OPOST = 1;

const int ONLCR = 2;

const int OXTABS = 4;

const int ONOEOT = 8;

const int OCRNL = 16;

const int ONOCR = 32;

const int ONLRET = 64;

const int OFILL = 128;

const int NLDLY = 768;

const int TABDLY = 3076;

const int CRDLY = 12288;

const int FFDLY = 16384;

const int BSDLY = 32768;

const int VTDLY = 65536;

const int OFDEL = 131072;

const int NL0 = 0;

const int NL1 = 256;

const int NL2 = 512;

const int NL3 = 768;

const int TAB0 = 0;

const int TAB1 = 1024;

const int TAB2 = 2048;

const int TAB3 = 4;

const int CR0 = 0;

const int CR1 = 4096;

const int CR2 = 8192;

const int CR3 = 12288;

const int FF0 = 0;

const int FF1 = 16384;

const int BS0 = 0;

const int BS1 = 32768;

const int VT0 = 0;

const int VT1 = 65536;

const int CIGNORE = 1;

const int CSIZE = 768;

const int CS5 = 0;

const int CS6 = 256;

const int CS7 = 512;

const int CS8 = 768;

const int CSTOPB = 1024;

const int CREAD = 2048;

const int PARENB = 4096;

const int PARODD = 8192;

const int HUPCL = 16384;

const int CLOCAL = 32768;

const int CCTS_OFLOW = 65536;

const int CRTSCTS = 196608;

const int CRTS_IFLOW = 131072;

const int CDTR_IFLOW = 262144;

const int CDSR_OFLOW = 524288;

const int CCAR_OFLOW = 1048576;

const int MDMBUF = 1048576;

const int ECHOKE = 1;

const int ECHOE = 2;

const int ECHOK = 4;

const int ECHO = 8;

const int ECHONL = 16;

const int ECHOPRT = 32;

const int ECHOCTL = 64;

const int ISIG = 128;

const int ICANON = 256;

const int ALTWERASE = 512;

const int IEXTEN = 1024;

const int EXTPROC = 2048;

const int TOSTOP = 4194304;

const int FLUSHO = 8388608;

const int NOKERNINFO = 33554432;

const int PENDIN = 536870912;

const int NOFLSH = 2147483648;

const int TCSANOW = 0;

const int TCSADRAIN = 1;

const int TCSAFLUSH = 2;

const int TCSASOFT = 16;

const int B0 = 0;

const int B50 = 50;

const int B75 = 75;

const int B110 = 110;

const int B134 = 134;

const int B150 = 150;

const int B200 = 200;

const int B300 = 300;

const int B600 = 600;

const int B1200 = 1200;

const int B1800 = 1800;

const int B2400 = 2400;

const int B4800 = 4800;

const int B9600 = 9600;

const int B19200 = 19200;

const int B38400 = 38400;

const int B7200 = 7200;

const int B14400 = 14400;

const int B28800 = 28800;

const int B57600 = 57600;

const int B76800 = 76800;

const int B115200 = 115200;

const int B230400 = 230400;

const int EXTA = 19200;

const int EXTB = 38400;

const int TCIFLUSH = 1;

const int TCOFLUSH = 2;

const int TCIOFLUSH = 3;

const int TCOOFF = 1;

const int TCOON = 2;

const int TCIOFF = 3;

const int TCION = 4;

const int TTYDEF_IFLAG = 11010;

const int TTYDEF_OFLAG = 3;

const int TTYDEF_LFLAG = 1483;

const int TTYDEF_CFLAG = 19200;

const int TTYDEF_SPEED = 9600;

const int CEOF = 4;

const int CEOL = 255;

const int CERASE = 127;

const int CINTR = 3;

const int CSTATUS = 20;

const int CKILL = 21;

const int CMIN = 1;

const int CQUIT = 28;

const int CSUSP = 26;

const int CTIME = 0;

const int CDSUSP = 25;

const int CSTART = 17;

const int CSTOP = 19;

const int CLNEXT = 22;

const int CDISCARD = 15;

const int CWERASE = 23;

const int CREPRINT = 18;

const int CEOT = 4;

const int CBRK = 255;

const int CRPRNT = 18;

const int CFLUSH = 15;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int L_ctermid = 1024;

typedef _c_ioctl = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<winsize> arg3,
);

typedef _dart_ioctl = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<winsize> arg3,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_5 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _dart_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_4>> Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_5>> arg1,
);

typedef _c_getpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_getpriority = int Function(
  int arg0,
  int arg1,
);

typedef _c_getiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_getiopolicy_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_getrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_getrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_getrusage = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _dart_getrusage = int Function(
  int arg0,
  ffi.Pointer<rusage> arg1,
);

typedef _c_setpriority = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setpriority = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setiopolicy_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
);

typedef _dart_setiopolicy_np = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_setrlimit = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _dart_setrlimit = int Function(
  int arg0,
  ffi.Pointer<rlimit> arg1,
);

typedef _c_wait = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_wait = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_waitpid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
);

typedef _dart_waitpid = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_waitid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Pointer<siginfo_t> arg2,
  ffi.Int32 arg3,
);

typedef _dart_waitid = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<siginfo_t> arg2,
  int arg3,
);

typedef _c_wait3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _dart_wait3 = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
  ffi.Pointer<rusage> arg2,
);

typedef _c_wait4 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _dart_wait4 = int Function(
  int arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
  ffi.Pointer<rusage> arg3,
);

typedef _c_alloca = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_alloca = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __size,
);

typedef _dart_malloc = ffi.Pointer<ffi.Void> Function(
  int __size,
);

typedef _c_calloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __count,
  ffi.Uint64 __size,
);

typedef _dart_calloc = ffi.Pointer<ffi.Void> Function(
  int __count,
  int __size,
);

typedef _c_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_free = void Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_realloc = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_aligned_alloc = ffi.Pointer<ffi.Void> Function(
  int __alignment,
  int __size,
);

typedef _c_posix_memalign = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  ffi.Uint64 __alignment,
  ffi.Uint64 __size,
);

typedef _dart_posix_memalign = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>> __memptr,
  int __alignment,
  int __size,
);

typedef _c_abort = ffi.Void Function();

typedef _dart_abort = void Function();

typedef _c_abs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_abs = int Function(
  int arg0,
);

typedef _typedefC_6 = ffi.Void Function();

typedef _c_atexit = ffi.Int32 Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _dart_atexit = int Function(
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg0,
);

typedef _c_atof = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoi = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoi = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atol = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_atoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_atoll = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _dart_bsearch = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __key,
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_7>> __compar,
);

typedef _c_div = div_t Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_div = div_t Function(
  int arg0,
  int arg1,
);

typedef _c_exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart_exit = void Function(
  int arg0,
);

typedef _c_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getenv = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_labs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_labs = int Function(
  int arg0,
);

typedef _c_ldiv = ldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_ldiv = ldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_llabs = ffi.Int64 Function(
  ffi.Int64 arg0,
);

typedef _dart_llabs = int Function(
  int arg0,
);

typedef _c_lldiv = lldiv_t Function(
  ffi.Int64 arg0,
  ffi.Int64 arg1,
);

typedef _dart_lldiv = lldiv_t Function(
  int arg0,
  int arg1,
);

typedef _c_mblen = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Uint64 __n,
);

typedef _dart_mblen = int Function(
  ffi.Pointer<ffi.Int8> __s,
  int __n,
);

typedef _c_mbstowcs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbstowcs = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_mbtowc = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_mbtowc = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_8 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _dart_qsort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_8>> __compar,
);

typedef _c_rand = ffi.Int32 Function();

typedef _dart_rand = int Function();

typedef _c_srand = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srand = void Function(
  int arg0,
);

typedef _c_strtod = ffi.Double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtod = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtof = ffi.Float Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_strtof = double Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_strtol = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtol = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoll = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoll = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoul = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoul = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtoull = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoull = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_system = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_system = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_wcstombs = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_wcstombs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int32> arg1,
  int arg2,
);

typedef _c_wctomb = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_wctomb = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__Exit = void Function(
  int arg0,
);

typedef _c_a64l = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_a64l = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_drand48 = ffi.Double Function();

typedef _dart_drand48 = double Function();

typedef _c_ecvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_ecvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_erand48 = ffi.Double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_erand48 = double Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_fcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_fcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gcvt = ffi.Pointer<ffi.Int8> Function(
  ffi.Double arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_gcvt = ffi.Pointer<ffi.Int8> Function(
  double arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_grantpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_grantpt = int Function(
  int arg0,
);

typedef _c_initstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_initstate = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_jrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_jrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_l64a = ffi.Pointer<ffi.Int8> Function(
  ffi.Int64 arg0,
);

typedef _dart_l64a = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_lcong48 = ffi.Void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_lcong48 = void Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_lrand48 = ffi.Int64 Function();

typedef _dart_lrand48 = int Function();

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mrand48 = ffi.Int64 Function();

typedef _dart_mrand48 = int Function();

typedef _c_nrand48 = ffi.Int64 Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_nrand48 = int Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_posix_openpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_posix_openpt = int Function(
  int arg0,
);

typedef _c_ptsname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ptsname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ptsname_r = ffi.Int32 Function(
  ffi.Int32 fildes,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 buflen,
);

typedef _dart_ptsname_r = int Function(
  int fildes,
  ffi.Pointer<ffi.Int8> buffer,
  int buflen,
);

typedef _c_putenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_putenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_random = ffi.Int64 Function();

typedef _dart_random = int Function();

typedef _c_rand_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_rand_r = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_realpath = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _dart_seed48 = ffi.Pointer<ffi.Uint16> Function(
  ffi.Pointer<ffi.Uint16> arg0,
);

typedef _c_setenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  ffi.Int32 __overwrite,
);

typedef _dart_setenv = int Function(
  ffi.Pointer<ffi.Int8> __name,
  ffi.Pointer<ffi.Int8> __value,
  int __overwrite,
);

typedef _c_setkey = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setkey = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setstate = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_srand48 = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_srand48 = void Function(
  int arg0,
);

typedef _c_srandom = ffi.Void Function(
  ffi.Uint32 arg0,
);

typedef _dart_srandom = void Function(
  int arg0,
);

typedef _c_unlockpt = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_unlockpt = int Function(
  int arg0,
);

typedef _c_unsetenv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unsetenv = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_arc4random = ffi.Uint32 Function();

typedef _dart_arc4random = int Function();

typedef _c_arc4random_addrandom = ffi.Void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_arc4random_addrandom = void Function(
  ffi.Pointer<ffi.Uint8> arg0,
  int arg1,
);

typedef _c_arc4random_buf = ffi.Void Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbytes,
);

typedef _dart_arc4random_buf = void Function(
  ffi.Pointer<ffi.Void> __buf,
  int __nbytes,
);

typedef _c_arc4random_stir = ffi.Void Function();

typedef _dart_arc4random_stir = void Function();

typedef _c_arc4random_uniform = ffi.Uint32 Function(
  ffi.Uint32 __upper_bound,
);

typedef _dart_arc4random_uniform = int Function(
  int __upper_bound,
);

typedef _c_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_cgetcap = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_cgetclose = ffi.Int32 Function();

typedef _dart_cgetclose = int Function();

typedef _c_cgetent = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_cgetent = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_cgetfirst = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetfirst = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_cgetmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_cgetnext = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _dart_cgetnext = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
);

typedef _c_cgetnum = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _dart_cgetnum = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int64> arg2,
);

typedef _c_cgetset = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_cgetset = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_cgetstr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetstr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_cgetustr = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_cgetustr = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_daemon = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_daemon = int Function(
  int arg0,
  int arg1,
);

typedef _c_devname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
);

typedef _dart_devname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
);

typedef _c_devname_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
  ffi.Uint16 arg1,
  ffi.Pointer<ffi.Int8> buf,
  ffi.Int32 len,
);

typedef _dart_devname_r = ffi.Pointer<ffi.Int8> Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> buf,
  int len,
);

typedef _c_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_getbsize = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_getloadavg = ffi.Int32 Function(
  ffi.Pointer<ffi.Double> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getloadavg = int Function(
  ffi.Pointer<ffi.Double> arg0,
  int arg1,
);

typedef _c_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getprogname = ffi.Pointer<ffi.Int8> Function();

typedef _c_setprogname = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setprogname = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_heapsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _dart_heapsort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_9>> __compar,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_mergesort = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _dart_mergesort = int Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> __compar,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _dart_psort = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> __compar,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_psort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _dart_psort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> __compar,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_qsort_r = ffi.Void Function(
  ffi.Pointer<ffi.Void> __base,
  ffi.Uint64 __nel,
  ffi.Uint64 __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _dart_qsort_r = void Function(
  ffi.Pointer<ffi.Void> __base,
  int __nel,
  int __width,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> __compar,
);

typedef _c_radixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_radixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_rpmatch = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rpmatch = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_sradixsort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  ffi.Int32 __nel,
  ffi.Pointer<ffi.Uint8> __table,
  ffi.Uint32 __endbyte,
);

typedef _dart_sradixsort = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>> __base,
  int __nel,
  ffi.Pointer<ffi.Uint8> __table,
  int __endbyte,
);

typedef _c_sranddev = ffi.Void Function();

typedef _dart_sranddev = void Function();

typedef _c_srandomdev = ffi.Void Function();

typedef _dart_srandomdev = void Function();

typedef _c_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
);

typedef _dart_reallocf = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
);

typedef _c_strtonum = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __numstr,
  ffi.Int64 __minval,
  ffi.Int64 __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _dart_strtonum = int Function(
  ffi.Pointer<ffi.Int8> __numstr,
  int __minval,
  int __maxval,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __errstrp,
);

typedef _c_strtoq = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtoq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_strtouq = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  ffi.Int32 __base,
);

typedef _dart_strtouq = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __endptr,
  int __base,
);

typedef _c_getattrlistbulk = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_getattrlistbulk = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_getattrlistat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Uint64 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_getattrlistat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  int arg4,
  int arg5,
);

typedef _c_setattrlistat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Uint64 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_setattrlistat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  int arg4,
  int arg5,
);

typedef _c_faccessat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_faccessat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_fchownat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_fchownat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_linkat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
);

typedef _dart_linkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_readlinkat = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_readlinkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c_symlinkat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_symlinkat = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_unlinkat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_unlinkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__exit = void Function(
  int arg0,
);

typedef _c_access = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_access = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_alarm = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_alarm = int Function(
  int arg0,
);

typedef _c_chdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_chdir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_chown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_chown = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_close = int Function(
  int arg0,
);

typedef _c_dup = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_dup = int Function(
  int arg0,
);

typedef _c_dup2 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_dup2 = int Function(
  int arg0,
  int arg1,
);

typedef _c_execl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execlp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execve = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_execvp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_fork = ffi.Int32 Function();

typedef _dart_fork = int Function();

typedef _c_fpathconf = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_fpathconf = int Function(
  int arg0,
  int arg1,
);

typedef _c_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_getegid = ffi.Uint32 Function();

typedef _dart_getegid = int Function();

typedef _c_geteuid = ffi.Uint32 Function();

typedef _dart_geteuid = int Function();

typedef _c_getgid = ffi.Uint32 Function();

typedef _dart_getgid = int Function();

typedef _c_getgroups = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_getgroups = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _c_getpgrp = ffi.Int32 Function();

typedef _dart_getpgrp = int Function();

typedef _c_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef _c_getppid = ffi.Int32 Function();

typedef _dart_getppid = int Function();

typedef _c_getuid = ffi.Uint32 Function();

typedef _dart_getuid = int Function();

typedef _c_isatty = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isatty = int Function(
  int arg0,
);

typedef _c_link = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_link = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_lseek = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_lseek = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_pathconf = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pathconf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_pause = ffi.Int32 Function();

typedef _dart_pause = int Function();

typedef _c_pipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_pipe = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_read = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_rmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rmdir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setgid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setgid = int Function(
  int arg0,
);

typedef _c_setpgid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_setpgid = int Function(
  int arg0,
  int arg1,
);

typedef _c_setsid = ffi.Int32 Function();

typedef _dart_setsid = int Function();

typedef _c_setuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setuid = int Function(
  int arg0,
);

typedef _c_sleep = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_sleep = int Function(
  int arg0,
);

typedef _c_sysconf = ffi.Int64 Function(
  ffi.Int32 arg0,
);

typedef _dart_sysconf = int Function(
  int arg0,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcgetpgrp = int Function(
  int arg0,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcsetpgrp = int Function(
  int arg0,
  int arg1,
);

typedef _c_ttyname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ttyname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ttyname_r = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_ttyname_r = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
);

typedef _c_confstr = ffi.Uint64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_confstr = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_getopt = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_getopt = int Function(
  int arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_brk = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_brk = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_chroot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_chroot = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_encrypt = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_encrypt = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fchdir = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fchdir = int Function(
  int arg0,
);

typedef _c_gethostid = ffi.Int64 Function();

typedef _dart_gethostid = int Function();

typedef _c_getpgid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_getpgid = int Function(
  int arg0,
);

typedef _c_getsid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_getsid = int Function(
  int arg0,
);

typedef _c_getdtablesize = ffi.Int32 Function();

typedef _dart_getdtablesize = int Function();

typedef _c_getpagesize = ffi.Int32 Function();

typedef _dart_getpagesize = int Function();

typedef _c_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_lchown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_lchown = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_lockf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int64 arg2,
);

typedef _dart_lockf = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_nice = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_nice = int Function(
  int arg0,
);

typedef _c_pread = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
  ffi.Int64 __offset,
);

typedef _dart_pread = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
  int __offset,
);

typedef _c_pwrite = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
  ffi.Int64 __offset,
);

typedef _dart_pwrite = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
  int __offset,
);

typedef _c_sbrk = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 arg0,
);

typedef _dart_sbrk = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_setpgrp = ffi.Int32 Function();

typedef _dart_setpgrp = int Function();

typedef _c_setregid = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_setregid = int Function(
  int arg0,
  int arg1,
);

typedef _c_setreuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_setreuid = int Function(
  int arg0,
  int arg1,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int64 arg2,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_sync_1 = ffi.Void Function();

typedef _dart_sync_1 = void Function();

typedef _c_truncate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
);

typedef _dart_truncate = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ualarm = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_ualarm = int Function(
  int arg0,
  int arg1,
);

typedef _c_usleep = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_usleep = int Function(
  int arg0,
);

typedef _c_vfork = ffi.Int32 Function();

typedef _dart_vfork = int Function();

typedef _c_fsync = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fsync = int Function(
  int arg0,
);

typedef _c_ftruncate = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int64 arg1,
);

typedef _dart_ftruncate = int Function(
  int arg0,
  int arg1,
);

typedef _c_getlogin_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_getlogin_r = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fchown = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_fchown = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_gethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_gethostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_readlink = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_readlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_setegid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setegid = int Function(
  int arg0,
);

typedef _c_seteuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_seteuid = int Function(
  int arg0,
);

typedef _c_symlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_symlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c___darwin_check_fd_set_overflow = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int32 arg2,
);

typedef _dart___darwin_check_fd_set_overflow = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timespec> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_pselect = int Function(
  int arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timespec> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timeval> arg4,
);

typedef _dart_select = int Function(
  int arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timeval> arg4,
);

typedef _c_accessx_np = ffi.Int32 Function(
  ffi.Pointer<accessx_descriptor> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_accessx_np = int Function(
  ffi.Pointer<accessx_descriptor> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
);

typedef _c_acct = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_acct = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_add_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_add_profil = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_endusershell = ffi.Void Function();

typedef _dart_endusershell = void Function();

typedef _c_execvP = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __searchpath,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvP = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __searchpath,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_fflagstostr = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 arg0,
);

typedef _dart_fflagstostr = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_getdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getdomainname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_getgrouplist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_getgrouplist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gethostuuid = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<timespec> arg1,
);

typedef _dart_gethostuuid = int Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<timespec> arg1,
);

typedef _c_getmode = ffi.Uint16 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint16 arg1,
);

typedef _dart_getmode = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_getpeereid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_getpeereid = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_getsgroups_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_getsgroups_np = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _c_getwgroups_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_getwgroups_np = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_initgroups = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_initgroups = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_issetugid = ffi.Int32 Function();

typedef _dart_issetugid = int Function();

typedef _c_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mknod = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint16 arg1,
  ffi.Int32 arg2,
);

typedef _dart_mknod = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_mkpath_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Uint16 omode,
);

typedef _dart_mkpath_np = int Function(
  ffi.Pointer<ffi.Int8> path,
  int omode,
);

typedef _c_mkpathat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Uint16 omode,
);

typedef _dart_mkpathat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int omode,
);

typedef _c_mkstemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_mkstemps = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_mkostemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 oflags,
);

typedef _dart_mkostemp = int Function(
  ffi.Pointer<ffi.Int8> path,
  int oflags,
);

typedef _c_mkostemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
  ffi.Int32 oflags,
);

typedef _dart_mkostemps = int Function(
  ffi.Pointer<ffi.Int8> path,
  int slen,
  int oflags,
);

typedef _c_mkstemp_dprotected_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 dpclass,
  ffi.Int32 dpflags,
);

typedef _dart_mkstemp_dprotected_np = int Function(
  ffi.Pointer<ffi.Int8> path,
  int dpclass,
  int dpflags,
);

typedef _c_mkdtempat_np = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_mkdtempat_np = ffi.Pointer<ffi.Int8> Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_mkstempsat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
);

typedef _dart_mkstempsat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int slen,
);

typedef _c_mkostempsat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
  ffi.Int32 oflags,
);

typedef _dart_mkostempsat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int slen,
  int oflags,
);

typedef _c_nfssvc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_nfssvc = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_profil = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_pthread_setugid_np = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_pthread_setugid_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_pthread_getugid_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_pthread_getugid_np = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_reboot = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_reboot = int Function(
  int arg0,
);

typedef _c_revoke = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_revoke = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_rcmd = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_rcmd = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_rcmd_af = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Int32 arg6,
);

typedef _dart_rcmd_af = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  int arg6,
);

typedef _c_rresvport = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_rresvport = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_rresvport_af = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rresvport_af = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef _c_iruserok = ffi.Int32 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_iruserok = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_iruserok_sa = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart_iruserok_sa = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c_ruserok = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_ruserok = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_setdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_setdomainname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_setgroups = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_setgroups = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_sethostid = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_sethostid = void Function(
  int arg0,
);

typedef _c_sethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sethostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_setlogin = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setlogin = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setmode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setmode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setrgid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setrgid = int Function(
  int arg0,
);

typedef _c_setruid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setruid = int Function(
  int arg0,
);

typedef _c_setsgroups_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_setsgroups_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_setusershell = ffi.Void Function();

typedef _dart_setusershell = void Function();

typedef _c_setwgroups_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_setwgroups_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_strtofflags = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_strtofflags = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_swapon = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_swapon = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ttyslot = ffi.Int32 Function();

typedef _dart_ttyslot = int Function();

typedef _c_undelete = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_undelete = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_unwhiteout = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unwhiteout = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_syscall = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_syscall = int Function(
  int arg0,
);

typedef _c_fgetattrlist = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_fgetattrlist = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_fsetattrlist = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_fsetattrlist = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_getattrlist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_getattrlist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_setattrlist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_setattrlist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_exchangedata = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_exchangedata = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_getdirentriesattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Uint32 arg7,
);

typedef _dart_getdirentriesattr = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  int arg7,
);

typedef _c_searchfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<fssearchblock> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<searchstate> arg5,
);

typedef _dart_searchfs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<fssearchblock> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<searchstate> arg5,
);

typedef _c_fsctl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_fsctl = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
);

typedef _c_ffsctl = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_ffsctl = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
);

typedef _c_fsync_volume_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_fsync_volume_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_sync_volume_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sync_volume_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_openat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_openat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_creat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint16 arg1,
);

typedef _dart_creat = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fcntl = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg3,
);

typedef _dart_fcntl = int Function(
  int arg0,
  int arg1,
  int arg3,
);

typedef _c_openx_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<_filesec> arg2,
);

typedef _dart_openx_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<_filesec> arg2,
);

typedef _c_open_dprotected_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_open_dprotected_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_flock_1 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_flock_1 = int Function(
  int arg0,
  int arg1,
);

typedef _c_filesec_init = ffi.Pointer<_filesec> Function();

typedef _dart_filesec_init = ffi.Pointer<_filesec> Function();

typedef _c_filesec_dup = ffi.Pointer<_filesec> Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _dart_filesec_dup = ffi.Pointer<_filesec> Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _c_filesec_free = ffi.Void Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _dart_filesec_free = void Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _c_filesec_get_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_filesec_get_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_filesec_query_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_filesec_query_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_filesec_set_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_filesec_set_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_filesec_unset_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
);

typedef _dart_filesec_unset_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
);

typedef _c_raise = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_raise = int Function(
  int arg0,
);

typedef _typedefC_14 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_15 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_bsd_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_14>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> arg1,
);

typedef _dart_bsd_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_14>>
    Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_15>> arg1,
);

typedef _c_kill = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_kill = int Function(
  int arg0,
  int arg1,
);

typedef _c_killpg = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_killpg = int Function(
  int arg0,
  int arg1,
);

typedef _c_pthread_kill = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_kill = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
);

typedef _c_pthread_sigmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_pthread_sigmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_sigaction_1 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<sigaction> arg1,
  ffi.Pointer<sigaction> arg2,
);

typedef _dart_sigaction_1 = int Function(
  int arg0,
  ffi.Pointer<sigaction> arg1,
  ffi.Pointer<sigaction> arg2,
);

typedef _c_sigaddset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigaddset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigaltstack = ffi.Int32 Function(
  ffi.Pointer<__darwin_sigaltstack> arg0,
  ffi.Pointer<__darwin_sigaltstack> arg1,
);

typedef _dart_sigaltstack = int Function(
  ffi.Pointer<__darwin_sigaltstack> arg0,
  ffi.Pointer<__darwin_sigaltstack> arg1,
);

typedef _c_sigdelset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigdelset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigemptyset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigemptyset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigfillset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigfillset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sighold = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sighold = int Function(
  int arg0,
);

typedef _c_sigignore = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigignore = int Function(
  int arg0,
);

typedef _c_siginterrupt = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_siginterrupt = int Function(
  int arg0,
  int arg1,
);

typedef _c_sigismember = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigismember = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigpause = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigpause = int Function(
  int arg0,
);

typedef _c_sigpending = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigpending = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigprocmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_sigprocmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_sigrelse = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigrelse = int Function(
  int arg0,
);

typedef _typedefC_16 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Int32,
);

typedef _c_sigset = ffi.Pointer<ffi.NativeFunction<_typedefC_16>> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> arg1,
);

typedef _dart_sigset = ffi.Pointer<ffi.NativeFunction<_typedefC_16>> Function(
  int arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_17>> arg1,
);

typedef _c_sigsuspend = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigsuspend = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigwait = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_sigwait = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_psignal = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_psignal = void Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_sigblock = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigblock = int Function(
  int arg0,
);

typedef _c_sigsetmask = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigsetmask = int Function(
  int arg0,
);

typedef _c_sigvec_1 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<sigvec> arg1,
  ffi.Pointer<sigvec> arg2,
);

typedef _dart_sigvec_1 = int Function(
  int arg0,
  ffi.Pointer<sigvec> arg1,
  ffi.Pointer<sigvec> arg2,
);

typedef _c_closedir = ffi.Int32 Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_closedir = int Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_opendir = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_opendir = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_readdir = ffi.Pointer<dirent> Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_readdir = ffi.Pointer<dirent> Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_readdir_r = ffi.Int32 Function(
  ffi.Pointer<DIR> arg0,
  ffi.Pointer<dirent> arg1,
  ffi.Pointer<ffi.Pointer<dirent>> arg2,
);

typedef _dart_readdir_r = int Function(
  ffi.Pointer<DIR> arg0,
  ffi.Pointer<dirent> arg1,
  ffi.Pointer<ffi.Pointer<dirent>> arg2,
);

typedef _c_rewinddir = ffi.Void Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_rewinddir = void Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_seekdir = ffi.Void Function(
  ffi.Pointer<DIR> arg0,
  ffi.Int64 arg1,
);

typedef _dart_seekdir = void Function(
  ffi.Pointer<DIR> arg0,
  int arg1,
);

typedef _c_telldir = ffi.Int64 Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_telldir = int Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_fdopendir = ffi.Pointer<DIR> Function(
  ffi.Int32 arg0,
);

typedef _dart_fdopendir = ffi.Pointer<DIR> Function(
  int arg0,
);

typedef _c_alphasort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<dirent>> arg0,
  ffi.Pointer<ffi.Pointer<dirent>> arg1,
);

typedef _dart_alphasort = int Function(
  ffi.Pointer<ffi.Pointer<dirent>> arg0,
  ffi.Pointer<ffi.Pointer<dirent>> arg1,
);

typedef _c_dirfd = ffi.Int32 Function(
  ffi.Pointer<DIR> dirp,
);

typedef _dart_dirfd = int Function(
  ffi.Pointer<DIR> dirp,
);

typedef _typedefC_18 = ffi.Int32 Function(
  ffi.Pointer<dirent>,
);

typedef _typedefC_19 = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<dirent>>,
  ffi.Pointer<ffi.Pointer<dirent>>,
);

typedef _c_scandir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg3,
);

typedef _dart_scandir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_18>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_19>> arg3,
);

typedef _c_getdirentries = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _dart_getdirentries = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _c___opendir2 = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart___opendir2 = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_cfgetispeed = ffi.Uint64 Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfgetispeed = int Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfgetospeed = ffi.Uint64 Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfgetospeed = int Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfsetispeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetispeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_cfsetospeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetospeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_tcgetattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<termios> arg1,
);

typedef _dart_tcgetattr = int Function(
  int arg0,
  ffi.Pointer<termios> arg1,
);

typedef _c_tcsetattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Pointer<termios> arg2,
);

typedef _dart_tcsetattr = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<termios> arg2,
);

typedef _c_tcdrain = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcdrain = int Function(
  int arg0,
);

typedef _c_tcflow = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcflow = int Function(
  int arg0,
  int arg1,
);

typedef _c_tcflush = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcflush = int Function(
  int arg0,
  int arg1,
);

typedef _c_tcsendbreak = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcsendbreak = int Function(
  int arg0,
  int arg1,
);

typedef _c_cfmakeraw = ffi.Void Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfmakeraw = void Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfsetspeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetspeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_tcgetsid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcgetsid = int Function(
  int arg0,
);

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_renameat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_renamex_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_renamex_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_renameatx_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
);

typedef _dart_renameatx_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_feof = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _c_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_fputc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _c_freopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _dart_freopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<FILE> arg2,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<FILE> arg0,
  int arg1,
  int arg2,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<FILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getc = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar = int Function(
  int arg0,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_tmpfile = ffi.Pointer<FILE> Function();

typedef _dart_tmpfile = ffi.Pointer<FILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_ungetc = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_fdopen = ffi.Pointer<FILE> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fdopen = ffi.Pointer<FILE> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_popen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_popen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c___srget = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart___srget = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c___svfscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart___svfscanf = int Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c___swbuf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart___swbuf = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putc_unlocked = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar_unlocked = int Function(
  int arg0,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_getw = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _dart_putw = int Function(
  int arg0,
  ffi.Pointer<FILE> arg1,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<FILE> __stream,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<FILE> __stream,
  int __offset,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<FILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<FILE> __stream,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<FILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_dprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vdprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Int32 __delimiter,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  int __delimiter,
  ffi.Pointer<FILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<FILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<FILE> __stream,
);

typedef _c_fmemopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fmemopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  int __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_open_memstream = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _dart_open_memstream = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _c_asprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fpurge = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_fpurge = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<FILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_setlinebuf = ffi.Int32 Function(
  ffi.Pointer<FILE> arg0,
);

typedef _dart_setlinebuf = int Function(
  ffi.Pointer<FILE> arg0,
);

typedef _c_vasprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vasprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_zopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_zopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_24 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_25 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_26 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_27 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_funopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> arg4,
);

typedef _dart_funopen = ffi.Pointer<FILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_24>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_25>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_26>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_27>> arg4,
);

typedef _c___sprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart___sprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c___snprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart___snprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c___vsprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _dart___vsprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _c___vsnprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _dart___vsnprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __len,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __len,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Int32 __c,
  ffi.Uint64 __len,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  int __c,
  int __len,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  int __buflen,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c_memset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __smax,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset_s = int Function(
  ffi.Pointer<ffi.Void> __s,
  int __smax,
  int __c,
  int __n,
);

typedef _c_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  ffi.Uint64 __big_len,
  ffi.Pointer<ffi.Void> __little,
  ffi.Uint64 __little_len,
);

typedef _dart_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  int __big_len,
  ffi.Pointer<ffi.Void> __little,
  int __little_len,
);

typedef _c_memset_pattern4 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern4 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  int __len,
);

typedef _c_memset_pattern8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern8 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  int __len,
);

typedef _c_memset_pattern16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern16 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  int __len,
);

typedef _c_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  ffi.Uint64 __len,
);

typedef _dart_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  int __len,
);

typedef _c_strlcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcat = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcpy = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strmode = ffi.Void Function(
  ffi.Int32 __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _dart_strmode = void Function(
  int __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_timingsafe_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  ffi.Uint64 __len,
);

typedef _dart_timingsafe_bcmp = int Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  int __len,
);

typedef _c_strsignal_r = ffi.Int32 Function(
  ffi.Int32 __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strsignal_r = int Function(
  int __sig,
  ffi.Pointer<ffi.Int8> __strsignalbuf,
  int __buflen,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ffs = int Function(
  int arg0,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsl = int Function(
  int arg0,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsll = int Function(
  int arg0,
);

typedef _c_fls = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fls = int Function(
  int arg0,
);

typedef _c_flsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsl = int Function(
  int arg0,
);

typedef _c_flsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsll = int Function(
  int arg0,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_3 = ffi.Void Function(
  ffi.Int32,
);
