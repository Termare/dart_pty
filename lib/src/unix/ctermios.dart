/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// termios.h头文件在dart的移植.
class CTermios {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CTermios(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int cfgetispeed(
    ffi.Pointer<termios> arg0,
  ) {
    _cfgetispeed ??=
        _dylib.lookupFunction<_c_cfgetispeed, _dart_cfgetispeed>('cfgetispeed');
    return _cfgetispeed(
      arg0,
    );
  }

  _dart_cfgetispeed _cfgetispeed;

  int cfgetospeed(
    ffi.Pointer<termios> arg0,
  ) {
    _cfgetospeed ??=
        _dylib.lookupFunction<_c_cfgetospeed, _dart_cfgetospeed>('cfgetospeed');
    return _cfgetospeed(
      arg0,
    );
  }

  _dart_cfgetospeed _cfgetospeed;

  int cfsetispeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    _cfsetispeed ??=
        _dylib.lookupFunction<_c_cfsetispeed, _dart_cfsetispeed>('cfsetispeed');
    return _cfsetispeed(
      arg0,
      arg1,
    );
  }

  _dart_cfsetispeed _cfsetispeed;

  int cfsetospeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    _cfsetospeed ??=
        _dylib.lookupFunction<_c_cfsetospeed, _dart_cfsetospeed>('cfsetospeed');
    return _cfsetospeed(
      arg0,
      arg1,
    );
  }

  _dart_cfsetospeed _cfsetospeed;

  int tcgetattr(
    int arg0,
    ffi.Pointer<termios> arg1,
  ) {
    _tcgetattr ??=
        _dylib.lookupFunction<_c_tcgetattr, _dart_tcgetattr>('tcgetattr');
    return _tcgetattr(
      arg0,
      arg1,
    );
  }

  _dart_tcgetattr _tcgetattr;

  int tcsetattr(
    int arg0,
    int arg1,
    ffi.Pointer<termios> arg2,
  ) {
    _tcsetattr ??=
        _dylib.lookupFunction<_c_tcsetattr, _dart_tcsetattr>('tcsetattr');
    return _tcsetattr(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_tcsetattr _tcsetattr;

  int tcdrain(
    int arg0,
  ) {
    _tcdrain ??= _dylib.lookupFunction<_c_tcdrain, _dart_tcdrain>('tcdrain');
    return _tcdrain(
      arg0,
    );
  }

  _dart_tcdrain _tcdrain;

  int tcflow(
    int arg0,
    int arg1,
  ) {
    _tcflow ??= _dylib.lookupFunction<_c_tcflow, _dart_tcflow>('tcflow');
    return _tcflow(
      arg0,
      arg1,
    );
  }

  _dart_tcflow _tcflow;

  int tcflush(
    int arg0,
    int arg1,
  ) {
    _tcflush ??= _dylib.lookupFunction<_c_tcflush, _dart_tcflush>('tcflush');
    return _tcflush(
      arg0,
      arg1,
    );
  }

  _dart_tcflush _tcflush;

  int tcsendbreak(
    int arg0,
    int arg1,
  ) {
    _tcsendbreak ??=
        _dylib.lookupFunction<_c_tcsendbreak, _dart_tcsendbreak>('tcsendbreak');
    return _tcsendbreak(
      arg0,
      arg1,
    );
  }

  _dart_tcsendbreak _tcsendbreak;

  void cfmakeraw(
    ffi.Pointer<termios> arg0,
  ) {
    _cfmakeraw ??=
        _dylib.lookupFunction<_c_cfmakeraw, _dart_cfmakeraw>('cfmakeraw');
    return _cfmakeraw(
      arg0,
    );
  }

  _dart_cfmakeraw _cfmakeraw;

  int cfsetspeed(
    ffi.Pointer<termios> arg0,
    int arg1,
  ) {
    _cfsetspeed ??=
        _dylib.lookupFunction<_c_cfsetspeed, _dart_cfsetspeed>('cfsetspeed');
    return _cfsetspeed(
      arg0,
      arg1,
    );
  }

  _dart_cfsetspeed _cfsetspeed;

  int tcgetsid(
    int arg0,
  ) {
    _tcgetsid ??=
        _dylib.lookupFunction<_c_tcgetsid, _dart_tcgetsid>('tcgetsid');
    return _tcgetsid(
      arg0,
    );
  }

  _dart_tcgetsid _tcgetsid;
}

class termios extends ffi.Struct {
  // 额外添加
  @ffi.Uint32()
  int c_iflag;
  @ffi.Uint32()
  int c_oflag;
  @ffi.Uint32()
  int c_cflag;

  @ffi.Uint32()
  int c_lflag;

  ffi.Pointer<ffi.Int8> c_cc;

  @ffi.Uint8()
  int c_ispeed; /* input speed */
  @ffi.Uint8()
  int c_ospeed; /* output speed */
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class winsize extends ffi.Struct {
  @ffi.Uint16()
  int ws_row;

  @ffi.Uint16()
  int ws_col;

  @ffi.Uint16()
  int ws_xpixel;

  @ffi.Uint16()
  int ws_ypixel;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

// const String __DARWIN_SUF_64_BIT_INO_T = '$INODE64';

// const String __DARWIN_SUF_1050 = '$1050';

// const String __DARWIN_SUF_EXTSN = '$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int VEOF = 0;

const int VEOL = 1;

const int VEOL2 = 2;

const int VERASE = 3;

const int VWERASE = 4;

const int VKILL = 5;

const int VREPRINT = 6;

const int VINTR = 8;

const int VQUIT = 9;

const int VSUSP = 10;

const int VDSUSP = 11;

const int VSTART = 12;

const int VSTOP = 13;

const int VLNEXT = 14;

const int VDISCARD = 15;

const int VMIN = 16;

const int VTIME = 17;

const int VSTATUS = 18;

const int NCCS = 20;

const int _POSIX_VDISABLE = 255;

const int IGNBRK = 1;

const int BRKINT = 2;

const int IGNPAR = 4;

const int PARMRK = 8;

const int INPCK = 16;

const int ISTRIP = 32;

const int INLCR = 64;

const int IGNCR = 128;

const int ICRNL = 256;

const int IXON = 512;

const int IXOFF = 1024;

const int IXANY = 2048;

const int IMAXBEL = 8192;

const int IUTF8 = 16384;

const int OPOST = 1;

const int ONLCR = 2;

const int OXTABS = 4;

const int ONOEOT = 8;

const int OCRNL = 16;

const int ONOCR = 32;

const int ONLRET = 64;

const int OFILL = 128;

const int NLDLY = 768;

const int TABDLY = 3076;

const int CRDLY = 12288;

const int FFDLY = 16384;

const int BSDLY = 32768;

const int VTDLY = 65536;

const int OFDEL = 131072;

const int NL0 = 0;

const int NL1 = 256;

const int NL2 = 512;

const int NL3 = 768;

const int TAB0 = 0;

const int TAB1 = 1024;

const int TAB2 = 2048;

const int TAB3 = 4;

const int CR0 = 0;

const int CR1 = 4096;

const int CR2 = 8192;

const int CR3 = 12288;

const int FF0 = 0;

const int FF1 = 16384;

const int BS0 = 0;

const int BS1 = 32768;

const int VT0 = 0;

const int VT1 = 65536;

const int CIGNORE = 1;

const int CSIZE = 768;

const int CS5 = 0;

const int CS6 = 256;

const int CS7 = 512;

const int CS8 = 768;

const int CSTOPB = 1024;

const int CREAD = 2048;

const int PARENB = 4096;

const int PARODD = 8192;

const int HUPCL = 16384;

const int CLOCAL = 32768;

const int CCTS_OFLOW = 65536;

const int CRTSCTS = 196608;

const int CRTS_IFLOW = 131072;

const int CDTR_IFLOW = 262144;

const int CDSR_OFLOW = 524288;

const int CCAR_OFLOW = 1048576;

const int MDMBUF = 1048576;

const int ECHOKE = 1;

const int ECHOE = 2;

const int ECHOK = 4;

const int ECHO = 8;

const int ECHONL = 16;

const int ECHOPRT = 32;

const int ECHOCTL = 64;

const int ISIG = 128;

const int ICANON = 256;

const int ALTWERASE = 512;

const int IEXTEN = 1024;

const int EXTPROC = 2048;

const int TOSTOP = 4194304;

const int FLUSHO = 8388608;

const int NOKERNINFO = 33554432;

const int PENDIN = 536870912;

const int NOFLSH = 2147483648;

const int TCSANOW = 0;

const int TCSADRAIN = 1;

const int TCSAFLUSH = 2;

const int TCSASOFT = 16;

const int B0 = 0;

const int B50 = 50;

const int B75 = 75;

const int B110 = 110;

const int B134 = 134;

const int B150 = 150;

const int B200 = 200;

const int B300 = 300;

const int B600 = 600;

const int B1200 = 1200;

const int B1800 = 1800;

const int B2400 = 2400;

const int B4800 = 4800;

const int B9600 = 9600;

const int B19200 = 19200;

const int B38400 = 38400;

const int B7200 = 7200;

const int B14400 = 14400;

const int B28800 = 28800;

const int B57600 = 57600;

const int B76800 = 76800;

const int B115200 = 115200;

const int B230400 = 230400;

const int EXTA = 19200;

const int EXTB = 38400;

const int TCIFLUSH = 1;

const int TCOFLUSH = 2;

const int TCIOFLUSH = 3;

const int TCOOFF = 1;

const int TCOON = 2;

const int TCIOFF = 3;

const int TCION = 4;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int IOCPARM_MASK = 8191;

const int IOCPARM_MAX = 8192;

const int IOC_VOID = 536870912;

const int IOC_OUT = 1073741824;

const int IOC_IN = 2147483648;

const int IOC_INOUT = 3221225472;

const int IOC_DIRMASK = 3758096384;

const int TIOCMODG = 1074033667;

const int TIOCMODS = 2147775492;

const int TIOCM_LE = 1;

const int TIOCM_DTR = 2;

const int TIOCM_RTS = 4;

const int TIOCM_ST = 8;

const int TIOCM_SR = 16;

const int TIOCM_CTS = 32;

const int TIOCM_CAR = 64;

const int TIOCM_CD = 64;

const int TIOCM_RNG = 128;

const int TIOCM_RI = 128;

const int TIOCM_DSR = 256;

const int TIOCEXCL = 536900621;

const int TIOCNXCL = 536900622;

const int TIOCFLUSH = 2147775504;

const int TIOCGETA = 1078490131;

const int TIOCSETA = 2152231956;

const int TIOCSETAW = 2152231957;

const int TIOCSETAF = 2152231958;

const int TIOCGETD = 1074033690;

const int TIOCSETD = 2147775515;

const int TIOCIXON = 536900737;

const int TIOCIXOFF = 536900736;

const int TIOCSBRK = 536900731;

const int TIOCCBRK = 536900730;

const int TIOCSDTR = 536900729;

const int TIOCCDTR = 536900728;

const int TIOCGPGRP = 1074033783;

const int TIOCSPGRP = 2147775606;

const int TIOCOUTQ = 1074033779;

const int TIOCSTI = 2147578994;

const int TIOCNOTTY = 536900721;

const int TIOCPKT = 2147775600;

const int TIOCPKT_DATA = 0;

const int TIOCPKT_FLUSHREAD = 1;

const int TIOCPKT_FLUSHWRITE = 2;

const int TIOCPKT_STOP = 4;

const int TIOCPKT_START = 8;

const int TIOCPKT_NOSTOP = 16;

const int TIOCPKT_DOSTOP = 32;

const int TIOCPKT_IOCTL = 64;

const int TIOCSTOP = 536900719;

const int TIOCSTART = 536900718;

const int TIOCMSET = 2147775597;

const int TIOCMBIS = 2147775596;

const int TIOCMBIC = 2147775595;

const int TIOCMGET = 1074033770;

const int TIOCREMOTE = 2147775593;

const int TIOCGWINSZ = 1074295912;

const int TIOCSWINSZ = 2148037735;

const int TIOCUCNTL = 2147775590;

const int TIOCSTAT = 536900709;

const int TIOCSCONS = 536900707;

const int TIOCCONS = 2147775586;

const int TIOCSCTTY = 536900705;

const int TIOCEXT = 2147775584;

const int TIOCSIG = 536900703;

const int TIOCDRAIN = 536900702;

const int TIOCMSDTRWAIT = 2147775579;

const int TIOCMGDTRWAIT = 1074033754;

const int TIOCSDRAINWAIT = 2147775575;

const int TIOCGDRAINWAIT = 1074033750;

const int TIOCDSIMICROCODE = 536900693;

const int TIOCPTYGRANT = 536900692;

const int TIOCPTYGNAME = 1082160211;

const int TIOCPTYUNLK = 536900690;

const int TTYDISC = 0;

const int TABLDISC = 3;

const int SLIPDISC = 4;

const int PPPDISC = 5;

const int TTYDEF_IFLAG = 11010;

const int TTYDEF_OFLAG = 3;

const int TTYDEF_LFLAG = 1483;

const int TTYDEF_CFLAG = 19200;

const int TTYDEF_SPEED = 9600;

const int CEOF = 4;

const int CEOL = 255;

const int CERASE = 127;

const int CINTR = 3;

const int CSTATUS = 20;

const int CKILL = 21;

const int CMIN = 1;

const int CQUIT = 28;

const int CSUSP = 26;

const int CTIME = 0;

const int CDSUSP = 25;

const int CSTART = 17;

const int CSTOP = 19;

const int CLNEXT = 22;

const int CDISCARD = 15;

const int CWERASE = 23;

const int CREPRINT = 18;

const int CEOT = 4;

const int CBRK = 255;

const int CRPRNT = 18;

const int CFLUSH = 15;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

typedef _c_cfgetispeed = ffi.Uint64 Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfgetispeed = int Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfgetospeed = ffi.Uint64 Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfgetospeed = int Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfsetispeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetispeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_cfsetospeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetospeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_tcgetattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<termios> arg1,
);

typedef _dart_tcgetattr = int Function(
  int arg0,
  ffi.Pointer<termios> arg1,
);

typedef _c_tcsetattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Pointer<termios> arg2,
);

typedef _dart_tcsetattr = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<termios> arg2,
);

typedef _c_tcdrain = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcdrain = int Function(
  int arg0,
);

typedef _c_tcflow = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcflow = int Function(
  int arg0,
  int arg1,
);

typedef _c_tcflush = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcflush = int Function(
  int arg0,
  int arg1,
);

typedef _c_tcsendbreak = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcsendbreak = int Function(
  int arg0,
  int arg1,
);

typedef _c_cfmakeraw = ffi.Void Function(
  ffi.Pointer<termios> arg0,
);

typedef _dart_cfmakeraw = void Function(
  ffi.Pointer<termios> arg0,
);

typedef _c_cfsetspeed = ffi.Int32 Function(
  ffi.Pointer<termios> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_cfsetspeed = int Function(
  ffi.Pointer<termios> arg0,
  int arg1,
);

typedef _c_tcgetsid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcgetsid = int Function(
  int arg0,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
