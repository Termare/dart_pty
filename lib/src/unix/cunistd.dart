/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// unistd.h头文件在dart的移植.
class CUnistd {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CUnistd(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int getattrlistbulk(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    _getattrlistbulk ??=
        _dylib.lookupFunction<_c_getattrlistbulk, _dart_getattrlistbulk>(
            'getattrlistbulk');
    return _getattrlistbulk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_getattrlistbulk _getattrlistbulk;

  int getattrlistat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    _getattrlistat ??= _dylib
        .lookupFunction<_c_getattrlistat, _dart_getattrlistat>('getattrlistat');
    return _getattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_getattrlistat _getattrlistat;

  int setattrlistat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ffi.Void> arg3,
    int arg4,
    int arg5,
  ) {
    _setattrlistat ??= _dylib
        .lookupFunction<_c_setattrlistat, _dart_setattrlistat>('setattrlistat');
    return _setattrlistat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_setattrlistat _setattrlistat;

  int faccessat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    _faccessat ??=
        _dylib.lookupFunction<_c_faccessat, _dart_faccessat>('faccessat');
    return _faccessat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_faccessat _faccessat;

  int fchownat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    _fchownat ??=
        _dylib.lookupFunction<_c_fchownat, _dart_fchownat>('fchownat');
    return _fchownat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_fchownat _fchownat;

  int linkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    _linkat ??= _dylib.lookupFunction<_c_linkat, _dart_linkat>('linkat');
    return _linkat(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_linkat _linkat;

  int readlinkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<ffi.Int8> arg2,
    int arg3,
  ) {
    _readlinkat ??=
        _dylib.lookupFunction<_c_readlinkat, _dart_readlinkat>('readlinkat');
    return _readlinkat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_readlinkat _readlinkat;

  int symlinkat(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _symlinkat ??=
        _dylib.lookupFunction<_c_symlinkat, _dart_symlinkat>('symlinkat');
    return _symlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_symlinkat _symlinkat;

  int unlinkat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _unlinkat ??=
        _dylib.lookupFunction<_c_unlinkat, _dart_unlinkat>('unlinkat');
    return _unlinkat(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_unlinkat _unlinkat;

  void _exit(
    int arg0,
  ) {
    __exit ??= _dylib.lookupFunction<_c__exit, _dart__exit>('_exit');
    return __exit(
      arg0,
    );
  }

  _dart__exit __exit;

  int access(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _access ??= _dylib.lookupFunction<_c_access, _dart_access>('access');
    return _access(
      arg0,
      arg1,
    );
  }

  _dart_access _access;

  int alarm(
    int arg0,
  ) {
    _alarm ??= _dylib.lookupFunction<_c_alarm, _dart_alarm>('alarm');
    return _alarm(
      arg0,
    );
  }

  _dart_alarm _alarm;

  int chdir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _chdir ??= _dylib.lookupFunction<_c_chdir, _dart_chdir>('chdir');
    return _chdir(
      arg0,
    );
  }

  _dart_chdir _chdir;

  int chown(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    _chown ??= _dylib.lookupFunction<_c_chown, _dart_chown>('chown');
    return _chown(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_chown _chown;

  int close(
    int arg0,
  ) {
    _close ??= _dylib.lookupFunction<_c_close, _dart_close>('close');
    return _close(
      arg0,
    );
  }

  _dart_close _close;

  int dup(
    int arg0,
  ) {
    _dup ??= _dylib.lookupFunction<_c_dup, _dart_dup>('dup');
    return _dup(
      arg0,
    );
  }

  _dart_dup _dup;

  int dup2(
    int arg0,
    int arg1,
  ) {
    _dup2 ??= _dylib.lookupFunction<_c_dup2, _dart_dup2>('dup2');
    return _dup2(
      arg0,
      arg1,
    );
  }

  _dart_dup2 _dup2;

  int execl(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    _execl ??= _dylib.lookupFunction<_c_execl, _dart_execl>('execl');
    return _execl(
      __path,
      __arg0,
    );
  }

  _dart_execl _execl;

  int execle(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    _execle ??= _dylib.lookupFunction<_c_execle, _dart_execle>('execle');
    return _execle(
      __path,
      __arg0,
    );
  }

  _dart_execle _execle;

  int execlp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __arg0,
  ) {
    _execlp ??= _dylib.lookupFunction<_c_execlp, _dart_execlp>('execlp');
    return _execlp(
      __file,
      __arg0,
    );
  }

  _dart_execlp _execlp;

  int execv(
    ffi.Pointer<ffi.Int8> __path,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execv ??= _dylib.lookupFunction<_c_execv, _dart_execv>('execv');
    return _execv(
      __path,
      __argv,
    );
  }

  _dart_execv _execv;

  int execve(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
  ) {
    _execve ??= _dylib.lookupFunction<_c_execve, _dart_execve>('execve');
    return _execve(
      __file,
      __argv,
      __envp,
    );
  }

  _dart_execve _execve;

  int execvp(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execvp ??= _dylib.lookupFunction<_c_execvp, _dart_execvp>('execvp');
    return _execvp(
      __file,
      __argv,
    );
  }

  _dart_execvp _execvp;

  int fork() {
    _fork ??= _dylib.lookupFunction<_c_fork, _dart_fork>('fork');
    return _fork();
  }

  _dart_fork _fork;

  int fpathconf(
    int arg0,
    int arg1,
  ) {
    _fpathconf ??=
        _dylib.lookupFunction<_c_fpathconf, _dart_fpathconf>('fpathconf');
    return _fpathconf(
      arg0,
      arg1,
    );
  }

  _dart_fpathconf _fpathconf;

  ffi.Pointer<ffi.Int8> getcwd(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _getcwd ??= _dylib.lookupFunction<_c_getcwd, _dart_getcwd>('getcwd');
    return _getcwd(
      arg0,
      arg1,
    );
  }

  _dart_getcwd _getcwd;

  int getegid() {
    _getegid ??= _dylib.lookupFunction<_c_getegid, _dart_getegid>('getegid');
    return _getegid();
  }

  _dart_getegid _getegid;

  int geteuid() {
    _geteuid ??= _dylib.lookupFunction<_c_geteuid, _dart_geteuid>('geteuid');
    return _geteuid();
  }

  _dart_geteuid _geteuid;

  int getgid() {
    _getgid ??= _dylib.lookupFunction<_c_getgid, _dart_getgid>('getgid');
    return _getgid();
  }

  _dart_getgid _getgid;

  int getgroups(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    _getgroups ??=
        _dylib.lookupFunction<_c_getgroups, _dart_getgroups>('getgroups');
    return _getgroups(
      arg0,
      arg1,
    );
  }

  _dart_getgroups _getgroups;

  ffi.Pointer<ffi.Int8> getlogin() {
    _getlogin ??=
        _dylib.lookupFunction<_c_getlogin, _dart_getlogin>('getlogin');
    return _getlogin();
  }

  _dart_getlogin _getlogin;

  int getpgrp() {
    _getpgrp ??= _dylib.lookupFunction<_c_getpgrp, _dart_getpgrp>('getpgrp');
    return _getpgrp();
  }

  _dart_getpgrp _getpgrp;

  int getpid() {
    _getpid ??= _dylib.lookupFunction<_c_getpid, _dart_getpid>('getpid');
    return _getpid();
  }

  _dart_getpid _getpid;

  int getppid() {
    _getppid ??= _dylib.lookupFunction<_c_getppid, _dart_getppid>('getppid');
    return _getppid();
  }

  _dart_getppid _getppid;

  int getuid() {
    _getuid ??= _dylib.lookupFunction<_c_getuid, _dart_getuid>('getuid');
    return _getuid();
  }

  _dart_getuid _getuid;

  int isatty(
    int arg0,
  ) {
    _isatty ??= _dylib.lookupFunction<_c_isatty, _dart_isatty>('isatty');
    return _isatty(
      arg0,
    );
  }

  _dart_isatty _isatty;

  int link(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _link ??= _dylib.lookupFunction<_c_link, _dart_link>('link');
    return _link(
      arg0,
      arg1,
    );
  }

  _dart_link _link;

  int lseek(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _lseek ??= _dylib.lookupFunction<_c_lseek, _dart_lseek>('lseek');
    return _lseek(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_lseek _lseek;

  int pathconf(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _pathconf ??=
        _dylib.lookupFunction<_c_pathconf, _dart_pathconf>('pathconf');
    return _pathconf(
      arg0,
      arg1,
    );
  }

  _dart_pathconf _pathconf;

  int pause() {
    _pause ??= _dylib.lookupFunction<_c_pause, _dart_pause>('pause');
    return _pause();
  }

  _dart_pause _pause;

  int pipe(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    _pipe ??= _dylib.lookupFunction<_c_pipe, _dart_pipe>('pipe');
    return _pipe(
      arg0,
    );
  }

  _dart_pipe _pipe;

  int read(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _read ??= _dylib.lookupFunction<_c_read, _dart_read>('read');
    return _read(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_read _read;

  int rmdir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _rmdir ??= _dylib.lookupFunction<_c_rmdir, _dart_rmdir>('rmdir');
    return _rmdir(
      arg0,
    );
  }

  _dart_rmdir _rmdir;

  int setgid(
    int arg0,
  ) {
    _setgid ??= _dylib.lookupFunction<_c_setgid, _dart_setgid>('setgid');
    return _setgid(
      arg0,
    );
  }

  _dart_setgid _setgid;

  int setpgid(
    int arg0,
    int arg1,
  ) {
    _setpgid ??= _dylib.lookupFunction<_c_setpgid, _dart_setpgid>('setpgid');
    return _setpgid(
      arg0,
      arg1,
    );
  }

  _dart_setpgid _setpgid;

  int setsid() {
    _setsid ??= _dylib.lookupFunction<_c_setsid, _dart_setsid>('setsid');
    return _setsid();
  }

  _dart_setsid _setsid;

  int setuid(
    int arg0,
  ) {
    _setuid ??= _dylib.lookupFunction<_c_setuid, _dart_setuid>('setuid');
    return _setuid(
      arg0,
    );
  }

  _dart_setuid _setuid;

  int sleep(
    int arg0,
  ) {
    _sleep ??= _dylib.lookupFunction<_c_sleep, _dart_sleep>('sleep');
    return _sleep(
      arg0,
    );
  }

  _dart_sleep _sleep;

  int sysconf(
    int arg0,
  ) {
    _sysconf ??= _dylib.lookupFunction<_c_sysconf, _dart_sysconf>('sysconf');
    return _sysconf(
      arg0,
    );
  }

  _dart_sysconf _sysconf;

  int tcgetpgrp(
    int arg0,
  ) {
    _tcgetpgrp ??=
        _dylib.lookupFunction<_c_tcgetpgrp, _dart_tcgetpgrp>('tcgetpgrp');
    return _tcgetpgrp(
      arg0,
    );
  }

  _dart_tcgetpgrp _tcgetpgrp;

  int tcsetpgrp(
    int arg0,
    int arg1,
  ) {
    _tcsetpgrp ??=
        _dylib.lookupFunction<_c_tcsetpgrp, _dart_tcsetpgrp>('tcsetpgrp');
    return _tcsetpgrp(
      arg0,
      arg1,
    );
  }

  _dart_tcsetpgrp _tcsetpgrp;

  ffi.Pointer<ffi.Int8> ttyname(
    int arg0,
  ) {
    _ttyname ??= _dylib.lookupFunction<_c_ttyname, _dart_ttyname>('ttyname');
    return _ttyname(
      arg0,
    );
  }

  _dart_ttyname _ttyname;

  int ttyname_r(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _ttyname_r ??=
        _dylib.lookupFunction<_c_ttyname_r, _dart_ttyname_r>('ttyname_r');
    return _ttyname_r(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_ttyname_r _ttyname_r;

  int unlink(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _unlink ??= _dylib.lookupFunction<_c_unlink, _dart_unlink>('unlink');
    return _unlink(
      arg0,
    );
  }

  _dart_unlink _unlink;

  int write(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
  ) {
    _write ??= _dylib.lookupFunction<_c_write, _dart_write>('write');
    return _write(
      __fd,
      __buf,
      __nbyte,
    );
  }

  _dart_write _write;

  int confstr(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _confstr ??= _dylib.lookupFunction<_c_confstr, _dart_confstr>('confstr');
    return _confstr(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_confstr _confstr;

  int getopt(
    int arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Int8> arg2,
  ) {
    _getopt ??= _dylib.lookupFunction<_c_getopt, _dart_getopt>('getopt');
    return _getopt(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_getopt _getopt;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ctermid ??= _dylib.lookupFunction<_c_ctermid, _dart_ctermid>('ctermid');
    return _ctermid(
      arg0,
    );
  }

  _dart_ctermid _ctermid;

  ffi.Pointer<ffi.Void> brk(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    _brk ??= _dylib.lookupFunction<_c_brk, _dart_brk>('brk');
    return _brk(
      arg0,
    );
  }

  _dart_brk _brk;

  int chroot(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _chroot ??= _dylib.lookupFunction<_c_chroot, _dart_chroot>('chroot');
    return _chroot(
      arg0,
    );
  }

  _dart_chroot _chroot;

  ffi.Pointer<ffi.Int8> crypt(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _crypt ??= _dylib.lookupFunction<_c_crypt, _dart_crypt>('crypt');
    return _crypt(
      arg0,
      arg1,
    );
  }

  _dart_crypt _crypt;

  void encrypt(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _encrypt ??= _dylib.lookupFunction<_c_encrypt, _dart_encrypt>('encrypt');
    return _encrypt(
      arg0,
      arg1,
    );
  }

  _dart_encrypt _encrypt;

  int fchdir(
    int arg0,
  ) {
    _fchdir ??= _dylib.lookupFunction<_c_fchdir, _dart_fchdir>('fchdir');
    return _fchdir(
      arg0,
    );
  }

  _dart_fchdir _fchdir;

  int gethostid() {
    _gethostid ??=
        _dylib.lookupFunction<_c_gethostid, _dart_gethostid>('gethostid');
    return _gethostid();
  }

  _dart_gethostid _gethostid;

  int getpgid(
    int arg0,
  ) {
    _getpgid ??= _dylib.lookupFunction<_c_getpgid, _dart_getpgid>('getpgid');
    return _getpgid(
      arg0,
    );
  }

  _dart_getpgid _getpgid;

  int getsid(
    int arg0,
  ) {
    _getsid ??= _dylib.lookupFunction<_c_getsid, _dart_getsid>('getsid');
    return _getsid(
      arg0,
    );
  }

  _dart_getsid _getsid;

  int getdtablesize() {
    _getdtablesize ??= _dylib
        .lookupFunction<_c_getdtablesize, _dart_getdtablesize>('getdtablesize');
    return _getdtablesize();
  }

  _dart_getdtablesize _getdtablesize;

  int getpagesize() {
    _getpagesize ??=
        _dylib.lookupFunction<_c_getpagesize, _dart_getpagesize>('getpagesize');
    return _getpagesize();
  }

  _dart_getpagesize _getpagesize;

  ffi.Pointer<ffi.Int8> getpass(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getpass ??= _dylib.lookupFunction<_c_getpass, _dart_getpass>('getpass');
    return _getpass(
      arg0,
    );
  }

  _dart_getpass _getpass;

  ffi.Pointer<ffi.Int8> getwd(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _getwd ??= _dylib.lookupFunction<_c_getwd, _dart_getwd>('getwd');
    return _getwd(
      arg0,
    );
  }

  _dart_getwd _getwd;

  int lchown(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    _lchown ??= _dylib.lookupFunction<_c_lchown, _dart_lchown>('lchown');
    return _lchown(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_lchown _lchown;

  int lockf(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _lockf ??= _dylib.lookupFunction<_c_lockf, _dart_lockf>('lockf');
    return _lockf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_lockf _lockf;

  int nice(
    int arg0,
  ) {
    _nice ??= _dylib.lookupFunction<_c_nice, _dart_nice>('nice');
    return _nice(
      arg0,
    );
  }

  _dart_nice _nice;

  int pread(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    _pread ??= _dylib.lookupFunction<_c_pread, _dart_pread>('pread');
    return _pread(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  _dart_pread _pread;

  int pwrite(
    int __fd,
    ffi.Pointer<ffi.Void> __buf,
    int __nbyte,
    int __offset,
  ) {
    _pwrite ??= _dylib.lookupFunction<_c_pwrite, _dart_pwrite>('pwrite');
    return _pwrite(
      __fd,
      __buf,
      __nbyte,
      __offset,
    );
  }

  _dart_pwrite _pwrite;

  ffi.Pointer<ffi.Void> sbrk(
    int arg0,
  ) {
    _sbrk ??= _dylib.lookupFunction<_c_sbrk, _dart_sbrk>('sbrk');
    return _sbrk(
      arg0,
    );
  }

  _dart_sbrk _sbrk;

  int setpgrp() {
    _setpgrp ??= _dylib.lookupFunction<_c_setpgrp, _dart_setpgrp>('setpgrp');
    return _setpgrp();
  }

  _dart_setpgrp _setpgrp;

  int setregid(
    int arg0,
    int arg1,
  ) {
    _setregid ??=
        _dylib.lookupFunction<_c_setregid, _dart_setregid>('setregid');
    return _setregid(
      arg0,
      arg1,
    );
  }

  _dart_setregid _setregid;

  int setreuid(
    int arg0,
    int arg1,
  ) {
    _setreuid ??=
        _dylib.lookupFunction<_c_setreuid, _dart_setreuid>('setreuid');
    return _setreuid(
      arg0,
      arg1,
    );
  }

  _dart_setreuid _setreuid;

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _swab ??= _dylib.lookupFunction<_c_swab, _dart_swab>('swab');
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_swab _swab;

  void sync_1() {
    _sync_1 ??= _dylib.lookupFunction<_c_sync_1, _dart_sync_1>('sync');
    return _sync_1();
  }

  _dart_sync_1 _sync_1;

  int truncate(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _truncate ??=
        _dylib.lookupFunction<_c_truncate, _dart_truncate>('truncate');
    return _truncate(
      arg0,
      arg1,
    );
  }

  _dart_truncate _truncate;

  int ualarm(
    int arg0,
    int arg1,
  ) {
    _ualarm ??= _dylib.lookupFunction<_c_ualarm, _dart_ualarm>('ualarm');
    return _ualarm(
      arg0,
      arg1,
    );
  }

  _dart_ualarm _ualarm;

  int usleep(
    int arg0,
  ) {
    _usleep ??= _dylib.lookupFunction<_c_usleep, _dart_usleep>('usleep');
    return _usleep(
      arg0,
    );
  }

  _dart_usleep _usleep;

  int vfork() {
    _vfork ??= _dylib.lookupFunction<_c_vfork, _dart_vfork>('vfork');
    return _vfork();
  }

  _dart_vfork _vfork;

  int fsync(
    int arg0,
  ) {
    _fsync ??= _dylib.lookupFunction<_c_fsync, _dart_fsync>('fsync');
    return _fsync(
      arg0,
    );
  }

  _dart_fsync _fsync;

  int ftruncate(
    int arg0,
    int arg1,
  ) {
    _ftruncate ??=
        _dylib.lookupFunction<_c_ftruncate, _dart_ftruncate>('ftruncate');
    return _ftruncate(
      arg0,
      arg1,
    );
  }

  _dart_ftruncate _ftruncate;

  int getlogin_r(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _getlogin_r ??=
        _dylib.lookupFunction<_c_getlogin_r, _dart_getlogin_r>('getlogin_r');
    return _getlogin_r(
      arg0,
      arg1,
    );
  }

  _dart_getlogin_r _getlogin_r;

  int fchown(
    int arg0,
    int arg1,
    int arg2,
  ) {
    _fchown ??= _dylib.lookupFunction<_c_fchown, _dart_fchown>('fchown');
    return _fchown(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_fchown _fchown;

  int gethostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _gethostname ??=
        _dylib.lookupFunction<_c_gethostname, _dart_gethostname>('gethostname');
    return _gethostname(
      arg0,
      arg1,
    );
  }

  _dart_gethostname _gethostname;

  int readlink(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _readlink ??=
        _dylib.lookupFunction<_c_readlink, _dart_readlink>('readlink');
    return _readlink(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_readlink _readlink;

  int setegid(
    int arg0,
  ) {
    _setegid ??= _dylib.lookupFunction<_c_setegid, _dart_setegid>('setegid');
    return _setegid(
      arg0,
    );
  }

  _dart_setegid _setegid;

  int seteuid(
    int arg0,
  ) {
    _seteuid ??= _dylib.lookupFunction<_c_seteuid, _dart_seteuid>('seteuid');
    return _seteuid(
      arg0,
    );
  }

  _dart_seteuid _seteuid;

  int symlink(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _symlink ??= _dylib.lookupFunction<_c_symlink, _dart_symlink>('symlink');
    return _symlink(
      arg0,
      arg1,
    );
  }

  _dart_symlink _symlink;

  int __darwin_check_fd_set_overflow(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    ___darwin_check_fd_set_overflow ??= _dylib.lookupFunction<
        _c___darwin_check_fd_set_overflow,
        _dart___darwin_check_fd_set_overflow>('__darwin_check_fd_set_overflow');
    return ___darwin_check_fd_set_overflow(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart___darwin_check_fd_set_overflow ___darwin_check_fd_set_overflow;

  int __darwin_check_fd_set(
    int _a,
    ffi.Pointer<ffi.Void> _b,
  ) {
    ___darwin_check_fd_set ??= _dylib.lookupFunction<_c___darwin_check_fd_set,
        _dart___darwin_check_fd_set>('__darwin_check_fd_set');
    return ___darwin_check_fd_set(
      _a,
      _b,
    );
  }

  _dart___darwin_check_fd_set ___darwin_check_fd_set;

  int __darwin_fd_isset(
    int _fd,
    ffi.Pointer<fd_set> _p,
  ) {
    ___darwin_fd_isset ??=
        _dylib.lookupFunction<_c___darwin_fd_isset, _dart___darwin_fd_isset>(
            '__darwin_fd_isset');
    return ___darwin_fd_isset(
      _fd,
      _p,
    );
  }

  _dart___darwin_fd_isset ___darwin_fd_isset;

  void __darwin_fd_set(
    int _fd,
    ffi.Pointer<fd_set> _p,
  ) {
    ___darwin_fd_set ??=
        _dylib.lookupFunction<_c___darwin_fd_set, _dart___darwin_fd_set>(
            '__darwin_fd_set');
    return ___darwin_fd_set(
      _fd,
      _p,
    );
  }

  _dart___darwin_fd_set ___darwin_fd_set;

  void __darwin_fd_clr(
    int _fd,
    ffi.Pointer<fd_set> _p,
  ) {
    ___darwin_fd_clr ??=
        _dylib.lookupFunction<_c___darwin_fd_clr, _dart___darwin_fd_clr>(
            '__darwin_fd_clr');
    return ___darwin_fd_clr(
      _fd,
      _p,
    );
  }

  _dart___darwin_fd_clr ___darwin_fd_clr;

  int pselect(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timespec> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
  ) {
    _pselect ??= _dylib.lookupFunction<_c_pselect, _dart_pselect>('pselect');
    return _pselect(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_pselect _pselect;

  int select(
    int arg0,
    ffi.Pointer<fd_set> arg1,
    ffi.Pointer<fd_set> arg2,
    ffi.Pointer<fd_set> arg3,
    ffi.Pointer<timeval> arg4,
  ) {
    _select ??= _dylib.lookupFunction<_c_select, _dart_select>('select');
    return _select(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_select _select;

  void _Exit(
    int arg0,
  ) {
    __Exit ??= _dylib.lookupFunction<_c__Exit, _dart__Exit>('_Exit');
    return __Exit(
      arg0,
    );
  }

  _dart__Exit __Exit;

  int accessx_np(
    ffi.Pointer<accessx_descriptor> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    int arg3,
  ) {
    _accessx_np ??=
        _dylib.lookupFunction<_c_accessx_np, _dart_accessx_np>('accessx_np');
    return _accessx_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_accessx_np _accessx_np;

  int acct(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _acct ??= _dylib.lookupFunction<_c_acct, _dart_acct>('acct');
    return _acct(
      arg0,
    );
  }

  _dart_acct _acct;

  int add_profil(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _add_profil ??=
        _dylib.lookupFunction<_c_add_profil, _dart_add_profil>('add_profil');
    return _add_profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_add_profil _add_profil;

  void endusershell() {
    _endusershell ??= _dylib
        .lookupFunction<_c_endusershell, _dart_endusershell>('endusershell');
    return _endusershell();
  }

  _dart_endusershell _endusershell;

  int execvP(
    ffi.Pointer<ffi.Int8> __file,
    ffi.Pointer<ffi.Int8> __searchpath,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ) {
    _execvP ??= _dylib.lookupFunction<_c_execvP, _dart_execvP>('execvP');
    return _execvP(
      __file,
      __searchpath,
      __argv,
    );
  }

  _dart_execvP _execvP;

  ffi.Pointer<ffi.Int8> fflagstostr(
    int arg0,
  ) {
    _fflagstostr ??=
        _dylib.lookupFunction<_c_fflagstostr, _dart_fflagstostr>('fflagstostr');
    return _fflagstostr(
      arg0,
    );
  }

  _dart_fflagstostr _fflagstostr;

  int getdomainname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _getdomainname ??= _dylib
        .lookupFunction<_c_getdomainname, _dart_getdomainname>('getdomainname');
    return _getdomainname(
      arg0,
      arg1,
    );
  }

  _dart_getdomainname _getdomainname;

  int getgrouplist(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
    ffi.Pointer<ffi.Int32> arg3,
  ) {
    _getgrouplist ??= _dylib
        .lookupFunction<_c_getgrouplist, _dart_getgrouplist>('getgrouplist');
    return _getgrouplist(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_getgrouplist _getgrouplist;

  int gethostuuid(
    ffi.Pointer<ffi.Uint8> arg0,
    ffi.Pointer<timespec> arg1,
  ) {
    _gethostuuid ??=
        _dylib.lookupFunction<_c_gethostuuid, _dart_gethostuuid>('gethostuuid');
    return _gethostuuid(
      arg0,
      arg1,
    );
  }

  _dart_gethostuuid _gethostuuid;

  int getmode(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    _getmode ??= _dylib.lookupFunction<_c_getmode, _dart_getmode>('getmode');
    return _getmode(
      arg0,
      arg1,
    );
  }

  _dart_getmode _getmode;

  int getpeereid(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _getpeereid ??=
        _dylib.lookupFunction<_c_getpeereid, _dart_getpeereid>('getpeereid');
    return _getpeereid(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_getpeereid _getpeereid;

  int getsgroups_np(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    _getsgroups_np ??= _dylib
        .lookupFunction<_c_getsgroups_np, _dart_getsgroups_np>('getsgroups_np');
    return _getsgroups_np(
      arg0,
      arg1,
    );
  }

  _dart_getsgroups_np _getsgroups_np;

  ffi.Pointer<ffi.Int8> getusershell() {
    _getusershell ??= _dylib
        .lookupFunction<_c_getusershell, _dart_getusershell>('getusershell');
    return _getusershell();
  }

  _dart_getusershell _getusershell;

  int getwgroups_np(
    ffi.Pointer<ffi.Int32> arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    _getwgroups_np ??= _dylib
        .lookupFunction<_c_getwgroups_np, _dart_getwgroups_np>('getwgroups_np');
    return _getwgroups_np(
      arg0,
      arg1,
    );
  }

  _dart_getwgroups_np _getwgroups_np;

  int initgroups(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _initgroups ??=
        _dylib.lookupFunction<_c_initgroups, _dart_initgroups>('initgroups');
    return _initgroups(
      arg0,
      arg1,
    );
  }

  _dart_initgroups _initgroups;

  int issetugid() {
    _issetugid ??=
        _dylib.lookupFunction<_c_issetugid, _dart_issetugid>('issetugid');
    return _issetugid();
  }

  _dart_issetugid _issetugid;

  ffi.Pointer<ffi.Int8> mkdtemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _mkdtemp ??= _dylib.lookupFunction<_c_mkdtemp, _dart_mkdtemp>('mkdtemp');
    return _mkdtemp(
      arg0,
    );
  }

  _dart_mkdtemp _mkdtemp;

  int mknod(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
  ) {
    _mknod ??= _dylib.lookupFunction<_c_mknod, _dart_mknod>('mknod');
    return _mknod(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_mknod _mknod;

  int mkpath_np(
    ffi.Pointer<ffi.Int8> path,
    int omode,
  ) {
    _mkpath_np ??=
        _dylib.lookupFunction<_c_mkpath_np, _dart_mkpath_np>('mkpath_np');
    return _mkpath_np(
      path,
      omode,
    );
  }

  _dart_mkpath_np _mkpath_np;

  int mkpathat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int omode,
  ) {
    _mkpathat_np ??=
        _dylib.lookupFunction<_c_mkpathat_np, _dart_mkpathat_np>('mkpathat_np');
    return _mkpathat_np(
      dfd,
      path,
      omode,
    );
  }

  _dart_mkpathat_np _mkpathat_np;

  int mkstemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _mkstemp ??= _dylib.lookupFunction<_c_mkstemp, _dart_mkstemp>('mkstemp');
    return _mkstemp(
      arg0,
    );
  }

  _dart_mkstemp _mkstemp;

  int mkstemps(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _mkstemps ??=
        _dylib.lookupFunction<_c_mkstemps, _dart_mkstemps>('mkstemps');
    return _mkstemps(
      arg0,
      arg1,
    );
  }

  _dart_mkstemps _mkstemps;

  ffi.Pointer<ffi.Int8> mktemp(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _mktemp ??= _dylib.lookupFunction<_c_mktemp, _dart_mktemp>('mktemp');
    return _mktemp(
      arg0,
    );
  }

  _dart_mktemp _mktemp;

  int mkostemp(
    ffi.Pointer<ffi.Int8> path,
    int oflags,
  ) {
    _mkostemp ??=
        _dylib.lookupFunction<_c_mkostemp, _dart_mkostemp>('mkostemp');
    return _mkostemp(
      path,
      oflags,
    );
  }

  _dart_mkostemp _mkostemp;

  int mkostemps(
    ffi.Pointer<ffi.Int8> path,
    int slen,
    int oflags,
  ) {
    _mkostemps ??=
        _dylib.lookupFunction<_c_mkostemps, _dart_mkostemps>('mkostemps');
    return _mkostemps(
      path,
      slen,
      oflags,
    );
  }

  _dart_mkostemps _mkostemps;

  int mkstemp_dprotected_np(
    ffi.Pointer<ffi.Int8> path,
    int dpclass,
    int dpflags,
  ) {
    _mkstemp_dprotected_np ??= _dylib.lookupFunction<_c_mkstemp_dprotected_np,
        _dart_mkstemp_dprotected_np>('mkstemp_dprotected_np');
    return _mkstemp_dprotected_np(
      path,
      dpclass,
      dpflags,
    );
  }

  _dart_mkstemp_dprotected_np _mkstemp_dprotected_np;

  ffi.Pointer<ffi.Int8> mkdtempat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
  ) {
    _mkdtempat_np ??= _dylib
        .lookupFunction<_c_mkdtempat_np, _dart_mkdtempat_np>('mkdtempat_np');
    return _mkdtempat_np(
      dfd,
      path,
    );
  }

  _dart_mkdtempat_np _mkdtempat_np;

  int mkstempsat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int slen,
  ) {
    _mkstempsat_np ??= _dylib
        .lookupFunction<_c_mkstempsat_np, _dart_mkstempsat_np>('mkstempsat_np');
    return _mkstempsat_np(
      dfd,
      path,
      slen,
    );
  }

  _dart_mkstempsat_np _mkstempsat_np;

  int mkostempsat_np(
    int dfd,
    ffi.Pointer<ffi.Int8> path,
    int slen,
    int oflags,
  ) {
    _mkostempsat_np ??=
        _dylib.lookupFunction<_c_mkostempsat_np, _dart_mkostempsat_np>(
            'mkostempsat_np');
    return _mkostempsat_np(
      dfd,
      path,
      slen,
      oflags,
    );
  }

  _dart_mkostempsat_np _mkostempsat_np;

  int nfssvc(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    _nfssvc ??= _dylib.lookupFunction<_c_nfssvc, _dart_nfssvc>('nfssvc');
    return _nfssvc(
      arg0,
      arg1,
    );
  }

  _dart_nfssvc _nfssvc;

  int profil(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _profil ??= _dylib.lookupFunction<_c_profil, _dart_profil>('profil');
    return _profil(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_profil _profil;

  int pthread_setugid_np(
    int arg0,
    int arg1,
  ) {
    _pthread_setugid_np ??=
        _dylib.lookupFunction<_c_pthread_setugid_np, _dart_pthread_setugid_np>(
            'pthread_setugid_np');
    return _pthread_setugid_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_setugid_np _pthread_setugid_np;

  int pthread_getugid_np(
    ffi.Pointer<ffi.Uint32> arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    _pthread_getugid_np ??=
        _dylib.lookupFunction<_c_pthread_getugid_np, _dart_pthread_getugid_np>(
            'pthread_getugid_np');
    return _pthread_getugid_np(
      arg0,
      arg1,
    );
  }

  _dart_pthread_getugid_np _pthread_getugid_np;

  int reboot(
    int arg0,
  ) {
    _reboot ??= _dylib.lookupFunction<_c_reboot, _dart_reboot>('reboot');
    return _reboot(
      arg0,
    );
  }

  _dart_reboot _reboot;

  int revoke(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _revoke ??= _dylib.lookupFunction<_c_revoke, _dart_revoke>('revoke');
    return _revoke(
      arg0,
    );
  }

  _dart_revoke _revoke;

  int rcmd(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Int32> arg5,
  ) {
    _rcmd ??= _dylib.lookupFunction<_c_rcmd, _dart_rcmd>('rcmd');
    return _rcmd(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_rcmd _rcmd;

  int rcmd_af(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<ffi.Int32> arg5,
    int arg6,
  ) {
    _rcmd_af ??= _dylib.lookupFunction<_c_rcmd_af, _dart_rcmd_af>('rcmd_af');
    return _rcmd_af(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  _dart_rcmd_af _rcmd_af;

  int rresvport(
    ffi.Pointer<ffi.Int32> arg0,
  ) {
    _rresvport ??=
        _dylib.lookupFunction<_c_rresvport, _dart_rresvport>('rresvport');
    return _rresvport(
      arg0,
    );
  }

  _dart_rresvport _rresvport;

  int rresvport_af(
    ffi.Pointer<ffi.Int32> arg0,
    int arg1,
  ) {
    _rresvport_af ??= _dylib
        .lookupFunction<_c_rresvport_af, _dart_rresvport_af>('rresvport_af');
    return _rresvport_af(
      arg0,
      arg1,
    );
  }

  _dart_rresvport_af _rresvport_af;

  int iruserok(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _iruserok ??=
        _dylib.lookupFunction<_c_iruserok, _dart_iruserok>('iruserok');
    return _iruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_iruserok _iruserok;

  int iruserok_sa(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    _iruserok_sa ??=
        _dylib.lookupFunction<_c_iruserok_sa, _dart_iruserok_sa>('iruserok_sa');
    return _iruserok_sa(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_iruserok_sa _iruserok_sa;

  int ruserok(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Int8> arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _ruserok ??= _dylib.lookupFunction<_c_ruserok, _dart_ruserok>('ruserok');
    return _ruserok(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ruserok _ruserok;

  int setdomainname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _setdomainname ??= _dylib
        .lookupFunction<_c_setdomainname, _dart_setdomainname>('setdomainname');
    return _setdomainname(
      arg0,
      arg1,
    );
  }

  _dart_setdomainname _setdomainname;

  int setgroups(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
  ) {
    _setgroups ??=
        _dylib.lookupFunction<_c_setgroups, _dart_setgroups>('setgroups');
    return _setgroups(
      arg0,
      arg1,
    );
  }

  _dart_setgroups _setgroups;

  void sethostid(
    int arg0,
  ) {
    _sethostid ??=
        _dylib.lookupFunction<_c_sethostid, _dart_sethostid>('sethostid');
    return _sethostid(
      arg0,
    );
  }

  _dart_sethostid _sethostid;

  int sethostname(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _sethostname ??=
        _dylib.lookupFunction<_c_sethostname, _dart_sethostname>('sethostname');
    return _sethostname(
      arg0,
      arg1,
    );
  }

  _dart_sethostname _sethostname;

  void setkey(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setkey ??= _dylib.lookupFunction<_c_setkey, _dart_setkey>('setkey');
    return _setkey(
      arg0,
    );
  }

  _dart_setkey _setkey;

  int setlogin(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setlogin ??=
        _dylib.lookupFunction<_c_setlogin, _dart_setlogin>('setlogin');
    return _setlogin(
      arg0,
    );
  }

  _dart_setlogin _setlogin;

  ffi.Pointer<ffi.Void> setmode(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _setmode ??= _dylib.lookupFunction<_c_setmode, _dart_setmode>('setmode');
    return _setmode(
      arg0,
    );
  }

  _dart_setmode _setmode;

  int setrgid(
    int arg0,
  ) {
    _setrgid ??= _dylib.lookupFunction<_c_setrgid, _dart_setrgid>('setrgid');
    return _setrgid(
      arg0,
    );
  }

  _dart_setrgid _setrgid;

  int setruid(
    int arg0,
  ) {
    _setruid ??= _dylib.lookupFunction<_c_setruid, _dart_setruid>('setruid');
    return _setruid(
      arg0,
    );
  }

  _dart_setruid _setruid;

  int setsgroups_np(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    _setsgroups_np ??= _dylib
        .lookupFunction<_c_setsgroups_np, _dart_setsgroups_np>('setsgroups_np');
    return _setsgroups_np(
      arg0,
      arg1,
    );
  }

  _dart_setsgroups_np _setsgroups_np;

  void setusershell() {
    _setusershell ??= _dylib
        .lookupFunction<_c_setusershell, _dart_setusershell>('setusershell');
    return _setusershell();
  }

  _dart_setusershell _setusershell;

  int setwgroups_np(
    int arg0,
    ffi.Pointer<ffi.Uint8> arg1,
  ) {
    _setwgroups_np ??= _dylib
        .lookupFunction<_c_setwgroups_np, _dart_setwgroups_np>('setwgroups_np');
    return _setwgroups_np(
      arg0,
      arg1,
    );
  }

  _dart_setwgroups_np _setwgroups_np;

  int strtofflags(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
  ) {
    _strtofflags ??=
        _dylib.lookupFunction<_c_strtofflags, _dart_strtofflags>('strtofflags');
    return _strtofflags(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_strtofflags _strtofflags;

  int swapon(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _swapon ??= _dylib.lookupFunction<_c_swapon, _dart_swapon>('swapon');
    return _swapon(
      arg0,
    );
  }

  _dart_swapon _swapon;

  int ttyslot() {
    _ttyslot ??= _dylib.lookupFunction<_c_ttyslot, _dart_ttyslot>('ttyslot');
    return _ttyslot();
  }

  _dart_ttyslot _ttyslot;

  int undelete(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _undelete ??=
        _dylib.lookupFunction<_c_undelete, _dart_undelete>('undelete');
    return _undelete(
      arg0,
    );
  }

  _dart_undelete _undelete;

  int unwhiteout(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _unwhiteout ??=
        _dylib.lookupFunction<_c_unwhiteout, _dart_unwhiteout>('unwhiteout');
    return _unwhiteout(
      arg0,
    );
  }

  _dart_unwhiteout _unwhiteout;

  ffi.Pointer<ffi.Void> valloc(
    int arg0,
  ) {
    _valloc ??= _dylib.lookupFunction<_c_valloc, _dart_valloc>('valloc');
    return _valloc(
      arg0,
    );
  }

  _dart_valloc _valloc;

  int syscall(
    int arg0,
  ) {
    _syscall ??= _dylib.lookupFunction<_c_syscall, _dart_syscall>('syscall');
    return _syscall(
      arg0,
    );
  }

  _dart_syscall _syscall;

  int getsubopt(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
  ) {
    _getsubopt ??=
        _dylib.lookupFunction<_c_getsubopt, _dart_getsubopt>('getsubopt');
    return _getsubopt(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_getsubopt _getsubopt;

  int fgetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    _fgetattrlist ??= _dylib
        .lookupFunction<_c_fgetattrlist, _dart_fgetattrlist>('fgetattrlist');
    return _fgetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_fgetattrlist _fgetattrlist;

  int fsetattrlist(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    _fsetattrlist ??= _dylib
        .lookupFunction<_c_fsetattrlist, _dart_fsetattrlist>('fsetattrlist');
    return _fsetattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_fsetattrlist _fsetattrlist;

  int getattrlist(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    _getattrlist ??=
        _dylib.lookupFunction<_c_getattrlist, _dart_getattrlist>('getattrlist');
    return _getattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_getattrlist _getattrlist;

  int setattrlist(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    int arg4,
  ) {
    _setattrlist ??=
        _dylib.lookupFunction<_c_setattrlist, _dart_setattrlist>('setattrlist');
    return _setattrlist(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_setattrlist _setattrlist;

  int exchangedata(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _exchangedata ??= _dylib
        .lookupFunction<_c_exchangedata, _dart_exchangedata>('exchangedata');
    return _exchangedata(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_exchangedata _exchangedata;

  int getdirentriesattr(
    int arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ffi.Uint32> arg4,
    ffi.Pointer<ffi.Uint32> arg5,
    ffi.Pointer<ffi.Uint32> arg6,
    int arg7,
  ) {
    _getdirentriesattr ??=
        _dylib.lookupFunction<_c_getdirentriesattr, _dart_getdirentriesattr>(
            'getdirentriesattr');
    return _getdirentriesattr(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  _dart_getdirentriesattr _getdirentriesattr;

  int searchfs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<fssearchblock> arg1,
    ffi.Pointer<ffi.Uint64> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<searchstate> arg5,
  ) {
    _searchfs ??=
        _dylib.lookupFunction<_c_searchfs, _dart_searchfs>('searchfs');
    return _searchfs(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart_searchfs _searchfs;

  int fsctl(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    _fsctl ??= _dylib.lookupFunction<_c_fsctl, _dart_fsctl>('fsctl');
    return _fsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_fsctl _fsctl;

  int ffsctl(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    _ffsctl ??= _dylib.lookupFunction<_c_ffsctl, _dart_ffsctl>('ffsctl');
    return _ffsctl(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_ffsctl _ffsctl;

  int fsync_volume_np(
    int arg0,
    int arg1,
  ) {
    _fsync_volume_np ??=
        _dylib.lookupFunction<_c_fsync_volume_np, _dart_fsync_volume_np>(
            'fsync_volume_np');
    return _fsync_volume_np(
      arg0,
      arg1,
    );
  }

  _dart_fsync_volume_np _fsync_volume_np;

  int sync_volume_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _sync_volume_np ??=
        _dylib.lookupFunction<_c_sync_volume_np, _dart_sync_volume_np>(
            'sync_volume_np');
    return _sync_volume_np(
      arg0,
      arg1,
    );
  }

  _dart_sync_volume_np _sync_volume_np;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class accessx_descriptor extends ffi.Struct {}

class fd_set extends ffi.Struct {}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int32()
  int tv_usec;
}

class fssearchblock extends ffi.Struct {}

class searchstate extends ffi.Struct {}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

// const String __DARWIN_SUF_64_BIT_INO_T = '$INODE64';

// const String __DARWIN_SUF_1050 = '$1050';

// const String __DARWIN_SUF_EXTSN = '$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int _POSIX_VERSION = 200112;

const int _POSIX2_VERSION = 200112;

const int _POSIX_VDISABLE = 255;

const int _POSIX_THREAD_KEYS_MAX = 128;

const int F_OK = 0;

const int X_OK = 1;

const int W_OK = 2;

const int R_OK = 4;

const int _READ_OK = 512;

const int _WRITE_OK = 1024;

const int _EXECUTE_OK = 2048;

const int _DELETE_OK = 4096;

const int _APPEND_OK = 8192;

const int _RMFILE_OK = 16384;

const int _RATTR_OK = 32768;

const int _WATTR_OK = 65536;

const int _REXT_OK = 131072;

const int _WEXT_OK = 262144;

const int _RPERM_OK = 524288;

const int _WPERM_OK = 1048576;

const int _CHOWN_OK = 2097152;

const int _ACCESS_EXTENDED_MASK = 4193792;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int L_SET = 0;

const int L_INCR = 1;

const int L_XTND = 2;

const int ACCESSX_MAX_DESCRIPTORS = 100;

const int ACCESSX_MAX_TABLESIZE = 16384;

const int _PC_LINK_MAX = 1;

const int _PC_MAX_CANON = 2;

const int _PC_MAX_INPUT = 3;

const int _PC_NAME_MAX = 4;

const int _PC_PATH_MAX = 5;

const int _PC_PIPE_BUF = 6;

const int _PC_CHOWN_RESTRICTED = 7;

const int _PC_NO_TRUNC = 8;

const int _PC_VDISABLE = 9;

const int _PC_NAME_CHARS_MAX = 10;

const int _PC_CASE_SENSITIVE = 11;

const int _PC_CASE_PRESERVING = 12;

const int _PC_EXTENDED_SECURITY_NP = 13;

const int _PC_AUTH_OPAQUE_NP = 14;

const int _PC_2_SYMLINKS = 15;

const int _PC_ALLOC_SIZE_MIN = 16;

const int _PC_ASYNC_IO = 17;

const int _PC_FILESIZEBITS = 18;

const int _PC_PRIO_IO = 19;

const int _PC_REC_INCR_XFER_SIZE = 20;

const int _PC_REC_MAX_XFER_SIZE = 21;

const int _PC_REC_MIN_XFER_SIZE = 22;

const int _PC_REC_XFER_ALIGN = 23;

const int _PC_SYMLINK_MAX = 24;

const int _PC_SYNC_IO = 25;

const int _PC_XATTR_SIZE_BITS = 26;

const int _PC_MIN_HOLE_SIZE = 27;

const int _CS_PATH = 1;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int STDIN_FILENO = 0;

const int STDOUT_FILENO = 1;

const int STDERR_FILENO = 2;

const int _XOPEN_VERSION = 600;

const int _XOPEN_XCU_VERSION = 4;

const int _POSIX_ADVISORY_INFO = -1;

const int _POSIX_ASYNCHRONOUS_IO = -1;

const int _POSIX_BARRIERS = -1;

const int _POSIX_CHOWN_RESTRICTED = 200112;

const int _POSIX_CLOCK_SELECTION = -1;

const int _POSIX_CPUTIME = -1;

const int _POSIX_FSYNC = 200112;

const int _POSIX_IPV6 = 200112;

const int _POSIX_JOB_CONTROL = 200112;

const int _POSIX_MAPPED_FILES = 200112;

const int _POSIX_MEMLOCK = -1;

const int _POSIX_MEMLOCK_RANGE = -1;

const int _POSIX_MEMORY_PROTECTION = 200112;

const int _POSIX_MESSAGE_PASSING = -1;

const int _POSIX_MONOTONIC_CLOCK = -1;

const int _POSIX_NO_TRUNC = 200112;

const int _POSIX_PRIORITIZED_IO = -1;

const int _POSIX_PRIORITY_SCHEDULING = -1;

const int _POSIX_RAW_SOCKETS = -1;

const int _POSIX_READER_WRITER_LOCKS = 200112;

const int _POSIX_REALTIME_SIGNALS = -1;

const int _POSIX_REGEXP = 200112;

const int _POSIX_SAVED_IDS = 200112;

const int _POSIX_SEMAPHORES = -1;

const int _POSIX_SHARED_MEMORY_OBJECTS = -1;

const int _POSIX_SHELL = 200112;

const int _POSIX_SPAWN = -1;

const int _POSIX_SPIN_LOCKS = -1;

const int _POSIX_SPORADIC_SERVER = -1;

const int _POSIX_SYNCHRONIZED_IO = -1;

const int _POSIX_THREAD_ATTR_STACKADDR = 200112;

const int _POSIX_THREAD_ATTR_STACKSIZE = 200112;

const int _POSIX_THREAD_CPUTIME = -1;

const int _POSIX_THREAD_PRIO_INHERIT = -1;

const int _POSIX_THREAD_PRIO_PROTECT = -1;

const int _POSIX_THREAD_PRIORITY_SCHEDULING = -1;

const int _POSIX_THREAD_PROCESS_SHARED = 200112;

const int _POSIX_THREAD_SAFE_FUNCTIONS = 200112;

const int _POSIX_THREAD_SPORADIC_SERVER = -1;

const int _POSIX_THREADS = 200112;

const int _POSIX_TIMEOUTS = -1;

const int _POSIX_TIMERS = -1;

const int _POSIX_TRACE = -1;

const int _POSIX_TRACE_EVENT_FILTER = -1;

const int _POSIX_TRACE_INHERIT = -1;

const int _POSIX_TRACE_LOG = -1;

const int _POSIX_TYPED_MEMORY_OBJECTS = -1;

const int _POSIX2_C_BIND = 200112;

const int _POSIX2_C_DEV = 200112;

const int _POSIX2_CHAR_TERM = 200112;

const int _POSIX2_FORT_DEV = -1;

const int _POSIX2_FORT_RUN = 200112;

const int _POSIX2_LOCALEDEF = 200112;

const int _POSIX2_PBS = -1;

const int _POSIX2_PBS_ACCOUNTING = -1;

const int _POSIX2_PBS_CHECKPOINT = -1;

const int _POSIX2_PBS_LOCATE = -1;

const int _POSIX2_PBS_MESSAGE = -1;

const int _POSIX2_PBS_TRACK = -1;

const int _POSIX2_SW_DEV = 200112;

const int _POSIX2_UPE = 200112;

const int __ILP32_OFF32 = -1;

const int __ILP32_OFFBIG = -1;

const int __LP64_OFF64 = 1;

const int __LPBIG_OFFBIG = 1;

const int _POSIX_V6_ILP32_OFF32 = -1;

const int _POSIX_V6_ILP32_OFFBIG = -1;

const int _POSIX_V6_LP64_OFF64 = 1;

const int _POSIX_V6_LPBIG_OFFBIG = 1;

const int _POSIX_V7_ILP32_OFF32 = -1;

const int _POSIX_V7_ILP32_OFFBIG = -1;

const int _POSIX_V7_LP64_OFF64 = 1;

const int _POSIX_V7_LPBIG_OFFBIG = 1;

const int _V6_ILP32_OFF32 = -1;

const int _V6_ILP32_OFFBIG = -1;

const int _V6_LP64_OFF64 = 1;

const int _V6_LPBIG_OFFBIG = 1;

const int _XBS5_ILP32_OFF32 = -1;

const int _XBS5_ILP32_OFFBIG = -1;

const int _XBS5_LP64_OFF64 = 1;

const int _XBS5_LPBIG_OFFBIG = 1;

const int _XOPEN_CRYPT = 1;

const int _XOPEN_ENH_I18N = 1;

const int _XOPEN_LEGACY = -1;

const int _XOPEN_REALTIME = -1;

const int _XOPEN_REALTIME_THREADS = -1;

const int _XOPEN_SHM = 1;

const int _XOPEN_STREAMS = -1;

const int _XOPEN_UNIX = 1;

const int _SC_ARG_MAX = 1;

const int _SC_CHILD_MAX = 2;

const int _SC_CLK_TCK = 3;

const int _SC_NGROUPS_MAX = 4;

const int _SC_OPEN_MAX = 5;

const int _SC_JOB_CONTROL = 6;

const int _SC_SAVED_IDS = 7;

const int _SC_VERSION = 8;

const int _SC_BC_BASE_MAX = 9;

const int _SC_BC_DIM_MAX = 10;

const int _SC_BC_SCALE_MAX = 11;

const int _SC_BC_STRING_MAX = 12;

const int _SC_COLL_WEIGHTS_MAX = 13;

const int _SC_EXPR_NEST_MAX = 14;

const int _SC_LINE_MAX = 15;

const int _SC_RE_DUP_MAX = 16;

const int _SC_2_VERSION = 17;

const int _SC_2_C_BIND = 18;

const int _SC_2_C_DEV = 19;

const int _SC_2_CHAR_TERM = 20;

const int _SC_2_FORT_DEV = 21;

const int _SC_2_FORT_RUN = 22;

const int _SC_2_LOCALEDEF = 23;

const int _SC_2_SW_DEV = 24;

const int _SC_2_UPE = 25;

const int _SC_STREAM_MAX = 26;

const int _SC_TZNAME_MAX = 27;

const int _SC_ASYNCHRONOUS_IO = 28;

const int _SC_PAGESIZE = 29;

const int _SC_MEMLOCK = 30;

const int _SC_MEMLOCK_RANGE = 31;

const int _SC_MEMORY_PROTECTION = 32;

const int _SC_MESSAGE_PASSING = 33;

const int _SC_PRIORITIZED_IO = 34;

const int _SC_PRIORITY_SCHEDULING = 35;

const int _SC_REALTIME_SIGNALS = 36;

const int _SC_SEMAPHORES = 37;

const int _SC_FSYNC = 38;

const int _SC_SHARED_MEMORY_OBJECTS = 39;

const int _SC_SYNCHRONIZED_IO = 40;

const int _SC_TIMERS = 41;

const int _SC_AIO_LISTIO_MAX = 42;

const int _SC_AIO_MAX = 43;

const int _SC_AIO_PRIO_DELTA_MAX = 44;

const int _SC_DELAYTIMER_MAX = 45;

const int _SC_MQ_OPEN_MAX = 46;

const int _SC_MAPPED_FILES = 47;

const int _SC_RTSIG_MAX = 48;

const int _SC_SEM_NSEMS_MAX = 49;

const int _SC_SEM_VALUE_MAX = 50;

const int _SC_SIGQUEUE_MAX = 51;

const int _SC_TIMER_MAX = 52;

const int _SC_NPROCESSORS_CONF = 57;

const int _SC_NPROCESSORS_ONLN = 58;

const int _SC_2_PBS = 59;

const int _SC_2_PBS_ACCOUNTING = 60;

const int _SC_2_PBS_CHECKPOINT = 61;

const int _SC_2_PBS_LOCATE = 62;

const int _SC_2_PBS_MESSAGE = 63;

const int _SC_2_PBS_TRACK = 64;

const int _SC_ADVISORY_INFO = 65;

const int _SC_BARRIERS = 66;

const int _SC_CLOCK_SELECTION = 67;

const int _SC_CPUTIME = 68;

const int _SC_FILE_LOCKING = 69;

const int _SC_GETGR_R_SIZE_MAX = 70;

const int _SC_GETPW_R_SIZE_MAX = 71;

const int _SC_HOST_NAME_MAX = 72;

const int _SC_LOGIN_NAME_MAX = 73;

const int _SC_MONOTONIC_CLOCK = 74;

const int _SC_MQ_PRIO_MAX = 75;

const int _SC_READER_WRITER_LOCKS = 76;

const int _SC_REGEXP = 77;

const int _SC_SHELL = 78;

const int _SC_SPAWN = 79;

const int _SC_SPIN_LOCKS = 80;

const int _SC_SPORADIC_SERVER = 81;

const int _SC_THREAD_ATTR_STACKADDR = 82;

const int _SC_THREAD_ATTR_STACKSIZE = 83;

const int _SC_THREAD_CPUTIME = 84;

const int _SC_THREAD_DESTRUCTOR_ITERATIONS = 85;

const int _SC_THREAD_KEYS_MAX = 86;

const int _SC_THREAD_PRIO_INHERIT = 87;

const int _SC_THREAD_PRIO_PROTECT = 88;

const int _SC_THREAD_PRIORITY_SCHEDULING = 89;

const int _SC_THREAD_PROCESS_SHARED = 90;

const int _SC_THREAD_SAFE_FUNCTIONS = 91;

const int _SC_THREAD_SPORADIC_SERVER = 92;

const int _SC_THREAD_STACK_MIN = 93;

const int _SC_THREAD_THREADS_MAX = 94;

const int _SC_TIMEOUTS = 95;

const int _SC_THREADS = 96;

const int _SC_TRACE = 97;

const int _SC_TRACE_EVENT_FILTER = 98;

const int _SC_TRACE_INHERIT = 99;

const int _SC_TRACE_LOG = 100;

const int _SC_TTY_NAME_MAX = 101;

const int _SC_TYPED_MEMORY_OBJECTS = 102;

const int _SC_V6_ILP32_OFF32 = 103;

const int _SC_V6_ILP32_OFFBIG = 104;

const int _SC_V6_LP64_OFF64 = 105;

const int _SC_V6_LPBIG_OFFBIG = 106;

const int _SC_IPV6 = 118;

const int _SC_RAW_SOCKETS = 119;

const int _SC_SYMLOOP_MAX = 120;

const int _SC_ATEXIT_MAX = 107;

const int _SC_IOV_MAX = 56;

const int _SC_PAGE_SIZE = 29;

const int _SC_XOPEN_CRYPT = 108;

const int _SC_XOPEN_ENH_I18N = 109;

const int _SC_XOPEN_LEGACY = 110;

const int _SC_XOPEN_REALTIME = 111;

const int _SC_XOPEN_REALTIME_THREADS = 112;

const int _SC_XOPEN_SHM = 113;

const int _SC_XOPEN_STREAMS = 114;

const int _SC_XOPEN_UNIX = 115;

const int _SC_XOPEN_VERSION = 116;

const int _SC_XOPEN_XCU_VERSION = 121;

const int _SC_XBS5_ILP32_OFF32 = 122;

const int _SC_XBS5_ILP32_OFFBIG = 123;

const int _SC_XBS5_LP64_OFF64 = 124;

const int _SC_XBS5_LPBIG_OFFBIG = 125;

const int _SC_SS_REPL_MAX = 126;

const int _SC_TRACE_EVENT_NAME_MAX = 127;

const int _SC_TRACE_NAME_MAX = 128;

const int _SC_TRACE_SYS_MAX = 129;

const int _SC_TRACE_USER_EVENT_MAX = 130;

const int _SC_PASS_MAX = 131;

const int _SC_PHYS_PAGES = 200;

const int _CS_POSIX_V6_ILP32_OFF32_CFLAGS = 2;

const int _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = 3;

const int _CS_POSIX_V6_ILP32_OFF32_LIBS = 4;

const int _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = 5;

const int _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = 6;

const int _CS_POSIX_V6_ILP32_OFFBIG_LIBS = 7;

const int _CS_POSIX_V6_LP64_OFF64_CFLAGS = 8;

const int _CS_POSIX_V6_LP64_OFF64_LDFLAGS = 9;

const int _CS_POSIX_V6_LP64_OFF64_LIBS = 10;

const int _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = 11;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = 12;

const int _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = 13;

const int _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = 14;

const int _CS_XBS5_ILP32_OFF32_CFLAGS = 20;

const int _CS_XBS5_ILP32_OFF32_LDFLAGS = 21;

const int _CS_XBS5_ILP32_OFF32_LIBS = 22;

const int _CS_XBS5_ILP32_OFF32_LINTFLAGS = 23;

const int _CS_XBS5_ILP32_OFFBIG_CFLAGS = 24;

const int _CS_XBS5_ILP32_OFFBIG_LDFLAGS = 25;

const int _CS_XBS5_ILP32_OFFBIG_LIBS = 26;

const int _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = 27;

const int _CS_XBS5_LP64_OFF64_CFLAGS = 28;

const int _CS_XBS5_LP64_OFF64_LDFLAGS = 29;

const int _CS_XBS5_LP64_OFF64_LIBS = 30;

const int _CS_XBS5_LP64_OFF64_LINTFLAGS = 31;

const int _CS_XBS5_LPBIG_OFFBIG_CFLAGS = 32;

const int _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = 33;

const int _CS_XBS5_LPBIG_OFFBIG_LIBS = 34;

const int _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = 35;

const int _CS_DARWIN_USER_DIR = 65536;

const int _CS_DARWIN_USER_TEMP_DIR = 65537;

const int _CS_DARWIN_USER_CACHE_DIR = 65538;

const int F_ULOCK = 0;

const int F_LOCK = 1;

const int F_TLOCK = 2;

const int F_TEST = 3;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int SYNC_VOLUME_FULLSYNC = 1;

const int SYNC_VOLUME_WAIT = 2;

typedef _c_getattrlistbulk = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint64 arg4,
);

typedef _dart_getattrlistbulk = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_getattrlistat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Uint64 arg4,
  ffi.Uint64 arg5,
);

typedef _dart_getattrlistat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  int arg4,
  int arg5,
);

typedef _c_setattrlistat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  ffi.Uint64 arg4,
  ffi.Uint32 arg5,
);

typedef _dart_setattrlistat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Pointer<ffi.Void> arg3,
  int arg4,
  int arg5,
);

typedef _c_faccessat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_faccessat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_fchownat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
  ffi.Uint32 arg3,
  ffi.Int32 arg4,
);

typedef _dart_fchownat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
  int arg4,
);

typedef _c_linkat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Int32 arg4,
);

typedef _dart_linkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_readlinkat = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Uint64 arg3,
);

typedef _dart_readlinkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<ffi.Int8> arg2,
  int arg3,
);

typedef _c_symlinkat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_symlinkat = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_unlinkat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_unlinkat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c__exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__exit = void Function(
  int arg0,
);

typedef _c_access = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_access = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_alarm = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_alarm = int Function(
  int arg0,
);

typedef _c_chdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_chdir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_chown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_chown = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_close = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_close = int Function(
  int arg0,
);

typedef _c_dup = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_dup = int Function(
  int arg0,
);

typedef _c_dup2 = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_dup2 = int Function(
  int arg0,
  int arg1,
);

typedef _c_execl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execl = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execle = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execle = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execlp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _dart_execlp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __arg0,
);

typedef _c_execv = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execv = int Function(
  ffi.Pointer<ffi.Int8> __path,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_execve = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _dart_execve = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __envp,
);

typedef _c_execvp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvp = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_fork = ffi.Int32 Function();

typedef _dart_fork = int Function();

typedef _c_fpathconf = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_fpathconf = int Function(
  int arg0,
  int arg1,
);

typedef _c_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_getcwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_getegid = ffi.Uint32 Function();

typedef _dart_getegid = int Function();

typedef _c_geteuid = ffi.Uint32 Function();

typedef _dart_geteuid = int Function();

typedef _c_getgid = ffi.Uint32 Function();

typedef _dart_getgid = int Function();

typedef _c_getgroups = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_getgroups = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getlogin = ffi.Pointer<ffi.Int8> Function();

typedef _c_getpgrp = ffi.Int32 Function();

typedef _dart_getpgrp = int Function();

typedef _c_getpid = ffi.Int32 Function();

typedef _dart_getpid = int Function();

typedef _c_getppid = ffi.Int32 Function();

typedef _dart_getppid = int Function();

typedef _c_getuid = ffi.Uint32 Function();

typedef _dart_getuid = int Function();

typedef _c_isatty = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_isatty = int Function(
  int arg0,
);

typedef _c_link = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_link = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_lseek = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_lseek = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_pathconf = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pathconf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_pause = ffi.Int32 Function();

typedef _dart_pause = int Function();

typedef _c_pipe = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_pipe = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_read = ffi.Int64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_read = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_rmdir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_rmdir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setgid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setgid = int Function(
  int arg0,
);

typedef _c_setpgid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_setpgid = int Function(
  int arg0,
  int arg1,
);

typedef _c_setsid = ffi.Int32 Function();

typedef _dart_setsid = int Function();

typedef _c_setuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setuid = int Function(
  int arg0,
);

typedef _c_sleep = ffi.Uint32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_sleep = int Function(
  int arg0,
);

typedef _c_sysconf = ffi.Int64 Function(
  ffi.Int32 arg0,
);

typedef _dart_sysconf = int Function(
  int arg0,
);

typedef _c_tcgetpgrp = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_tcgetpgrp = int Function(
  int arg0,
);

typedef _c_tcsetpgrp = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_tcsetpgrp = int Function(
  int arg0,
  int arg1,
);

typedef _c_ttyname = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 arg0,
);

typedef _dart_ttyname = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_ttyname_r = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_ttyname_r = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_unlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_write = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
);

typedef _dart_write = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
);

typedef _c_confstr = ffi.Uint64 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_confstr = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_getopt = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _dart_getopt = int Function(
  int arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Int8> arg2,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_brk = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _dart_brk = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> arg0,
);

typedef _c_chroot = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_chroot = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_crypt = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_encrypt = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_encrypt = void Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fchdir = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fchdir = int Function(
  int arg0,
);

typedef _c_gethostid = ffi.Int64 Function();

typedef _dart_gethostid = int Function();

typedef _c_getpgid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_getpgid = int Function(
  int arg0,
);

typedef _c_getsid = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_getsid = int Function(
  int arg0,
);

typedef _c_getdtablesize = ffi.Int32 Function();

typedef _dart_getdtablesize = int Function();

typedef _c_getpagesize = ffi.Int32 Function();

typedef _dart_getpagesize = int Function();

typedef _c_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getpass = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_getwd = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_lchown = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_lchown = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_lockf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
  ffi.Int64 arg2,
);

typedef _dart_lockf = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_nice = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_nice = int Function(
  int arg0,
);

typedef _c_pread = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
  ffi.Int64 __offset,
);

typedef _dart_pread = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
  int __offset,
);

typedef _c_pwrite = ffi.Int64 Function(
  ffi.Int32 __fd,
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __nbyte,
  ffi.Int64 __offset,
);

typedef _dart_pwrite = int Function(
  int __fd,
  ffi.Pointer<ffi.Void> __buf,
  int __nbyte,
  int __offset,
);

typedef _c_sbrk = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 arg0,
);

typedef _dart_sbrk = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_setpgrp = ffi.Int32 Function();

typedef _dart_setpgrp = int Function();

typedef _c_setregid = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_setregid = int Function(
  int arg0,
  int arg1,
);

typedef _c_setreuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_setreuid = int Function(
  int arg0,
  int arg1,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int64 arg2,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_sync_1 = ffi.Void Function();

typedef _dart_sync_1 = void Function();

typedef _c_truncate = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int64 arg1,
);

typedef _dart_truncate = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ualarm = ffi.Uint32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_ualarm = int Function(
  int arg0,
  int arg1,
);

typedef _c_usleep = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_usleep = int Function(
  int arg0,
);

typedef _c_vfork = ffi.Int32 Function();

typedef _dart_vfork = int Function();

typedef _c_fsync = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fsync = int Function(
  int arg0,
);

typedef _c_ftruncate = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int64 arg1,
);

typedef _dart_ftruncate = int Function(
  int arg0,
  int arg1,
);

typedef _c_getlogin_r = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_getlogin_r = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fchown = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint32 arg1,
  ffi.Uint32 arg2,
);

typedef _dart_fchown = int Function(
  int arg0,
  int arg1,
  int arg2,
);

typedef _c_gethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_gethostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_readlink = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_readlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_setegid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setegid = int Function(
  int arg0,
);

typedef _c_seteuid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_seteuid = int Function(
  int arg0,
);

typedef _c_symlink = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_symlink = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c___darwin_check_fd_set_overflow = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int32 arg2,
);

typedef _dart___darwin_check_fd_set_overflow = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c___darwin_check_fd_set = ffi.Int32 Function(
  ffi.Int32 _a,
  ffi.Pointer<ffi.Void> _b,
);

typedef _dart___darwin_check_fd_set = int Function(
  int _a,
  ffi.Pointer<ffi.Void> _b,
);

typedef _c___darwin_fd_isset = ffi.Int32 Function(
  ffi.Int32 _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _dart___darwin_fd_isset = int Function(
  int _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _c___darwin_fd_set = ffi.Void Function(
  ffi.Int32 _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _dart___darwin_fd_set = void Function(
  int _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _c___darwin_fd_clr = ffi.Void Function(
  ffi.Int32 _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _dart___darwin_fd_clr = void Function(
  int _fd,
  ffi.Pointer<fd_set> _p,
);

typedef _c_pselect = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timespec> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _dart_pselect = int Function(
  int arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timespec> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
);

typedef _c_select = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timeval> arg4,
);

typedef _dart_select = int Function(
  int arg0,
  ffi.Pointer<fd_set> arg1,
  ffi.Pointer<fd_set> arg2,
  ffi.Pointer<fd_set> arg3,
  ffi.Pointer<timeval> arg4,
);

typedef _c__Exit = ffi.Void Function(
  ffi.Int32 arg0,
);

typedef _dart__Exit = void Function(
  int arg0,
);

typedef _c_accessx_np = ffi.Int32 Function(
  ffi.Pointer<accessx_descriptor> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_accessx_np = int Function(
  ffi.Pointer<accessx_descriptor> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  int arg3,
);

typedef _c_acct = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_acct = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_add_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_add_profil = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_endusershell = ffi.Void Function();

typedef _dart_endusershell = void Function();

typedef _c_execvP = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __searchpath,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _dart_execvP = int Function(
  ffi.Pointer<ffi.Int8> __file,
  ffi.Pointer<ffi.Int8> __searchpath,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __argv,
);

typedef _c_fflagstostr = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint64 arg0,
);

typedef _dart_fflagstostr = ffi.Pointer<ffi.Int8> Function(
  int arg0,
);

typedef _c_getdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_getdomainname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_getgrouplist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _dart_getgrouplist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
  ffi.Pointer<ffi.Int32> arg3,
);

typedef _c_gethostuuid = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<timespec> arg1,
);

typedef _dart_gethostuuid = int Function(
  ffi.Pointer<ffi.Uint8> arg0,
  ffi.Pointer<timespec> arg1,
);

typedef _c_getmode = ffi.Uint16 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint16 arg1,
);

typedef _dart_getmode = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_getpeereid = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_getpeereid = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_getsgroups_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_getsgroups_np = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _dart_getusershell = ffi.Pointer<ffi.Int8> Function();

typedef _c_getwgroups_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_getwgroups_np = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_initgroups = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_initgroups = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_issetugid = ffi.Int32 Function();

typedef _dart_issetugid = int Function();

typedef _c_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkdtemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mknod = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint16 arg1,
  ffi.Int32 arg2,
);

typedef _dart_mknod = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
);

typedef _c_mkpath_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Uint16 omode,
);

typedef _dart_mkpath_np = int Function(
  ffi.Pointer<ffi.Int8> path,
  int omode,
);

typedef _c_mkpathat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Uint16 omode,
);

typedef _dart_mkpathat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int omode,
);

typedef _c_mkstemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mkstemp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkstemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_mkstemps = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_mktemp = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_mkostemp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 oflags,
);

typedef _dart_mkostemp = int Function(
  ffi.Pointer<ffi.Int8> path,
  int oflags,
);

typedef _c_mkostemps = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
  ffi.Int32 oflags,
);

typedef _dart_mkostemps = int Function(
  ffi.Pointer<ffi.Int8> path,
  int slen,
  int oflags,
);

typedef _c_mkstemp_dprotected_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 dpclass,
  ffi.Int32 dpflags,
);

typedef _dart_mkstemp_dprotected_np = int Function(
  ffi.Pointer<ffi.Int8> path,
  int dpclass,
  int dpflags,
);

typedef _c_mkdtempat_np = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_mkdtempat_np = ffi.Pointer<ffi.Int8> Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_mkstempsat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
);

typedef _dart_mkstempsat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int slen,
);

typedef _c_mkostempsat_np = ffi.Int32 Function(
  ffi.Int32 dfd,
  ffi.Pointer<ffi.Int8> path,
  ffi.Int32 slen,
  ffi.Int32 oflags,
);

typedef _dart_mkostempsat_np = int Function(
  int dfd,
  ffi.Pointer<ffi.Int8> path,
  int slen,
  int oflags,
);

typedef _c_nfssvc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _dart_nfssvc = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
);

typedef _c_profil = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Uint64 arg2,
  ffi.Uint32 arg3,
);

typedef _dart_profil = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_pthread_setugid_np = ffi.Int32 Function(
  ffi.Uint32 arg0,
  ffi.Uint32 arg1,
);

typedef _dart_pthread_setugid_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_pthread_getugid_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_pthread_getugid_np = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_reboot = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_reboot = int Function(
  int arg0,
);

typedef _c_revoke = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_revoke = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_rcmd = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _dart_rcmd = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
);

typedef _c_rcmd_af = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  ffi.Int32 arg6,
);

typedef _dart_rcmd_af = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<ffi.Int32> arg5,
  int arg6,
);

typedef _c_rresvport = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _dart_rresvport = int Function(
  ffi.Pointer<ffi.Int32> arg0,
);

typedef _c_rresvport_af = ffi.Int32 Function(
  ffi.Pointer<ffi.Int32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rresvport_af = int Function(
  ffi.Pointer<ffi.Int32> arg0,
  int arg1,
);

typedef _c_iruserok = ffi.Int32 Function(
  ffi.Uint64 arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_iruserok = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_iruserok_sa = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart_iruserok_sa = int Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c_ruserok = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_ruserok = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Int8> arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_setdomainname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_setdomainname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_setgroups = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _dart_setgroups = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
);

typedef _c_sethostid = ffi.Void Function(
  ffi.Int64 arg0,
);

typedef _dart_sethostid = void Function(
  int arg0,
);

typedef _c_sethostname = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sethostname = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_setkey = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setkey = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setlogin = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setlogin = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setmode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_setmode = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setrgid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setrgid = int Function(
  int arg0,
);

typedef _c_setruid = ffi.Int32 Function(
  ffi.Uint32 arg0,
);

typedef _dart_setruid = int Function(
  int arg0,
);

typedef _c_setsgroups_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_setsgroups_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_setusershell = ffi.Void Function();

typedef _dart_setusershell = void Function();

typedef _c_setwgroups_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _dart_setwgroups_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint8> arg1,
);

typedef _c_strtofflags = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _dart_strtofflags = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
);

typedef _c_swapon = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_swapon = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ttyslot = ffi.Int32 Function();

typedef _dart_ttyslot = int Function();

typedef _c_undelete = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_undelete = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_unwhiteout = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_unwhiteout = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_valloc = ffi.Pointer<ffi.Void> Function(
  ffi.Uint64 arg0,
);

typedef _dart_valloc = ffi.Pointer<ffi.Void> Function(
  int arg0,
);

typedef _c_syscall = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_syscall = int Function(
  int arg0,
);

typedef _c_getsubopt = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _dart_getsubopt = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg1,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg2,
);

typedef _c_fgetattrlist = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_fgetattrlist = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_fsetattrlist = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_fsetattrlist = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_getattrlist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_getattrlist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_setattrlist = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Uint32 arg4,
);

typedef _dart_setattrlist = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  int arg4,
);

typedef _c_exchangedata = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_exchangedata = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_getdirentriesattr = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  ffi.Uint32 arg7,
);

typedef _dart_getdirentriesattr = int Function(
  int arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
  ffi.Pointer<ffi.Uint32> arg4,
  ffi.Pointer<ffi.Uint32> arg5,
  ffi.Pointer<ffi.Uint32> arg6,
  int arg7,
);

typedef _c_searchfs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<fssearchblock> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  ffi.Uint32 arg3,
  ffi.Uint32 arg4,
  ffi.Pointer<searchstate> arg5,
);

typedef _dart_searchfs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<fssearchblock> arg1,
  ffi.Pointer<ffi.Uint64> arg2,
  int arg3,
  int arg4,
  ffi.Pointer<searchstate> arg5,
);

typedef _c_fsctl = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_fsctl = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
);

typedef _c_ffsctl = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Uint64 arg1,
  ffi.Pointer<ffi.Void> arg2,
  ffi.Uint32 arg3,
);

typedef _dart_ffsctl = int Function(
  int arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
  int arg3,
);

typedef _c_fsync_volume_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_fsync_volume_np = int Function(
  int arg0,
  int arg1,
);

typedef _c_sync_volume_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sync_volume_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
