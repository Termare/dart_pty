/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// fcntl.h 头文件在dart的移植.
class CFcntl {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CFcntl(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int open(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _open ??= _dylib.lookupFunction<_c_open, _dart_open>('open');
    return _open(
      arg0,
      arg1,
    );
  }

  _dart_open _open;

  int openat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _openat ??= _dylib.lookupFunction<_c_openat, _dart_openat>('openat');
    return _openat(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_openat _openat;

  int creat(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _creat ??= _dylib.lookupFunction<_c_creat, _dart_creat>('creat');
    return _creat(
      arg0,
      arg1,
    );
  }

  _dart_creat _creat;

  int fcntl(
    int arg0,
    int arg1, [
    int arg2,
  ]) {
    _fcntl ??= _dylib.lookupFunction<_c_fcntl, _dart_fcntl>('fcntl');
    return _fcntl(
      arg0,
      arg1,
    );
  }

  _dart_fcntl _fcntl;

  int openx_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<_filesec> arg2,
  ) {
    _openx_np ??=
        _dylib.lookupFunction<_c_openx_np, _dart_openx_np>('openx_np');
    return _openx_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_openx_np _openx_np;

  int open_dprotected_np(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    _open_dprotected_np ??=
        _dylib.lookupFunction<_c_open_dprotected_np, _dart_open_dprotected_np>(
            'open_dprotected_np');
    return _open_dprotected_np(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_open_dprotected_np _open_dprotected_np;

  int flock(
    int arg0,
    int arg1,
  ) {
    _flock ??= _dylib.lookupFunction<_c_flock, _dart_flock>('flock');
    return _flock(
      arg0,
      arg1,
    );
  }

  _dart_flock _flock;

  ffi.Pointer<_filesec> filesec_init() {
    _filesec_init ??= _dylib
        .lookupFunction<_c_filesec_init, _dart_filesec_init>('filesec_init');
    return _filesec_init();
  }

  _dart_filesec_init _filesec_init;

  ffi.Pointer<_filesec> filesec_dup(
    ffi.Pointer<_filesec> arg0,
  ) {
    _filesec_dup ??=
        _dylib.lookupFunction<_c_filesec_dup, _dart_filesec_dup>('filesec_dup');
    return _filesec_dup(
      arg0,
    );
  }

  _dart_filesec_dup _filesec_dup;

  void filesec_free(
    ffi.Pointer<_filesec> arg0,
  ) {
    _filesec_free ??= _dylib
        .lookupFunction<_c_filesec_free, _dart_filesec_free>('filesec_free');
    return _filesec_free(
      arg0,
    );
  }

  _dart_filesec_free _filesec_free;

  int filesec_get_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    _filesec_get_property ??= _dylib.lookupFunction<_c_filesec_get_property,
        _dart_filesec_get_property>('filesec_get_property');
    return _filesec_get_property(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_filesec_get_property _filesec_get_property;

  int filesec_query_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Int32> arg2,
  ) {
    _filesec_query_property ??= _dylib.lookupFunction<_c_filesec_query_property,
        _dart_filesec_query_property>('filesec_query_property');
    return _filesec_query_property(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_filesec_query_property _filesec_query_property;

  int filesec_set_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    _filesec_set_property ??= _dylib.lookupFunction<_c_filesec_set_property,
        _dart_filesec_set_property>('filesec_set_property');
    return _filesec_set_property(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_filesec_set_property _filesec_set_property;

  int filesec_unset_property(
    ffi.Pointer<_filesec> arg0,
    int arg1,
  ) {
    _filesec_unset_property ??= _dylib.lookupFunction<_c_filesec_unset_property,
        _dart_filesec_unset_property>('filesec_unset_property');
    return _filesec_unset_property(
      arg0,
      arg1,
    );
  }

  _dart_filesec_unset_property _filesec_unset_property;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class flock extends ffi.Struct {
  @ffi.Int64()
  int l_start;

  @ffi.Int64()
  int l_len;

  @ffi.Int32()
  int l_pid;

  @ffi.Int16()
  int l_type;

  @ffi.Int16()
  int l_whence;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  int tv_sec;

  @ffi.Int64()
  int tv_nsec;
}

class flocktimeout extends ffi.Struct {}

class radvisory extends ffi.Struct {
  @ffi.Int64()
  int ra_offset;

  @ffi.Int32()
  int ra_count;
}

class fcodeblobs extends ffi.Struct {
  ffi.Pointer<ffi.Void> f_cd_hash;

  @ffi.Uint64()
  int f_hash_size;

  ffi.Pointer<ffi.Void> f_cd_buffer;

  @ffi.Uint64()
  int f_cd_size;

  ffi.Pointer<ffi.Uint32> f_out_size;

  @ffi.Int32()
  int f_arch;

  @ffi.Int32()
  int __padding;
}

class fcodeblobs_t extends ffi.Struct {
  ffi.Pointer<ffi.Void> f_cd_hash;

  @ffi.Uint64()
  int f_hash_size;

  ffi.Pointer<ffi.Void> f_cd_buffer;

  @ffi.Uint64()
  int f_cd_size;

  ffi.Pointer<ffi.Uint32> f_out_size;

  @ffi.Int32()
  int f_arch;

  @ffi.Int32()
  int __padding;
}

class fsignatures extends ffi.Struct {
  @ffi.Int64()
  int fs_file_start;

  ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Uint64()
  int fs_blob_size;
}

class fsignatures_t extends ffi.Struct {
  @ffi.Int64()
  int fs_file_start;

  ffi.Pointer<ffi.Void> fs_blob_start;

  @ffi.Uint64()
  int fs_blob_size;
}

class fchecklv extends ffi.Struct {
  @ffi.Int64()
  int lv_file_start;

  @ffi.Uint64()
  int lv_error_message_size;

  ffi.Pointer<ffi.Void> lv_error_message;
}

class fchecklv_t extends ffi.Struct {
  @ffi.Int64()
  int lv_file_start;

  @ffi.Uint64()
  int lv_error_message_size;

  ffi.Pointer<ffi.Void> lv_error_message;
}

class fstore extends ffi.Struct {
  @ffi.Uint32()
  int fst_flags;

  @ffi.Int32()
  int fst_posmode;

  @ffi.Int64()
  int fst_offset;

  @ffi.Int64()
  int fst_length;

  @ffi.Int64()
  int fst_bytesalloc;
}

class fstore_t extends ffi.Struct {
  @ffi.Uint32()
  int fst_flags;

  @ffi.Int32()
  int fst_posmode;

  @ffi.Int64()
  int fst_offset;

  @ffi.Int64()
  int fst_length;

  @ffi.Int64()
  int fst_bytesalloc;
}

class fpunchhole extends ffi.Struct {
  @ffi.Uint32()
  int fp_flags;

  @ffi.Uint32()
  int reserved;

  @ffi.Int64()
  int fp_offset;

  @ffi.Int64()
  int fp_length;
}

class fpunchhole_t extends ffi.Struct {
  @ffi.Uint32()
  int fp_flags;

  @ffi.Uint32()
  int reserved;

  @ffi.Int64()
  int fp_offset;

  @ffi.Int64()
  int fp_length;
}

class ftrimactivefile extends ffi.Struct {
  @ffi.Int64()
  int fta_offset;

  @ffi.Int64()
  int fta_length;
}

class ftrimactivefile_t extends ffi.Struct {
  @ffi.Int64()
  int fta_offset;

  @ffi.Int64()
  int fta_length;
}

class fspecread extends ffi.Struct {
  @ffi.Uint32()
  int fsr_flags;

  @ffi.Uint32()
  int reserved;

  @ffi.Int64()
  int fsr_offset;

  @ffi.Int64()
  int fsr_length;
}

class fspecread_t extends ffi.Struct {
  @ffi.Uint32()
  int fsr_flags;

  @ffi.Uint32()
  int reserved;

  @ffi.Int64()
  int fsr_offset;

  @ffi.Int64()
  int fsr_length;
}

class fbootstraptransfer extends ffi.Struct {
  @ffi.Int64()
  int fbt_offset;

  @ffi.Uint64()
  int fbt_length;

  ffi.Pointer<ffi.Void> fbt_buffer;
}

class fbootstraptransfer_t extends ffi.Struct {
  @ffi.Int64()
  int fbt_offset;

  @ffi.Uint64()
  int fbt_length;

  ffi.Pointer<ffi.Void> fbt_buffer;
}

class log2phys extends ffi.Struct {
  @ffi.Uint32()
  int l2p_flags;

  @ffi.Int64()
  int l2p_contigbytes;

  @ffi.Int64()
  int l2p_devoffset;
}

class _filesec extends ffi.Struct {}

abstract class filesec_property_t {
  static const int FILESEC_OWNER = 1;
  static const int FILESEC_GROUP = 2;
  static const int FILESEC_UUID = 3;
  static const int FILESEC_MODE = 4;
  static const int FILESEC_ACL = 5;
  static const int FILESEC_GRPUUID = 6;
  static const int FILESEC_ACL_RAW = 100;
  static const int FILESEC_ACL_ALLOCSIZE = 101;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int O_RDONLY = 0;

const int O_WRONLY = 1;

const int O_RDWR = 2;

const int O_ACCMODE = 3;

const int FREAD = 1;

const int FWRITE = 2;

const int O_NONBLOCK = 4;

const int O_APPEND = 8;

const int O_SYNC = 128;

const int O_SHLOCK = 16;

const int O_EXLOCK = 32;

const int O_ASYNC = 64;

const int O_FSYNC = 128;

const int O_NOFOLLOW = 256;

const int O_CREAT = 512;

const int O_TRUNC = 1024;

const int O_EXCL = 2048;

const int AT_FDCWD = -2;

const int AT_EACCESS = 16;

const int AT_SYMLINK_NOFOLLOW = 32;

const int AT_SYMLINK_FOLLOW = 64;

const int AT_REMOVEDIR = 128;

const int AT_REALDEV = 512;

const int AT_FDONLY = 1024;

const int O_EVTONLY = 32768;

const int O_NOCTTY = 131072;

const int O_DIRECTORY = 1048576;

const int O_SYMLINK = 2097152;

const int O_DSYNC = 4194304;

const int O_CLOEXEC = 16777216;

const int O_DP_GETRAWENCRYPTED = 1;

const int O_DP_GETRAWUNENCRYPTED = 2;

const int FAPPEND = 8;

const int FASYNC = 64;

const int FFSYNC = 128;

const int FFDSYNC = 4194304;

const int FNONBLOCK = 4;

const int FNDELAY = 4;

const int O_NDELAY = 4;

const int CPF_OVERWRITE = 1;

const int CPF_IGNORE_MODE = 2;

const int CPF_MASK = 3;

const int F_DUPFD = 0;

const int F_GETFD = 1;

const int F_SETFD = 2;

const int F_GETFL = 3;

const int F_SETFL = 4;

const int F_GETOWN = 5;

const int F_SETOWN = 6;

const int F_GETLK = 7;

const int F_SETLK = 8;

const int F_SETLKW = 9;

const int F_SETLKWTIMEOUT = 10;

const int F_FLUSH_DATA = 40;

const int F_CHKCLEAN = 41;

const int F_PREALLOCATE = 42;

const int F_SETSIZE = 43;

const int F_RDADVISE = 44;

const int F_RDAHEAD = 45;

const int F_NOCACHE = 48;

const int F_LOG2PHYS = 49;

const int F_GETPATH = 50;

const int F_FULLFSYNC = 51;

const int F_PATHPKG_CHECK = 52;

const int F_FREEZE_FS = 53;

const int F_THAW_FS = 54;

const int F_GLOBAL_NOCACHE = 55;

const int F_ADDSIGS = 59;

const int F_ADDFILESIGS = 61;

const int F_NODIRECT = 62;

const int F_GETPROTECTIONCLASS = 63;

const int F_SETPROTECTIONCLASS = 64;

const int F_LOG2PHYS_EXT = 65;

const int F_GETLKPID = 66;

const int F_SETBACKINGSTORE = 70;

const int F_GETPATH_MTMINFO = 71;

const int F_GETCODEDIR = 72;

const int F_SETNOSIGPIPE = 73;

const int F_GETNOSIGPIPE = 74;

const int F_TRANSCODEKEY = 75;

const int F_SINGLE_WRITER = 76;

const int F_GETPROTECTIONLEVEL = 77;

const int F_FINDSIGS = 78;

const int F_ADDFILESIGS_FOR_DYLD_SIM = 83;

const int F_BARRIERFSYNC = 85;

const int F_ADDFILESIGS_RETURN = 97;

const int F_CHECK_LV = 98;

const int F_PUNCHHOLE = 99;

const int F_TRIM_ACTIVE_FILE = 100;

const int F_SPECULATIVE_READ = 101;

const int F_GETPATH_NOFIRMLINK = 102;

const int FCNTL_FS_SPECIFIC_BASE = 65536;

const int F_DUPFD_CLOEXEC = 67;

const int FD_CLOEXEC = 1;

const int F_RDLCK = 1;

const int F_UNLCK = 2;

const int F_WRLCK = 3;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_HOLE = 3;

const int SEEK_DATA = 4;

const int S_IFMT = 61440;

const int S_IFIFO = 4096;

const int S_IFCHR = 8192;

const int S_IFDIR = 16384;

const int S_IFBLK = 24576;

const int S_IFREG = 32768;

const int S_IFLNK = 40960;

const int S_IFSOCK = 49152;

const int S_IFWHT = 57344;

const int S_IRWXU = 448;

const int S_IRUSR = 256;

const int S_IWUSR = 128;

const int S_IXUSR = 64;

const int S_IRWXG = 56;

const int S_IRGRP = 32;

const int S_IWGRP = 16;

const int S_IXGRP = 8;

const int S_IRWXO = 7;

const int S_IROTH = 4;

const int S_IWOTH = 2;

const int S_IXOTH = 1;

const int S_ISUID = 2048;

const int S_ISGID = 1024;

const int S_ISVTX = 512;

const int S_ISTXT = 512;

const int S_IREAD = 256;

const int S_IWRITE = 128;

const int S_IEXEC = 64;

const int F_ALLOCATECONTIG = 2;

const int F_ALLOCATEALL = 4;

const int F_PEOFPOSMODE = 3;

const int F_VOLPOSMODE = 4;

const int USER_ADDR_NULL = 0;

const int LOCK_SH = 1;

const int LOCK_EX = 2;

const int LOCK_NB = 4;

const int LOCK_UN = 8;

const int O_POPUP = 2147483648;

const int O_ALERT = 536870912;

const int FILESEC_GUID = 3;

typedef _c_open = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_open = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_openat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_openat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_creat = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint16 arg1,
);

typedef _dart_creat = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_fcntl = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_fcntl = int Function(
  int arg0,
  int arg1,
);

typedef _c_openx_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<_filesec> arg2,
);

typedef _dart_openx_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<_filesec> arg2,
);

typedef _c_open_dprotected_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Int32 arg2,
  ffi.Int32 arg3,
);

typedef _dart_open_dprotected_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
);

typedef _c_flock = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_flock = int Function(
  int arg0,
  int arg1,
);

typedef _c_filesec_init = ffi.Pointer<_filesec> Function();

typedef _dart_filesec_init = ffi.Pointer<_filesec> Function();

typedef _c_filesec_dup = ffi.Pointer<_filesec> Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _dart_filesec_dup = ffi.Pointer<_filesec> Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _c_filesec_free = ffi.Void Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _dart_filesec_free = void Function(
  ffi.Pointer<_filesec> arg0,
);

typedef _c_filesec_get_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_filesec_get_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_filesec_query_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _dart_filesec_query_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Int32> arg2,
);

typedef _c_filesec_set_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _dart_filesec_set_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
  ffi.Pointer<ffi.Void> arg2,
);

typedef _c_filesec_unset_property = ffi.Int32 Function(
  ffi.Pointer<_filesec> arg0,
  ffi.Int32 arg1,
);

typedef _dart_filesec_unset_property = int Function(
  ffi.Pointer<_filesec> arg0,
  int arg1,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
