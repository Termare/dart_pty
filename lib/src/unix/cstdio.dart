/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// stdio.h 头文件在dart的移植.
class CStdio {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CStdio(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int renameat(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    _renameat ??=
        _dylib.lookupFunction<_c_renameat, _dart_renameat>('renameat');
    return _renameat(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_renameat _renameat;

  int renamex_np(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _renamex_np ??=
        _dylib.lookupFunction<_c_renamex_np, _dart_renamex_np>('renamex_np');
    return _renamex_np(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_renamex_np _renamex_np;

  int renameatx_np(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    int arg4,
  ) {
    _renameatx_np ??= _dylib
        .lookupFunction<_c_renameatx_np, _dart_renameatx_np>('renameatx_np');
    return _renameatx_np(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_renameatx_np _renameatx_np;

  void clearerr(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _clearerr ??=
        _dylib.lookupFunction<_c_clearerr, _dart_clearerr>('clearerr');
    return _clearerr(
      arg0,
    );
  }

  _dart_clearerr _clearerr;

  int fclose(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _fclose ??= _dylib.lookupFunction<_c_fclose, _dart_fclose>('fclose');
    return _fclose(
      arg0,
    );
  }

  _dart_fclose _fclose;

  int feof(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _feof ??= _dylib.lookupFunction<_c_feof, _dart_feof>('feof');
    return _feof(
      arg0,
    );
  }

  _dart_feof _feof;

  int ferror(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _ferror ??= _dylib.lookupFunction<_c_ferror, _dart_ferror>('ferror');
    return _ferror(
      arg0,
    );
  }

  _dart_ferror _ferror;

  int fflush(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _fflush ??= _dylib.lookupFunction<_c_fflush, _dart_fflush>('fflush');
    return _fflush(
      arg0,
    );
  }

  _dart_fflush _fflush;

  int fgetc(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _fgetc ??= _dylib.lookupFunction<_c_fgetc, _dart_fgetc>('fgetc');
    return _fgetc(
      arg0,
    );
  }

  _dart_fgetc _fgetc;

  int fgetpos(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _fgetpos ??= _dylib.lookupFunction<_c_fgetpos, _dart_fgetpos>('fgetpos');
    return _fgetpos(
      arg0,
      arg1,
    );
  }

  _dart_fgetpos _fgetpos;

  ffi.Pointer<ffi.Int8> fgets(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    ffi.Pointer<__sFILE> arg2,
  ) {
    _fgets ??= _dylib.lookupFunction<_c_fgets, _dart_fgets>('fgets');
    return _fgets(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_fgets _fgets;

  ffi.Pointer<__sFILE> fopen(
    ffi.Pointer<ffi.Int8> __filename,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    _fopen ??= _dylib.lookupFunction<_c_fopen, _dart_fopen>('fopen');
    return _fopen(
      __filename,
      __mode,
    );
  }

  _dart_fopen _fopen;

  int fprintf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fprintf ??= _dylib.lookupFunction<_c_fprintf, _dart_fprintf>('fprintf');
    return _fprintf(
      arg0,
      arg1,
    );
  }

  _dart_fprintf _fprintf;

  int fputc(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _fputc ??= _dylib.lookupFunction<_c_fputc, _dart_fputc>('fputc');
    return _fputc(
      arg0,
      arg1,
    );
  }

  _dart_fputc _fputc;

  int fputs(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _fputs ??= _dylib.lookupFunction<_c_fputs, _dart_fputs>('fputs');
    return _fputs(
      arg0,
      arg1,
    );
  }

  _dart_fputs _fputs;

  int fread(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<__sFILE> __stream,
  ) {
    _fread ??= _dylib.lookupFunction<_c_fread, _dart_fread>('fread');
    return _fread(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  _dart_fread _fread;

  ffi.Pointer<__sFILE> freopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__sFILE> arg2,
  ) {
    _freopen ??= _dylib.lookupFunction<_c_freopen, _dart_freopen>('freopen');
    return _freopen(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_freopen _freopen;

  int fscanf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fscanf ??= _dylib.lookupFunction<_c_fscanf, _dart_fscanf>('fscanf');
    return _fscanf(
      arg0,
      arg1,
    );
  }

  _dart_fscanf _fscanf;

  int fseek(
    ffi.Pointer<__sFILE> arg0,
    int arg1,
    int arg2,
  ) {
    _fseek ??= _dylib.lookupFunction<_c_fseek, _dart_fseek>('fseek');
    return _fseek(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_fseek _fseek;

  int fsetpos(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int64> arg1,
  ) {
    _fsetpos ??= _dylib.lookupFunction<_c_fsetpos, _dart_fsetpos>('fsetpos');
    return _fsetpos(
      arg0,
      arg1,
    );
  }

  _dart_fsetpos _fsetpos;

  int ftell(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _ftell ??= _dylib.lookupFunction<_c_ftell, _dart_ftell>('ftell');
    return _ftell(
      arg0,
    );
  }

  _dart_ftell _ftell;

  int fwrite(
    ffi.Pointer<ffi.Void> __ptr,
    int __size,
    int __nitems,
    ffi.Pointer<__sFILE> __stream,
  ) {
    _fwrite ??= _dylib.lookupFunction<_c_fwrite, _dart_fwrite>('fwrite');
    return _fwrite(
      __ptr,
      __size,
      __nitems,
      __stream,
    );
  }

  _dart_fwrite _fwrite;

  int getc(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _getc ??= _dylib.lookupFunction<_c_getc, _dart_getc>('getc');
    return _getc(
      arg0,
    );
  }

  _dart_getc _getc;

  int getchar() {
    _getchar ??= _dylib.lookupFunction<_c_getchar, _dart_getchar>('getchar');
    return _getchar();
  }

  _dart_getchar _getchar;

  ffi.Pointer<ffi.Int8> gets(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _gets ??= _dylib.lookupFunction<_c_gets, _dart_gets>('gets');
    return _gets(
      arg0,
    );
  }

  _dart_gets _gets;

  void perror(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _perror ??= _dylib.lookupFunction<_c_perror, _dart_perror>('perror');
    return _perror(
      arg0,
    );
  }

  _dart_perror _perror;

  int printf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _printf ??= _dylib.lookupFunction<_c_printf, _dart_printf>('printf');
    return _printf(
      arg0,
    );
  }

  _dart_printf _printf;

  int putc(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _putc ??= _dylib.lookupFunction<_c_putc, _dart_putc>('putc');
    return _putc(
      arg0,
      arg1,
    );
  }

  _dart_putc _putc;

  int putchar(
    int arg0,
  ) {
    _putchar ??= _dylib.lookupFunction<_c_putchar, _dart_putchar>('putchar');
    return _putchar(
      arg0,
    );
  }

  _dart_putchar _putchar;

  int puts(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _puts ??= _dylib.lookupFunction<_c_puts, _dart_puts>('puts');
    return _puts(
      arg0,
    );
  }

  _dart_puts _puts;

  int remove(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _remove ??= _dylib.lookupFunction<_c_remove, _dart_remove>('remove');
    return _remove(
      arg0,
    );
  }

  _dart_remove _remove;

  int rename(
    ffi.Pointer<ffi.Int8> __old,
    ffi.Pointer<ffi.Int8> __new,
  ) {
    _rename ??= _dylib.lookupFunction<_c_rename, _dart_rename>('rename');
    return _rename(
      __old,
      __new,
    );
  }

  _dart_rename _rename;

  void rewind(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _rewind ??= _dylib.lookupFunction<_c_rewind, _dart_rewind>('rewind');
    return _rewind(
      arg0,
    );
  }

  _dart_rewind _rewind;

  int scanf(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _scanf ??= _dylib.lookupFunction<_c_scanf, _dart_scanf>('scanf');
    return _scanf(
      arg0,
    );
  }

  _dart_scanf _scanf;

  void setbuf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _setbuf ??= _dylib.lookupFunction<_c_setbuf, _dart_setbuf>('setbuf');
    return _setbuf(
      arg0,
      arg1,
    );
  }

  _dart_setbuf _setbuf;

  int setvbuf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    int arg3,
  ) {
    _setvbuf ??= _dylib.lookupFunction<_c_setvbuf, _dart_setvbuf>('setvbuf');
    return _setvbuf(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_setvbuf _setvbuf;

  int sprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _sprintf ??= _dylib.lookupFunction<_c_sprintf, _dart_sprintf>('sprintf');
    return _sprintf(
      arg0,
      arg1,
    );
  }

  _dart_sprintf _sprintf;

  int sscanf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _sscanf ??= _dylib.lookupFunction<_c_sscanf, _dart_sscanf>('sscanf');
    return _sscanf(
      arg0,
      arg1,
    );
  }

  _dart_sscanf _sscanf;

  ffi.Pointer<__sFILE> tmpfile() {
    _tmpfile ??= _dylib.lookupFunction<_c_tmpfile, _dart_tmpfile>('tmpfile');
    return _tmpfile();
  }

  _dart_tmpfile _tmpfile;

  ffi.Pointer<ffi.Int8> tmpnam(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _tmpnam ??= _dylib.lookupFunction<_c_tmpnam, _dart_tmpnam>('tmpnam');
    return _tmpnam(
      arg0,
    );
  }

  _dart_tmpnam _tmpnam;

  int ungetc(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _ungetc ??= _dylib.lookupFunction<_c_ungetc, _dart_ungetc>('ungetc');
    return _ungetc(
      arg0,
      arg1,
    );
  }

  _dart_ungetc _ungetc;

  int vfprintf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vfprintf ??=
        _dylib.lookupFunction<_c_vfprintf, _dart_vfprintf>('vfprintf');
    return _vfprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vfprintf _vfprintf;

  int vprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    _vprintf ??= _dylib.lookupFunction<_c_vprintf, _dart_vprintf>('vprintf');
    return _vprintf(
      arg0,
      arg1,
    );
  }

  _dart_vprintf _vprintf;

  int vsprintf(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vsprintf ??=
        _dylib.lookupFunction<_c_vsprintf, _dart_vsprintf>('vsprintf');
    return _vsprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vsprintf _vsprintf;

  ffi.Pointer<ffi.Int8> ctermid(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ctermid ??= _dylib.lookupFunction<_c_ctermid, _dart_ctermid>('ctermid');
    return _ctermid(
      arg0,
    );
  }

  _dart_ctermid _ctermid;

  ffi.Pointer<__sFILE> fdopen(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fdopen ??= _dylib.lookupFunction<_c_fdopen, _dart_fdopen>('fdopen');
    return _fdopen(
      arg0,
      arg1,
    );
  }

  _dart_fdopen _fdopen;

  int fileno(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _fileno ??= _dylib.lookupFunction<_c_fileno, _dart_fileno>('fileno');
    return _fileno(
      arg0,
    );
  }

  _dart_fileno _fileno;

  int pclose(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _pclose ??= _dylib.lookupFunction<_c_pclose, _dart_pclose>('pclose');
    return _pclose(
      arg0,
    );
  }

  _dart_pclose _pclose;

  ffi.Pointer<__sFILE> popen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _popen ??= _dylib.lookupFunction<_c_popen, _dart_popen>('popen');
    return _popen(
      arg0,
      arg1,
    );
  }

  _dart_popen _popen;

  int __srget(
    ffi.Pointer<__sFILE> arg0,
  ) {
    ___srget ??= _dylib.lookupFunction<_c___srget, _dart___srget>('__srget');
    return ___srget(
      arg0,
    );
  }

  _dart___srget ___srget;

  int __svfscanf(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    ___svfscanf ??=
        _dylib.lookupFunction<_c___svfscanf, _dart___svfscanf>('__svfscanf');
    return ___svfscanf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart___svfscanf ___svfscanf;

  int __swbuf(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    ___swbuf ??= _dylib.lookupFunction<_c___swbuf, _dart___swbuf>('__swbuf');
    return ___swbuf(
      arg0,
      arg1,
    );
  }

  _dart___swbuf ___swbuf;

  int __sputc(
    int _c,
    ffi.Pointer<__sFILE> _p,
  ) {
    ___sputc ??= _dylib.lookupFunction<_c___sputc, _dart___sputc>('__sputc');
    return ___sputc(
      _c,
      _p,
    );
  }

  _dart___sputc ___sputc;

  void flockfile(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _flockfile ??=
        _dylib.lookupFunction<_c_flockfile, _dart_flockfile>('flockfile');
    return _flockfile(
      arg0,
    );
  }

  _dart_flockfile _flockfile;

  int ftrylockfile(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _ftrylockfile ??= _dylib
        .lookupFunction<_c_ftrylockfile, _dart_ftrylockfile>('ftrylockfile');
    return _ftrylockfile(
      arg0,
    );
  }

  _dart_ftrylockfile _ftrylockfile;

  void funlockfile(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _funlockfile ??=
        _dylib.lookupFunction<_c_funlockfile, _dart_funlockfile>('funlockfile');
    return _funlockfile(
      arg0,
    );
  }

  _dart_funlockfile _funlockfile;

  int getc_unlocked(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _getc_unlocked ??= _dylib
        .lookupFunction<_c_getc_unlocked, _dart_getc_unlocked>('getc_unlocked');
    return _getc_unlocked(
      arg0,
    );
  }

  _dart_getc_unlocked _getc_unlocked;

  int getchar_unlocked() {
    _getchar_unlocked ??=
        _dylib.lookupFunction<_c_getchar_unlocked, _dart_getchar_unlocked>(
            'getchar_unlocked');
    return _getchar_unlocked();
  }

  _dart_getchar_unlocked _getchar_unlocked;

  int putc_unlocked(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _putc_unlocked ??= _dylib
        .lookupFunction<_c_putc_unlocked, _dart_putc_unlocked>('putc_unlocked');
    return _putc_unlocked(
      arg0,
      arg1,
    );
  }

  _dart_putc_unlocked _putc_unlocked;

  int putchar_unlocked(
    int arg0,
  ) {
    _putchar_unlocked ??=
        _dylib.lookupFunction<_c_putchar_unlocked, _dart_putchar_unlocked>(
            'putchar_unlocked');
    return _putchar_unlocked(
      arg0,
    );
  }

  _dart_putchar_unlocked _putchar_unlocked;

  int getw(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _getw ??= _dylib.lookupFunction<_c_getw, _dart_getw>('getw');
    return _getw(
      arg0,
    );
  }

  _dart_getw _getw;

  int putw(
    int arg0,
    ffi.Pointer<__sFILE> arg1,
  ) {
    _putw ??= _dylib.lookupFunction<_c_putw, _dart_putw>('putw');
    return _putw(
      arg0,
      arg1,
    );
  }

  _dart_putw _putw;

  ffi.Pointer<ffi.Int8> tempnam(
    ffi.Pointer<ffi.Int8> __dir,
    ffi.Pointer<ffi.Int8> __prefix,
  ) {
    _tempnam ??= _dylib.lookupFunction<_c_tempnam, _dart_tempnam>('tempnam');
    return _tempnam(
      __dir,
      __prefix,
    );
  }

  _dart_tempnam _tempnam;

  int fseeko(
    ffi.Pointer<__sFILE> __stream,
    int __offset,
    int __whence,
  ) {
    _fseeko ??= _dylib.lookupFunction<_c_fseeko, _dart_fseeko>('fseeko');
    return _fseeko(
      __stream,
      __offset,
      __whence,
    );
  }

  _dart_fseeko _fseeko;

  int ftello(
    ffi.Pointer<__sFILE> __stream,
  ) {
    _ftello ??= _dylib.lookupFunction<_c_ftello, _dart_ftello>('ftello');
    return _ftello(
      __stream,
    );
  }

  _dart_ftello _ftello;

  int snprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
  ) {
    _snprintf ??=
        _dylib.lookupFunction<_c_snprintf, _dart_snprintf>('snprintf');
    return _snprintf(
      __str,
      __size,
      __format,
    );
  }

  _dart_snprintf _snprintf;

  int vfscanf(
    ffi.Pointer<__sFILE> __stream,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vfscanf ??= _dylib.lookupFunction<_c_vfscanf, _dart_vfscanf>('vfscanf');
    return _vfscanf(
      __stream,
      __format,
      arg2,
    );
  }

  _dart_vfscanf _vfscanf;

  int vscanf(
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg1,
  ) {
    _vscanf ??= _dylib.lookupFunction<_c_vscanf, _dart_vscanf>('vscanf');
    return _vscanf(
      __format,
      arg1,
    );
  }

  _dart_vscanf _vscanf;

  int vsnprintf(
    ffi.Pointer<ffi.Int8> __str,
    int __size,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg3,
  ) {
    _vsnprintf ??=
        _dylib.lookupFunction<_c_vsnprintf, _dart_vsnprintf>('vsnprintf');
    return _vsnprintf(
      __str,
      __size,
      __format,
      arg3,
    );
  }

  _dart_vsnprintf _vsnprintf;

  int vsscanf(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __format,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vsscanf ??= _dylib.lookupFunction<_c_vsscanf, _dart_vsscanf>('vsscanf');
    return _vsscanf(
      __str,
      __format,
      arg2,
    );
  }

  _dart_vsscanf _vsscanf;

  int dprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _dprintf ??= _dylib.lookupFunction<_c_dprintf, _dart_dprintf>('dprintf');
    return _dprintf(
      arg0,
      arg1,
    );
  }

  _dart_dprintf _dprintf;

  int vdprintf(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vdprintf ??=
        _dylib.lookupFunction<_c_vdprintf, _dart_vdprintf>('vdprintf');
    return _vdprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vdprintf _vdprintf;

  int getdelim(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    int __delimiter,
    ffi.Pointer<__sFILE> __stream,
  ) {
    _getdelim ??=
        _dylib.lookupFunction<_c_getdelim, _dart_getdelim>('getdelim');
    return _getdelim(
      __linep,
      __linecapp,
      __delimiter,
      __stream,
    );
  }

  _dart_getdelim _getdelim;

  int getline(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
    ffi.Pointer<ffi.Uint64> __linecapp,
    ffi.Pointer<__sFILE> __stream,
  ) {
    _getline ??= _dylib.lookupFunction<_c_getline, _dart_getline>('getline');
    return _getline(
      __linep,
      __linecapp,
      __stream,
    );
  }

  _dart_getline _getline;

  ffi.Pointer<__sFILE> fmemopen(
    ffi.Pointer<ffi.Void> __buf,
    int __size,
    ffi.Pointer<ffi.Int8> __mode,
  ) {
    _fmemopen ??=
        _dylib.lookupFunction<_c_fmemopen, _dart_fmemopen>('fmemopen');
    return _fmemopen(
      __buf,
      __size,
      __mode,
    );
  }

  _dart_fmemopen _fmemopen;

  ffi.Pointer<__sFILE> open_memstream(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
    ffi.Pointer<ffi.Uint64> __sizep,
  ) {
    _open_memstream ??=
        _dylib.lookupFunction<_c_open_memstream, _dart_open_memstream>(
            'open_memstream');
    return _open_memstream(
      __bufp,
      __sizep,
    );
  }

  _dart_open_memstream _open_memstream;

  int asprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _asprintf ??=
        _dylib.lookupFunction<_c_asprintf, _dart_asprintf>('asprintf');
    return _asprintf(
      arg0,
      arg1,
    );
  }

  _dart_asprintf _asprintf;

  ffi.Pointer<ffi.Int8> ctermid_r(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _ctermid_r ??=
        _dylib.lookupFunction<_c_ctermid_r, _dart_ctermid_r>('ctermid_r');
    return _ctermid_r(
      arg0,
    );
  }

  _dart_ctermid_r _ctermid_r;

  ffi.Pointer<ffi.Int8> fgetln(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Uint64> arg1,
  ) {
    _fgetln ??= _dylib.lookupFunction<_c_fgetln, _dart_fgetln>('fgetln');
    return _fgetln(
      arg0,
      arg1,
    );
  }

  _dart_fgetln _fgetln;

  ffi.Pointer<ffi.Int8> fmtcheck(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _fmtcheck ??=
        _dylib.lookupFunction<_c_fmtcheck, _dart_fmtcheck>('fmtcheck');
    return _fmtcheck(
      arg0,
      arg1,
    );
  }

  _dart_fmtcheck _fmtcheck;

  int fpurge(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _fpurge ??= _dylib.lookupFunction<_c_fpurge, _dart_fpurge>('fpurge');
    return _fpurge(
      arg0,
    );
  }

  _dart_fpurge _fpurge;

  void setbuffer(
    ffi.Pointer<__sFILE> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _setbuffer ??=
        _dylib.lookupFunction<_c_setbuffer, _dart_setbuffer>('setbuffer');
    return _setbuffer(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_setbuffer _setbuffer;

  int setlinebuf(
    ffi.Pointer<__sFILE> arg0,
  ) {
    _setlinebuf ??=
        _dylib.lookupFunction<_c_setlinebuf, _dart_setlinebuf>('setlinebuf');
    return _setlinebuf(
      arg0,
    );
  }

  _dart_setlinebuf _setlinebuf;

  int vasprintf(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    ffi.Pointer<__va_list_tag> arg2,
  ) {
    _vasprintf ??=
        _dylib.lookupFunction<_c_vasprintf, _dart_vasprintf>('vasprintf');
    return _vasprintf(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_vasprintf _vasprintf;

  ffi.Pointer<__sFILE> zopen(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _zopen ??= _dylib.lookupFunction<_c_zopen, _dart_zopen>('zopen');
    return _zopen(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_zopen _zopen;

  ffi.Pointer<__sFILE> funopen(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_11>> arg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg3,
    ffi.Pointer<ffi.NativeFunction<_typedefC_13>> arg4,
  ) {
    _funopen ??= _dylib.lookupFunction<_c_funopen, _dart_funopen>('funopen');
    return _funopen(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart_funopen _funopen;

  int __sprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
  ) {
    ___sprintf_chk ??= _dylib
        .lookupFunction<_c___sprintf_chk, _dart___sprintf_chk>('__sprintf_chk');
    return ___sprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart___sprintf_chk ___sprintf_chk;

  int __snprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
  ) {
    ___snprintf_chk ??=
        _dylib.lookupFunction<_c___snprintf_chk, _dart___snprintf_chk>(
            '__snprintf_chk');
    return ___snprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart___snprintf_chk ___snprintf_chk;

  int __vsprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Int8> arg3,
    ffi.Pointer<__va_list_tag> arg4,
  ) {
    ___vsprintf_chk ??=
        _dylib.lookupFunction<_c___vsprintf_chk, _dart___vsprintf_chk>(
            '__vsprintf_chk');
    return ___vsprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  _dart___vsprintf_chk ___vsprintf_chk;

  int __vsnprintf_chk(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ffi.Int8> arg4,
    ffi.Pointer<__va_list_tag> arg5,
  ) {
    ___vsnprintf_chk ??=
        _dylib.lookupFunction<_c___vsnprintf_chk, _dart___vsnprintf_chk>(
            '__vsnprintf_chk');
    return ___vsnprintf_chk(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  _dart___vsnprintf_chk ___vsnprintf_chk;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class __sbuf extends ffi.Struct {
  ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  int _size;
}

class __sFILEX extends ffi.Struct {}

class __sFILE extends ffi.Struct {}

class FILE extends ffi.Struct {}

class __va_list_tag extends ffi.Struct {
  @ffi.Uint32()
  int gp_offset;

  @ffi.Uint32()
  int fp_offset;

  ffi.Pointer<ffi.Void> overflow_arg_area;

  ffi.Pointer<ffi.Void> reg_save_area;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int USER_ADDR_NULL = 0;

const int NULL = 0;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

typedef _c_renameat = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart_renameat = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c_renamex_np = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint32 arg2,
);

typedef _dart_renamex_np = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_renameatx_np = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Uint32 arg4,
);

typedef _dart_renameatx_np = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  int arg4,
);

typedef _c_clearerr = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_clearerr = void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_fclose = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_fclose = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_feof = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_feof = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_ferror = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_ferror = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_fflush = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_fflush = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_fgetc = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_fgetc = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_fgetpos = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fgetpos = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Pointer<__sFILE> arg2,
);

typedef _dart_fgets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  ffi.Pointer<__sFILE> arg2,
);

typedef _c_fopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> __filename,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_fprintf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fprintf = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fputc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_fputc = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_fputs = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_fputs = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_fread = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<__sFILE> __stream,
);

typedef _dart_fread = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<__sFILE> __stream,
);

typedef _c_freopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__sFILE> arg2,
);

typedef _dart_freopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__sFILE> arg2,
);

typedef _c_fscanf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fscanf = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fseek = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Int64 arg1,
  ffi.Int32 arg2,
);

typedef _dart_fseek = int Function(
  ffi.Pointer<__sFILE> arg0,
  int arg1,
  int arg2,
);

typedef _c_fsetpos = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _dart_fsetpos = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int64> arg1,
);

typedef _c_ftell = ffi.Int64 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_ftell = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_fwrite = ffi.Uint64 Function(
  ffi.Pointer<ffi.Void> __ptr,
  ffi.Uint64 __size,
  ffi.Uint64 __nitems,
  ffi.Pointer<__sFILE> __stream,
);

typedef _dart_fwrite = int Function(
  ffi.Pointer<ffi.Void> __ptr,
  int __size,
  int __nitems,
  ffi.Pointer<__sFILE> __stream,
);

typedef _c_getc = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_getc = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_getchar = ffi.Int32 Function();

typedef _dart_getchar = int Function();

typedef _c_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_gets = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_perror = ffi.Void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_perror = void Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_printf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_printf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_putc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_putc = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_putchar = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar = int Function(
  int arg0,
);

typedef _c_puts = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_puts = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_remove = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_remove = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_rename = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _dart_rename = int Function(
  ffi.Pointer<ffi.Int8> __old,
  ffi.Pointer<ffi.Int8> __new,
);

typedef _c_rewind = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_rewind = void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_scanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_scanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_setbuf = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_setbuf = void Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_setvbuf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
);

typedef _dart_setvbuf = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  int arg3,
);

typedef _c_sprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_sscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_sscanf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_tmpfile = ffi.Pointer<__sFILE> Function();

typedef _dart_tmpfile = ffi.Pointer<__sFILE> Function();

typedef _c_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_tmpnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_ungetc = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_ungetc = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_vfprintf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfprintf = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsprintf = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_fdopen = ffi.Pointer<__sFILE> Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fdopen = ffi.Pointer<__sFILE> Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fileno = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_fileno = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_pclose = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_pclose = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_popen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_popen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c___srget = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart___srget = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c___svfscanf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart___svfscanf = int Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c___swbuf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart___swbuf = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c___sputc = ffi.Int32 Function(
  ffi.Int32 _c,
  ffi.Pointer<__sFILE> _p,
);

typedef _dart___sputc = int Function(
  int _c,
  ffi.Pointer<__sFILE> _p,
);

typedef _c_flockfile = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_flockfile = void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_ftrylockfile = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_ftrylockfile = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_funlockfile = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_funlockfile = void Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_getc_unlocked = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_getc_unlocked = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_getchar_unlocked = ffi.Int32 Function();

typedef _dart_getchar_unlocked = int Function();

typedef _c_putc_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_putc_unlocked = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_putchar_unlocked = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_putchar_unlocked = int Function(
  int arg0,
);

typedef _c_getw = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_getw = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_putw = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _dart_putw = int Function(
  int arg0,
  ffi.Pointer<__sFILE> arg1,
);

typedef _c_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _dart_tempnam = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dir,
  ffi.Pointer<ffi.Int8> __prefix,
);

typedef _c_fseeko = ffi.Int32 Function(
  ffi.Pointer<__sFILE> __stream,
  ffi.Int64 __offset,
  ffi.Int32 __whence,
);

typedef _dart_fseeko = int Function(
  ffi.Pointer<__sFILE> __stream,
  int __offset,
  int __whence,
);

typedef _c_ftello = ffi.Int64 Function(
  ffi.Pointer<__sFILE> __stream,
);

typedef _dart_ftello = int Function(
  ffi.Pointer<__sFILE> __stream,
);

typedef _c_snprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _dart_snprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
);

typedef _c_vfscanf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vfscanf = int Function(
  ffi.Pointer<__sFILE> __stream,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_vscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _dart_vscanf = int Function(
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg1,
);

typedef _c_vsnprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _dart_vsnprintf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  int __size,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg3,
);

typedef _c_vsscanf = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vsscanf = int Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __format,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_dprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_dprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_vdprintf = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vdprintf = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_getdelim = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Int32 __delimiter,
  ffi.Pointer<__sFILE> __stream,
);

typedef _dart_getdelim = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  int __delimiter,
  ffi.Pointer<__sFILE> __stream,
);

typedef _c_getline = ffi.Int64 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<__sFILE> __stream,
);

typedef _dart_getline = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __linep,
  ffi.Pointer<ffi.Uint64> __linecapp,
  ffi.Pointer<__sFILE> __stream,
);

typedef _c_fmemopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  ffi.Uint64 __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _dart_fmemopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Void> __buf,
  int __size,
  ffi.Pointer<ffi.Int8> __mode,
);

typedef _c_open_memstream = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _dart_open_memstream = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __bufp,
  ffi.Pointer<ffi.Uint64> __sizep,
);

typedef _c_asprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_asprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_ctermid_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _dart_fgetln = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Uint64> arg1,
);

typedef _c_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_fmtcheck = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_fpurge = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_fpurge = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_setbuffer = ffi.Void Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_setbuffer = void Function(
  ffi.Pointer<__sFILE> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_setlinebuf = ffi.Int32 Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _dart_setlinebuf = int Function(
  ffi.Pointer<__sFILE> arg0,
);

typedef _c_vasprintf = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _dart_vasprintf = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Pointer<__va_list_tag> arg2,
);

typedef _c_zopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
);

typedef _dart_zopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
);

typedef _typedefC_12 = ffi.Int64 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Int64,
  ffi.Int32,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_funopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> arg4,
);

typedef _dart_funopen = ffi.Pointer<__sFILE> Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_11>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_12>> arg3,
  ffi.Pointer<ffi.NativeFunction<_typedefC_13>> arg4,
);

typedef _c___sprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _dart___sprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
);

typedef _c___snprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _dart___snprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
);

typedef _c___vsprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
  ffi.Uint64 arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _dart___vsprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  ffi.Pointer<ffi.Int8> arg3,
  ffi.Pointer<__va_list_tag> arg4,
);

typedef _c___vsnprintf_chk = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Uint64 arg1,
  ffi.Int32 arg2,
  ffi.Uint64 arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _dart___vsnprintf_chk = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
  int arg2,
  int arg3,
  ffi.Pointer<ffi.Int8> arg4,
  ffi.Pointer<__va_list_tag> arg5,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
