/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// dirent.h 头文件在dart的移植.
class CDirent {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CDirent(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  int closedir(
    ffi.Pointer<DIR> arg0,
  ) {
    _closedir ??=
        _dylib.lookupFunction<_c_closedir, _dart_closedir>('closedir');
    return _closedir(
      arg0,
    );
  }

  _dart_closedir _closedir;

  ffi.Pointer<DIR> opendir(
    ffi.Pointer<ffi.Int8> arg0,
  ) {
    _opendir ??= _dylib.lookupFunction<_c_opendir, _dart_opendir>('opendir');
    return _opendir(
      arg0,
    );
  }

  _dart_opendir _opendir;

  ffi.Pointer<dirent> readdir(
    ffi.Pointer<DIR> arg0,
  ) {
    _readdir ??= _dylib.lookupFunction<_c_readdir, _dart_readdir>('readdir');
    return _readdir(
      arg0,
    );
  }

  _dart_readdir _readdir;

  int readdir_r(
    ffi.Pointer<DIR> arg0,
    ffi.Pointer<dirent> arg1,
    ffi.Pointer<ffi.Pointer<dirent>> arg2,
  ) {
    _readdir_r ??=
        _dylib.lookupFunction<_c_readdir_r, _dart_readdir_r>('readdir_r');
    return _readdir_r(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_readdir_r _readdir_r;

  void rewinddir(
    ffi.Pointer<DIR> arg0,
  ) {
    _rewinddir ??=
        _dylib.lookupFunction<_c_rewinddir, _dart_rewinddir>('rewinddir');
    return _rewinddir(
      arg0,
    );
  }

  _dart_rewinddir _rewinddir;

  void seekdir(
    ffi.Pointer<DIR> arg0,
    int arg1,
  ) {
    _seekdir ??= _dylib.lookupFunction<_c_seekdir, _dart_seekdir>('seekdir');
    return _seekdir(
      arg0,
      arg1,
    );
  }

  _dart_seekdir _seekdir;

  int telldir(
    ffi.Pointer<DIR> arg0,
  ) {
    _telldir ??= _dylib.lookupFunction<_c_telldir, _dart_telldir>('telldir');
    return _telldir(
      arg0,
    );
  }

  _dart_telldir _telldir;

  ffi.Pointer<DIR> fdopendir(
    int arg0,
  ) {
    _fdopendir ??=
        _dylib.lookupFunction<_c_fdopendir, _dart_fdopendir>('fdopendir');
    return _fdopendir(
      arg0,
    );
  }

  _dart_fdopendir _fdopendir;

  int alphasort(
    ffi.Pointer<ffi.Pointer<dirent>> arg0,
    ffi.Pointer<ffi.Pointer<dirent>> arg1,
  ) {
    _alphasort ??=
        _dylib.lookupFunction<_c_alphasort, _dart_alphasort>('alphasort');
    return _alphasort(
      arg0,
      arg1,
    );
  }

  _dart_alphasort _alphasort;

  int dirfd(
    ffi.Pointer<DIR> dirp,
  ) {
    _dirfd ??= _dylib.lookupFunction<_c_dirfd, _dart_dirfd>('dirfd');
    return _dirfd(
      dirp,
    );
  }

  _dart_dirfd _dirfd;

  int scandir(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
    ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg2,
    ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg3,
  ) {
    _scandir ??= _dylib.lookupFunction<_c_scandir, _dart_scandir>('scandir');
    return _scandir(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_scandir _scandir;

  int getdirentries(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
    ffi.Pointer<ffi.Int64> arg3,
  ) {
    _getdirentries ??= _dylib
        .lookupFunction<_c_getdirentries, _dart_getdirentries>('getdirentries');
    return _getdirentries(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  _dart_getdirentries _getdirentries;

  ffi.Pointer<DIR> __opendir2(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    ___opendir2 ??=
        _dylib.lookupFunction<_c___opendir2, _dart___opendir2>('__opendir2');
    return ___opendir2(
      arg0,
      arg1,
    );
  }

  _dart___opendir2 ___opendir2;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class dirent extends ffi.Struct {
  @ffi.Uint64()
  int d_ino;

  @ffi.Uint64()
  int d_seekoff;

  @ffi.Uint16()
  int d_reclen;

  @ffi.Uint16()
  int d_namlen;
  @ffi.Uint8()
  int d_type;
  ffi.Pointer<ffi.Int8> d_name;
}

class _telldir extends ffi.Struct {}

class DIR extends ffi.Struct {}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __DARWIN_MAXNAMLEN = 255;

const int __DARWIN_MAXPATHLEN = 1024;

const int MAXNAMLEN = 255;

const int DT_UNKNOWN = 0;

const int DT_FIFO = 1;

const int DT_CHR = 2;

const int DT_DIR = 4;

const int DT_BLK = 6;

const int DT_REG = 8;

const int DT_LNK = 10;

const int DT_SOCK = 12;

const int DT_WHT = 14;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int DIRBLKSIZ = 1024;

const int DTF_HIDEW = 1;

const int DTF_NODUP = 2;

const int DTF_REWIND = 4;

const int __DTF_READALL = 8;

const int __DTF_SKIPREAD = 16;

const int __DTF_ATEND = 32;

typedef _c_closedir = ffi.Int32 Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_closedir = int Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_opendir = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _dart_opendir = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
);

typedef _c_readdir = ffi.Pointer<dirent> Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_readdir = ffi.Pointer<dirent> Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_readdir_r = ffi.Int32 Function(
  ffi.Pointer<DIR> arg0,
  ffi.Pointer<dirent> arg1,
  ffi.Pointer<ffi.Pointer<dirent>> arg2,
);

typedef _dart_readdir_r = int Function(
  ffi.Pointer<DIR> arg0,
  ffi.Pointer<dirent> arg1,
  ffi.Pointer<ffi.Pointer<dirent>> arg2,
);

typedef _c_rewinddir = ffi.Void Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_rewinddir = void Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_seekdir = ffi.Void Function(
  ffi.Pointer<DIR> arg0,
  ffi.Int64 arg1,
);

typedef _dart_seekdir = void Function(
  ffi.Pointer<DIR> arg0,
  int arg1,
);

typedef _c_telldir = ffi.Int64 Function(
  ffi.Pointer<DIR> arg0,
);

typedef _dart_telldir = int Function(
  ffi.Pointer<DIR> arg0,
);

typedef _c_fdopendir = ffi.Pointer<DIR> Function(
  ffi.Int32 arg0,
);

typedef _dart_fdopendir = ffi.Pointer<DIR> Function(
  int arg0,
);

typedef _c_alphasort = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<dirent>> arg0,
  ffi.Pointer<ffi.Pointer<dirent>> arg1,
);

typedef _dart_alphasort = int Function(
  ffi.Pointer<ffi.Pointer<dirent>> arg0,
  ffi.Pointer<ffi.Pointer<dirent>> arg1,
);

typedef _c_dirfd = ffi.Int32 Function(
  ffi.Pointer<DIR> dirp,
);

typedef _dart_dirfd = int Function(
  ffi.Pointer<DIR> dirp,
);

typedef _typedefC_2 = ffi.Int32 Function(
  ffi.Pointer<dirent>,
);

typedef _typedefC_3 = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<dirent>>,
  ffi.Pointer<ffi.Pointer<dirent>>,
);

typedef _c_scandir = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg3,
);

typedef _dart_scandir = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Pointer<ffi.Pointer<dirent>>> arg1,
  ffi.Pointer<ffi.NativeFunction<_typedefC_2>> arg2,
  ffi.Pointer<ffi.NativeFunction<_typedefC_3>> arg3,
);

typedef _c_getdirentries = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Int32 arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _dart_getdirentries = int Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
  ffi.Pointer<ffi.Int64> arg3,
);

typedef _c___opendir2 = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart___opendir2 = ffi.Pointer<DIR> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
