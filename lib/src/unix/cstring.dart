/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// string.h 头文件在dart的移植.
class CString {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CString(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

  ffi.Pointer<ffi.Void> memchr(
    ffi.Pointer<ffi.Void> __s,
    int __c,
    int __n,
  ) {
    _memchr ??= _dylib.lookupFunction<_c_memchr, _dart_memchr>('memchr');
    return _memchr(
      __s,
      __c,
      __n,
    );
  }

  _dart_memchr _memchr;

  int memcmp(
    ffi.Pointer<ffi.Void> __s1,
    ffi.Pointer<ffi.Void> __s2,
    int __n,
  ) {
    _memcmp ??= _dylib.lookupFunction<_c_memcmp, _dart_memcmp>('memcmp');
    return _memcmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_memcmp _memcmp;

  ffi.Pointer<ffi.Void> memcpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __n,
  ) {
    _memcpy ??= _dylib.lookupFunction<_c_memcpy, _dart_memcpy>('memcpy');
    return _memcpy(
      __dst,
      __src,
      __n,
    );
  }

  _dart_memcpy _memcpy;

  ffi.Pointer<ffi.Void> memmove(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __len,
  ) {
    _memmove ??= _dylib.lookupFunction<_c_memmove, _dart_memmove>('memmove');
    return _memmove(
      __dst,
      __src,
      __len,
    );
  }

  _dart_memmove _memmove;

  ffi.Pointer<ffi.Void> memset(
    ffi.Pointer<ffi.Void> __b,
    int __c,
    int __len,
  ) {
    _memset ??= _dylib.lookupFunction<_c_memset, _dart_memset>('memset');
    return _memset(
      __b,
      __c,
      __len,
    );
  }

  _dart_memset _memset;

  ffi.Pointer<ffi.Int8> strcat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcat ??= _dylib.lookupFunction<_c_strcat, _dart_strcat>('strcat');
    return _strcat(
      __s1,
      __s2,
    );
  }

  _dart_strcat _strcat;

  ffi.Pointer<ffi.Int8> strchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strchr ??= _dylib.lookupFunction<_c_strchr, _dart_strchr>('strchr');
    return _strchr(
      __s,
      __c,
    );
  }

  _dart_strchr _strchr;

  int strcmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcmp ??= _dylib.lookupFunction<_c_strcmp, _dart_strcmp>('strcmp');
    return _strcmp(
      __s1,
      __s2,
    );
  }

  _dart_strcmp _strcmp;

  int strcoll(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
  ) {
    _strcoll ??= _dylib.lookupFunction<_c_strcoll, _dart_strcoll>('strcoll');
    return _strcoll(
      __s1,
      __s2,
    );
  }

  _dart_strcoll _strcoll;

  ffi.Pointer<ffi.Int8> strcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _strcpy ??= _dylib.lookupFunction<_c_strcpy, _dart_strcpy>('strcpy');
    return _strcpy(
      __dst,
      __src,
    );
  }

  _dart_strcpy _strcpy;

  int strcspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    _strcspn ??= _dylib.lookupFunction<_c_strcspn, _dart_strcspn>('strcspn');
    return _strcspn(
      __s,
      __charset,
    );
  }

  _dart_strcspn _strcspn;

  ffi.Pointer<ffi.Int8> strerror(
    int __errnum,
  ) {
    _strerror ??=
        _dylib.lookupFunction<_c_strerror, _dart_strerror>('strerror');
    return _strerror(
      __errnum,
    );
  }

  _dart_strerror _strerror;

  int strlen(
    ffi.Pointer<ffi.Int8> __s,
  ) {
    _strlen ??= _dylib.lookupFunction<_c_strlen, _dart_strlen>('strlen');
    return _strlen(
      __s,
    );
  }

  _dart_strlen _strlen;

  ffi.Pointer<ffi.Int8> strncat(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncat ??= _dylib.lookupFunction<_c_strncat, _dart_strncat>('strncat');
    return _strncat(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncat _strncat;

  int strncmp(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strncmp ??= _dylib.lookupFunction<_c_strncmp, _dart_strncmp>('strncmp');
    return _strncmp(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strncmp _strncmp;

  ffi.Pointer<ffi.Int8> strncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _strncpy ??= _dylib.lookupFunction<_c_strncpy, _dart_strncpy>('strncpy');
    return _strncpy(
      __dst,
      __src,
      __n,
    );
  }

  _dart_strncpy _strncpy;

  ffi.Pointer<ffi.Int8> strpbrk(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    _strpbrk ??= _dylib.lookupFunction<_c_strpbrk, _dart_strpbrk>('strpbrk');
    return _strpbrk(
      __s,
      __charset,
    );
  }

  _dart_strpbrk _strpbrk;

  ffi.Pointer<ffi.Int8> strrchr(
    ffi.Pointer<ffi.Int8> __s,
    int __c,
  ) {
    _strrchr ??= _dylib.lookupFunction<_c_strrchr, _dart_strrchr>('strrchr');
    return _strrchr(
      __s,
      __c,
    );
  }

  _dart_strrchr _strrchr;

  int strspn(
    ffi.Pointer<ffi.Int8> __s,
    ffi.Pointer<ffi.Int8> __charset,
  ) {
    _strspn ??= _dylib.lookupFunction<_c_strspn, _dart_strspn>('strspn');
    return _strspn(
      __s,
      __charset,
    );
  }

  _dart_strspn _strspn;

  ffi.Pointer<ffi.Int8> strstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    _strstr ??= _dylib.lookupFunction<_c_strstr, _dart_strstr>('strstr');
    return _strstr(
      __big,
      __little,
    );
  }

  _dart_strstr _strstr;

  ffi.Pointer<ffi.Int8> strtok(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
  ) {
    _strtok ??= _dylib.lookupFunction<_c_strtok, _dart_strtok>('strtok');
    return _strtok(
      __str,
      __sep,
    );
  }

  _dart_strtok _strtok;

  int strxfrm(
    ffi.Pointer<ffi.Int8> __s1,
    ffi.Pointer<ffi.Int8> __s2,
    int __n,
  ) {
    _strxfrm ??= _dylib.lookupFunction<_c_strxfrm, _dart_strxfrm>('strxfrm');
    return _strxfrm(
      __s1,
      __s2,
      __n,
    );
  }

  _dart_strxfrm _strxfrm;

  ffi.Pointer<ffi.Int8> strtok_r(
    ffi.Pointer<ffi.Int8> __str,
    ffi.Pointer<ffi.Int8> __sep,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
  ) {
    _strtok_r ??=
        _dylib.lookupFunction<_c_strtok_r, _dart_strtok_r>('strtok_r');
    return _strtok_r(
      __str,
      __sep,
      __lasts,
    );
  }

  _dart_strtok_r _strtok_r;

  int strerror_r(
    int __errnum,
    ffi.Pointer<ffi.Int8> __strerrbuf,
    int __buflen,
  ) {
    _strerror_r ??=
        _dylib.lookupFunction<_c_strerror_r, _dart_strerror_r>('strerror_r');
    return _strerror_r(
      __errnum,
      __strerrbuf,
      __buflen,
    );
  }

  _dart_strerror_r _strerror_r;

  ffi.Pointer<ffi.Int8> strdup(
    ffi.Pointer<ffi.Int8> __s1,
  ) {
    _strdup ??= _dylib.lookupFunction<_c_strdup, _dart_strdup>('strdup');
    return _strdup(
      __s1,
    );
  }

  _dart_strdup _strdup;

  ffi.Pointer<ffi.Void> memccpy(
    ffi.Pointer<ffi.Void> __dst,
    ffi.Pointer<ffi.Void> __src,
    int __c,
    int __n,
  ) {
    _memccpy ??= _dylib.lookupFunction<_c_memccpy, _dart_memccpy>('memccpy');
    return _memccpy(
      __dst,
      __src,
      __c,
      __n,
    );
  }

  _dart_memccpy _memccpy;

  ffi.Pointer<ffi.Int8> stpcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
  ) {
    _stpcpy ??= _dylib.lookupFunction<_c_stpcpy, _dart_stpcpy>('stpcpy');
    return _stpcpy(
      __dst,
      __src,
    );
  }

  _dart_stpcpy _stpcpy;

  ffi.Pointer<ffi.Int8> stpncpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __src,
    int __n,
  ) {
    _stpncpy ??= _dylib.lookupFunction<_c_stpncpy, _dart_stpncpy>('stpncpy');
    return _stpncpy(
      __dst,
      __src,
      __n,
    );
  }

  _dart_stpncpy _stpncpy;

  ffi.Pointer<ffi.Int8> strndup(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    _strndup ??= _dylib.lookupFunction<_c_strndup, _dart_strndup>('strndup');
    return _strndup(
      __s1,
      __n,
    );
  }

  _dart_strndup _strndup;

  int strnlen(
    ffi.Pointer<ffi.Int8> __s1,
    int __n,
  ) {
    _strnlen ??= _dylib.lookupFunction<_c_strnlen, _dart_strnlen>('strnlen');
    return _strnlen(
      __s1,
      __n,
    );
  }

  _dart_strnlen _strnlen;

  ffi.Pointer<ffi.Int8> strsignal(
    int __sig,
  ) {
    _strsignal ??=
        _dylib.lookupFunction<_c_strsignal, _dart_strsignal>('strsignal');
    return _strsignal(
      __sig,
    );
  }

  _dart_strsignal _strsignal;

  int memset_s(
    ffi.Pointer<ffi.Void> __s,
    int __smax,
    int __c,
    int __n,
  ) {
    _memset_s ??=
        _dylib.lookupFunction<_c_memset_s, _dart_memset_s>('memset_s');
    return _memset_s(
      __s,
      __smax,
      __c,
      __n,
    );
  }

  _dart_memset_s _memset_s;

  ffi.Pointer<ffi.Void> memmem(
    ffi.Pointer<ffi.Void> __big,
    int __big_len,
    ffi.Pointer<ffi.Void> __little,
    int __little_len,
  ) {
    _memmem ??= _dylib.lookupFunction<_c_memmem, _dart_memmem>('memmem');
    return _memmem(
      __big,
      __big_len,
      __little,
      __little_len,
    );
  }

  _dart_memmem _memmem;

  void memset_pattern4(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern4,
    int __len,
  ) {
    _memset_pattern4 ??=
        _dylib.lookupFunction<_c_memset_pattern4, _dart_memset_pattern4>(
            'memset_pattern4');
    return _memset_pattern4(
      __b,
      __pattern4,
      __len,
    );
  }

  _dart_memset_pattern4 _memset_pattern4;

  void memset_pattern8(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern8,
    int __len,
  ) {
    _memset_pattern8 ??=
        _dylib.lookupFunction<_c_memset_pattern8, _dart_memset_pattern8>(
            'memset_pattern8');
    return _memset_pattern8(
      __b,
      __pattern8,
      __len,
    );
  }

  _dart_memset_pattern8 _memset_pattern8;

  void memset_pattern16(
    ffi.Pointer<ffi.Void> __b,
    ffi.Pointer<ffi.Void> __pattern16,
    int __len,
  ) {
    _memset_pattern16 ??=
        _dylib.lookupFunction<_c_memset_pattern16, _dart_memset_pattern16>(
            'memset_pattern16');
    return _memset_pattern16(
      __b,
      __pattern16,
      __len,
    );
  }

  _dart_memset_pattern16 _memset_pattern16;

  ffi.Pointer<ffi.Int8> strcasestr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
  ) {
    _strcasestr ??=
        _dylib.lookupFunction<_c_strcasestr, _dart_strcasestr>('strcasestr');
    return _strcasestr(
      __big,
      __little,
    );
  }

  _dart_strcasestr _strcasestr;

  ffi.Pointer<ffi.Int8> strnstr(
    ffi.Pointer<ffi.Int8> __big,
    ffi.Pointer<ffi.Int8> __little,
    int __len,
  ) {
    _strnstr ??= _dylib.lookupFunction<_c_strnstr, _dart_strnstr>('strnstr');
    return _strnstr(
      __big,
      __little,
      __len,
    );
  }

  _dart_strnstr _strnstr;

  int strlcat(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    _strlcat ??= _dylib.lookupFunction<_c_strlcat, _dart_strlcat>('strlcat');
    return _strlcat(
      __dst,
      __source,
      __size,
    );
  }

  _dart_strlcat _strlcat;

  int strlcpy(
    ffi.Pointer<ffi.Int8> __dst,
    ffi.Pointer<ffi.Int8> __source,
    int __size,
  ) {
    _strlcpy ??= _dylib.lookupFunction<_c_strlcpy, _dart_strlcpy>('strlcpy');
    return _strlcpy(
      __dst,
      __source,
      __size,
    );
  }

  _dart_strlcpy _strlcpy;

  void strmode(
    int __mode,
    ffi.Pointer<ffi.Int8> __bp,
  ) {
    _strmode ??= _dylib.lookupFunction<_c_strmode, _dart_strmode>('strmode');
    return _strmode(
      __mode,
      __bp,
    );
  }

  _dart_strmode _strmode;

  ffi.Pointer<ffi.Int8> strsep(
    ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
    ffi.Pointer<ffi.Int8> __delim,
  ) {
    _strsep ??= _dylib.lookupFunction<_c_strsep, _dart_strsep>('strsep');
    return _strsep(
      __stringp,
      __delim,
    );
  }

  _dart_strsep _strsep;

  void swab(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _swab ??= _dylib.lookupFunction<_c_swab, _dart_swab>('swab');
    return _swab(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_swab _swab;

  int timingsafe_bcmp(
    ffi.Pointer<ffi.Void> __b1,
    ffi.Pointer<ffi.Void> __b2,
    int __len,
  ) {
    _timingsafe_bcmp ??=
        _dylib.lookupFunction<_c_timingsafe_bcmp, _dart_timingsafe_bcmp>(
            'timingsafe_bcmp');
    return _timingsafe_bcmp(
      __b1,
      __b2,
      __len,
    );
  }

  _dart_timingsafe_bcmp _timingsafe_bcmp;

  int bcmp(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _bcmp ??= _dylib.lookupFunction<_c_bcmp, _dart_bcmp>('bcmp');
    return _bcmp(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_bcmp _bcmp;

  void bcopy(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    _bcopy ??= _dylib.lookupFunction<_c_bcopy, _dart_bcopy>('bcopy');
    return _bcopy(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_bcopy _bcopy;

  void bzero(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    _bzero ??= _dylib.lookupFunction<_c_bzero, _dart_bzero>('bzero');
    return _bzero(
      arg0,
      arg1,
    );
  }

  _dart_bzero _bzero;

  ffi.Pointer<ffi.Int8> index(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _index ??= _dylib.lookupFunction<_c_index, _dart_index>('index');
    return _index(
      arg0,
      arg1,
    );
  }

  _dart_index _index;

  ffi.Pointer<ffi.Int8> rindex(
    ffi.Pointer<ffi.Int8> arg0,
    int arg1,
  ) {
    _rindex ??= _dylib.lookupFunction<_c_rindex, _dart_rindex>('rindex');
    return _rindex(
      arg0,
      arg1,
    );
  }

  _dart_rindex _rindex;

  int ffs(
    int arg0,
  ) {
    _ffs ??= _dylib.lookupFunction<_c_ffs, _dart_ffs>('ffs');
    return _ffs(
      arg0,
    );
  }

  _dart_ffs _ffs;

  int strcasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _strcasecmp ??=
        _dylib.lookupFunction<_c_strcasecmp, _dart_strcasecmp>('strcasecmp');
    return _strcasecmp(
      arg0,
      arg1,
    );
  }

  _dart_strcasecmp _strcasecmp;

  int strncasecmp(
    ffi.Pointer<ffi.Int8> arg0,
    ffi.Pointer<ffi.Int8> arg1,
    int arg2,
  ) {
    _strncasecmp ??=
        _dylib.lookupFunction<_c_strncasecmp, _dart_strncasecmp>('strncasecmp');
    return _strncasecmp(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_strncasecmp _strncasecmp;

  int ffsl(
    int arg0,
  ) {
    _ffsl ??= _dylib.lookupFunction<_c_ffsl, _dart_ffsl>('ffsl');
    return _ffsl(
      arg0,
    );
  }

  _dart_ffsl _ffsl;

  int ffsll(
    int arg0,
  ) {
    _ffsll ??= _dylib.lookupFunction<_c_ffsll, _dart_ffsll>('ffsll');
    return _ffsll(
      arg0,
    );
  }

  _dart_ffsll _ffsll;

  int fls(
    int arg0,
  ) {
    _fls ??= _dylib.lookupFunction<_c_fls, _dart_fls>('fls');
    return _fls(
      arg0,
    );
  }

  _dart_fls _fls;

  int flsl(
    int arg0,
  ) {
    _flsl ??= _dylib.lookupFunction<_c_flsl, _dart_flsl>('flsl');
    return _flsl(
      arg0,
    );
  }

  _dart_flsl _flsl;

  int flsll(
    int arg0,
  ) {
    _flsll ??= _dylib.lookupFunction<_c_flsll, _dart_flsll>('flsll');
    return _flsll(
      arg0,
    );
  }

  _dart_flsll _flsll;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

// const String __DARWIN_SUF_64_BIT_INO_T = '$INODE64';

// const String __DARWIN_SUF_1050 = '$1050';

// const String __DARWIN_SUF_EXTSN = '$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

typedef _c_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memchr = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __s,
  int __c,
  int __n,
);

typedef _c_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  ffi.Uint64 __n,
);

typedef _dart_memcmp = int Function(
  ffi.Pointer<ffi.Void> __s1,
  ffi.Pointer<ffi.Void> __s2,
  int __n,
);

typedef _c_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __n,
);

typedef _dart_memcpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __n,
);

typedef _c_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Uint64 __len,
);

typedef _dart_memmove = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __len,
);

typedef _c_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Int32 __c,
  ffi.Uint64 __len,
);

typedef _dart_memset = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __b,
  int __c,
  int __len,
);

typedef _c_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcoll = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _dart_strcoll = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
);

typedef _c_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_strcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_strcspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strcspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strerror = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __errnum,
);

typedef _dart_strerror = ffi.Pointer<ffi.Int8> Function(
  int __errnum,
);

typedef _c_strlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _dart_strlen = int Function(
  ffi.Pointer<ffi.Int8> __s,
);

typedef _c_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncat = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strncmp = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_strncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strpbrk = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Int32 __c,
);

typedef _dart_strrchr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s,
  int __c,
);

typedef _c_strspn = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _dart_strspn = int Function(
  ffi.Pointer<ffi.Int8> __s,
  ffi.Pointer<ffi.Int8> __charset,
);

typedef _c_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _dart_strtok = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
);

typedef _c_strxfrm = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  ffi.Uint64 __n,
);

typedef _dart_strxfrm = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Pointer<ffi.Int8> __s2,
  int __n,
);

typedef _c_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _dart_strtok_r = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __str,
  ffi.Pointer<ffi.Int8> __sep,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __lasts,
);

typedef _c_strerror_r = ffi.Int32 Function(
  ffi.Int32 __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  ffi.Uint64 __buflen,
);

typedef _dart_strerror_r = int Function(
  int __errnum,
  ffi.Pointer<ffi.Int8> __strerrbuf,
  int __buflen,
);

typedef _c_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _dart_strdup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
);

typedef _c_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memccpy = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __dst,
  ffi.Pointer<ffi.Void> __src,
  int __c,
  int __n,
);

typedef _c_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _dart_stpcpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
);

typedef _c_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  ffi.Uint64 __n,
);

typedef _dart_stpncpy = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __src,
  int __n,
);

typedef _c_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strndup = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strnlen = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __s1,
  ffi.Uint64 __n,
);

typedef _dart_strnlen = int Function(
  ffi.Pointer<ffi.Int8> __s1,
  int __n,
);

typedef _c_strsignal = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 __sig,
);

typedef _dart_strsignal = ffi.Pointer<ffi.Int8> Function(
  int __sig,
);

typedef _c_memset_s = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __s,
  ffi.Uint64 __smax,
  ffi.Int32 __c,
  ffi.Uint64 __n,
);

typedef _dart_memset_s = int Function(
  ffi.Pointer<ffi.Void> __s,
  int __smax,
  int __c,
  int __n,
);

typedef _c_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  ffi.Uint64 __big_len,
  ffi.Pointer<ffi.Void> __little,
  ffi.Uint64 __little_len,
);

typedef _dart_memmem = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> __big,
  int __big_len,
  ffi.Pointer<ffi.Void> __little,
  int __little_len,
);

typedef _c_memset_pattern4 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern4 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern4,
  int __len,
);

typedef _c_memset_pattern8 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern8 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern8,
  int __len,
);

typedef _c_memset_pattern16 = ffi.Void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  ffi.Uint64 __len,
);

typedef _dart_memset_pattern16 = void Function(
  ffi.Pointer<ffi.Void> __b,
  ffi.Pointer<ffi.Void> __pattern16,
  int __len,
);

typedef _c_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _dart_strcasestr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
);

typedef _c_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  ffi.Uint64 __len,
);

typedef _dart_strnstr = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> __big,
  ffi.Pointer<ffi.Int8> __little,
  int __len,
);

typedef _c_strlcat = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcat = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strlcpy = ffi.Uint64 Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  ffi.Uint64 __size,
);

typedef _dart_strlcpy = int Function(
  ffi.Pointer<ffi.Int8> __dst,
  ffi.Pointer<ffi.Int8> __source,
  int __size,
);

typedef _c_strmode = ffi.Void Function(
  ffi.Int32 __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _dart_strmode = void Function(
  int __mode,
  ffi.Pointer<ffi.Int8> __bp,
);

typedef _c_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _dart_strsep = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Pointer<ffi.Int8>> __stringp,
  ffi.Pointer<ffi.Int8> __delim,
);

typedef _c_swab = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Int64 arg2,
);

typedef _dart_swab = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_timingsafe_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  ffi.Uint64 __len,
);

typedef _dart_timingsafe_bcmp = int Function(
  ffi.Pointer<ffi.Void> __b1,
  ffi.Pointer<ffi.Void> __b2,
  int __len,
);

typedef _c_bcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcmp = int Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bcopy = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_bcopy = void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Pointer<ffi.Void> arg1,
  int arg2,
);

typedef _c_bzero = ffi.Void Function(
  ffi.Pointer<ffi.Void> arg0,
  ffi.Uint64 arg1,
);

typedef _dart_bzero = void Function(
  ffi.Pointer<ffi.Void> arg0,
  int arg1,
);

typedef _c_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_index = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Int32 arg1,
);

typedef _dart_rindex = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> arg0,
  int arg1,
);

typedef _c_ffs = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_ffs = int Function(
  int arg0,
);

typedef _c_strcasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_strcasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_strncasecmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  ffi.Uint64 arg2,
);

typedef _dart_strncasecmp = int Function(
  ffi.Pointer<ffi.Int8> arg0,
  ffi.Pointer<ffi.Int8> arg1,
  int arg2,
);

typedef _c_ffsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsl = int Function(
  int arg0,
);

typedef _c_ffsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_ffsll = int Function(
  int arg0,
);

typedef _c_fls = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_fls = int Function(
  int arg0,
);

typedef _c_flsl = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsl = int Function(
  int arg0,
);

typedef _c_flsll = ffi.Int32 Function(
  ffi.Int64 arg0,
);

typedef _dart_flsll = int Function(
  int arg0,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
