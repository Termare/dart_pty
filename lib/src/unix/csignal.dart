/// AUTO GENERATED FILE, DO NOT EDIT.
///
/// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// signal.h 头文件在dart的移植.
class CSignal {
  /// Holds the Dynamic library.
  final ffi.DynamicLibrary _dylib;

  /// The symbols are looked up in [dynamicLibrary].
  CSignal(ffi.DynamicLibrary dynamicLibrary) : _dylib = dynamicLibrary;

// ffi.Pointer<ffi.NativeFunction<_typedefC_5>> signal(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
// ) {
// _signal ??= _dylib.lookupFunction<_c_signal,_dart_signal>('signal');
//   return _signal(
//     arg0,
//     arg1,
//   );
// }
// _dart_signal _signal;

  int raise(
    int arg0,
  ) {
    _raise ??= _dylib.lookupFunction<_c_raise, _dart_raise>('raise');
    return _raise(
      arg0,
    );
  }

  _dart_raise _raise;

// ffi.Pointer<ffi.NativeFunction<_typedefC_7>> bsd_signal(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg1,
// ) {
// _bsd_signal ??= _dylib.lookupFunction<_c_bsd_signal,_dart_bsd_signal>('bsd_signal');
//   return _bsd_signal(
//     arg0,
//     arg1,
//   );
// }
// _dart_bsd_signal _bsd_signal;

  int kill(
    int arg0,
    int arg1,
  ) {
    _kill ??= _dylib.lookupFunction<_c_kill, _dart_kill>('kill');
    return _kill(
      arg0,
      arg1,
    );
  }

  _dart_kill _kill;

  int killpg(
    int arg0,
    int arg1,
  ) {
    _killpg ??= _dylib.lookupFunction<_c_killpg, _dart_killpg>('killpg');
    return _killpg(
      arg0,
      arg1,
    );
  }

  _dart_killpg _killpg;

  int pthread_kill(
    ffi.Pointer<_opaque_pthread_t> arg0,
    int arg1,
  ) {
    _pthread_kill ??= _dylib
        .lookupFunction<_c_pthread_kill, _dart_pthread_kill>('pthread_kill');
    return _pthread_kill(
      arg0,
      arg1,
    );
  }

  _dart_pthread_kill _pthread_kill;

  int pthread_sigmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _pthread_sigmask ??=
        _dylib.lookupFunction<_c_pthread_sigmask, _dart_pthread_sigmask>(
            'pthread_sigmask');
    return _pthread_sigmask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_pthread_sigmask _pthread_sigmask;

// int sigaction(
//   int arg0,
//   ffi.Pointer<sigaction> arg1,
//   ffi.Pointer<sigaction> arg2,
// ) {
// _sigaction ??= _dylib.lookupFunction<_c_sigaction,_dart_sigaction>('sigaction');
//   return _sigaction(
//     arg0,
//     arg1,
//     arg2,
//   );
// }
  _dart_sigaction _sigaction;

  int sigaddset(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    _sigaddset ??=
        _dylib.lookupFunction<_c_sigaddset, _dart_sigaddset>('sigaddset');
    return _sigaddset(
      arg0,
      arg1,
    );
  }

  _dart_sigaddset _sigaddset;

  int sigaltstack(
    ffi.Pointer<__darwin_sigaltstack> arg0,
    ffi.Pointer<__darwin_sigaltstack> arg1,
  ) {
    _sigaltstack ??=
        _dylib.lookupFunction<_c_sigaltstack, _dart_sigaltstack>('sigaltstack');
    return _sigaltstack(
      arg0,
      arg1,
    );
  }

  _dart_sigaltstack _sigaltstack;

  int sigdelset(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    _sigdelset ??=
        _dylib.lookupFunction<_c_sigdelset, _dart_sigdelset>('sigdelset');
    return _sigdelset(
      arg0,
      arg1,
    );
  }

  _dart_sigdelset _sigdelset;

  int sigemptyset(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    _sigemptyset ??=
        _dylib.lookupFunction<_c_sigemptyset, _dart_sigemptyset>('sigemptyset');
    return _sigemptyset(
      arg0,
    );
  }

  _dart_sigemptyset _sigemptyset;

  int sigfillset(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    _sigfillset ??=
        _dylib.lookupFunction<_c_sigfillset, _dart_sigfillset>('sigfillset');
    return _sigfillset(
      arg0,
    );
  }

  _dart_sigfillset _sigfillset;

  int sighold(
    int arg0,
  ) {
    _sighold ??= _dylib.lookupFunction<_c_sighold, _dart_sighold>('sighold');
    return _sighold(
      arg0,
    );
  }

  _dart_sighold _sighold;

  int sigignore(
    int arg0,
  ) {
    _sigignore ??=
        _dylib.lookupFunction<_c_sigignore, _dart_sigignore>('sigignore');
    return _sigignore(
      arg0,
    );
  }

  _dart_sigignore _sigignore;

  int siginterrupt(
    int arg0,
    int arg1,
  ) {
    _siginterrupt ??= _dylib
        .lookupFunction<_c_siginterrupt, _dart_siginterrupt>('siginterrupt');
    return _siginterrupt(
      arg0,
      arg1,
    );
  }

  _dart_siginterrupt _siginterrupt;

  int sigismember(
    ffi.Pointer<ffi.Uint32> arg0,
    int arg1,
  ) {
    _sigismember ??=
        _dylib.lookupFunction<_c_sigismember, _dart_sigismember>('sigismember');
    return _sigismember(
      arg0,
      arg1,
    );
  }

  _dart_sigismember _sigismember;

  int sigpause(
    int arg0,
  ) {
    _sigpause ??=
        _dylib.lookupFunction<_c_sigpause, _dart_sigpause>('sigpause');
    return _sigpause(
      arg0,
    );
  }

  _dart_sigpause _sigpause;

  int sigpending(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    _sigpending ??=
        _dylib.lookupFunction<_c_sigpending, _dart_sigpending>('sigpending');
    return _sigpending(
      arg0,
    );
  }

  _dart_sigpending _sigpending;

  int sigprocmask(
    int arg0,
    ffi.Pointer<ffi.Uint32> arg1,
    ffi.Pointer<ffi.Uint32> arg2,
  ) {
    _sigprocmask ??=
        _dylib.lookupFunction<_c_sigprocmask, _dart_sigprocmask>('sigprocmask');
    return _sigprocmask(
      arg0,
      arg1,
      arg2,
    );
  }

  _dart_sigprocmask _sigprocmask;

  int sigrelse(
    int arg0,
  ) {
    _sigrelse ??=
        _dylib.lookupFunction<_c_sigrelse, _dart_sigrelse>('sigrelse');
    return _sigrelse(
      arg0,
    );
  }

  _dart_sigrelse _sigrelse;

// ffi.Pointer<ffi.NativeFunction<_typedefC_9>> sigset(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
// ) {
// _sigset ??= _dylib.lookupFunction<_c_sigset,_dart_sigset>('sigset');
//   return _sigset(
//     arg0,
//     arg1,
//   );
// }
// _dart_sigset _sigset;

  int sigsuspend(
    ffi.Pointer<ffi.Uint32> arg0,
  ) {
    _sigsuspend ??=
        _dylib.lookupFunction<_c_sigsuspend, _dart_sigsuspend>('sigsuspend');
    return _sigsuspend(
      arg0,
    );
  }

  _dart_sigsuspend _sigsuspend;

  int sigwait(
    ffi.Pointer<ffi.Uint32> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    _sigwait ??= _dylib.lookupFunction<_c_sigwait, _dart_sigwait>('sigwait');
    return _sigwait(
      arg0,
      arg1,
    );
  }

  _dart_sigwait _sigwait;

  void psignal(
    int arg0,
    ffi.Pointer<ffi.Int8> arg1,
  ) {
    _psignal ??= _dylib.lookupFunction<_c_psignal, _dart_psignal>('psignal');
    return _psignal(
      arg0,
      arg1,
    );
  }

  _dart_psignal _psignal;

  int sigblock(
    int arg0,
  ) {
    _sigblock ??=
        _dylib.lookupFunction<_c_sigblock, _dart_sigblock>('sigblock');
    return _sigblock(
      arg0,
    );
  }

  _dart_sigblock _sigblock;

  int sigsetmask(
    int arg0,
  ) {
    _sigsetmask ??=
        _dylib.lookupFunction<_c_sigsetmask, _dart_sigsetmask>('sigsetmask');
    return _sigsetmask(
      arg0,
    );
  }

  _dart_sigsetmask _sigsetmask;

// int sigvec(
//   int arg0,
//   ffi.Pointer<sigvec> arg1,
//   ffi.Pointer<sigvec> arg2,
// ) {
// _sigvec ??= _dylib.lookupFunction<_c_sigvec,_dart_sigvec>('sigvec');
//   return _sigvec(
//     arg0,
//     arg1,
//     arg2,
//   );
// }
  _dart_sigvec _sigvec;

  int __sigbits(
    int __signo,
  ) {
    ___sigbits ??=
        _dylib.lookupFunction<_c___sigbits, _dart___sigbits>('__sigbits');
    return ___sigbits(
      __signo,
    );
  }

  _dart___sigbits ___sigbits;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  ffi.Pointer<ffi.Void> __arg;

  ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Struct {}

class _opaque_pthread_cond_t extends ffi.Struct {}

class _opaque_pthread_condattr_t extends ffi.Struct {}

class _opaque_pthread_mutex_t extends ffi.Struct {}

class _opaque_pthread_mutexattr_t extends ffi.Struct {}

class _opaque_pthread_once_t extends ffi.Struct {}

class _opaque_pthread_rwlock_t extends ffi.Struct {}

class _opaque_pthread_rwlockattr_t extends ffi.Struct {}

class _opaque_pthread_t extends ffi.Struct {}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  int __eax;

  @ffi.Uint32()
  int __ebx;

  @ffi.Uint32()
  int __ecx;

  @ffi.Uint32()
  int __edx;

  @ffi.Uint32()
  int __edi;

  @ffi.Uint32()
  int __esi;

  @ffi.Uint32()
  int __ebp;

  @ffi.Uint32()
  int __esp;

  @ffi.Uint32()
  int __ss;

  @ffi.Uint32()
  int __eflags;

  @ffi.Uint32()
  int __eip;

  @ffi.Uint32()
  int __cs;

  @ffi.Uint32()
  int __ds;

  @ffi.Uint32()
  int __es;

  @ffi.Uint32()
  int __fs;

  @ffi.Uint32()
  int __gs;
}

// class __darwin_fp_control extends ffi.Struct{
//   @ffi.Uint16()
//   int __invalid;

//   @ffi.Uint16()
//   int __denorm;

//   @ffi.Uint16()
//   int __zdiv;

//   @ffi.Uint16()
//   int __ovrfl;

//   @ffi.Uint16()
//   int __undfl;

//   @ffi.Uint16()
//   int __precis;

//   @ffi.Uint16()
//   int ;

//   @ffi.Uint16()
//   int __pc;

//   @ffi.Uint16()
//   int __rc;

//   @ffi.Uint16()
//   int _1;

//   @ffi.Uint16()
//   int _2;

// }

class __darwin_fp_status extends ffi.Struct {
  @ffi.Uint16()
  int __invalid;

  @ffi.Uint16()
  int __denorm;

  @ffi.Uint16()
  int __zdiv;

  @ffi.Uint16()
  int __ovrfl;

  @ffi.Uint16()
  int __undfl;

  @ffi.Uint16()
  int __precis;

  @ffi.Uint16()
  int __stkflt;

  @ffi.Uint16()
  int __errsumm;

  @ffi.Uint16()
  int __c0;

  @ffi.Uint16()
  int __c1;

  @ffi.Uint16()
  int __c2;

  @ffi.Uint16()
  int __tos;

  @ffi.Uint16()
  int __c3;

  @ffi.Uint16()
  int __busy;
}

class __darwin_mmst_reg extends ffi.Struct {}

class __darwin_xmm_reg extends ffi.Struct {}

class __darwin_ymm_reg extends ffi.Struct {}

class __darwin_zmm_reg extends ffi.Struct {}

class __darwin_opmask_reg extends ffi.Struct {}

class __darwin_i386_float_state extends ffi.Struct {}

class __darwin_i386_avx_state extends ffi.Struct {}

class __darwin_i386_avx512_state extends ffi.Struct {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  int __trapno;

  @ffi.Uint16()
  int __cpu;

  @ffi.Uint32()
  int __err;

  @ffi.Uint32()
  int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  int __dr0;

  @ffi.Uint32()
  int __dr1;

  @ffi.Uint32()
  int __dr2;

  @ffi.Uint32()
  int __dr3;

  @ffi.Uint32()
  int __dr4;

  @ffi.Uint32()
  int __dr5;

  @ffi.Uint32()
  int __dr6;

  @ffi.Uint32()
  int __dr7;
}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  int __rax;

  @ffi.Uint64()
  int __rbx;

  @ffi.Uint64()
  int __rcx;

  @ffi.Uint64()
  int __rdx;

  @ffi.Uint64()
  int __rdi;

  @ffi.Uint64()
  int __rsi;

  @ffi.Uint64()
  int __rbp;

  @ffi.Uint64()
  int __rsp;

  @ffi.Uint64()
  int __r8;

  @ffi.Uint64()
  int __r9;

  @ffi.Uint64()
  int __r10;

  @ffi.Uint64()
  int __r11;

  @ffi.Uint64()
  int __r12;

  @ffi.Uint64()
  int __r13;

  @ffi.Uint64()
  int __r14;

  @ffi.Uint64()
  int __r15;

  @ffi.Uint64()
  int __rip;

  @ffi.Uint64()
  int __rflags;

  @ffi.Uint64()
  int __cs;

  @ffi.Uint64()
  int __fs;

  @ffi.Uint64()
  int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {}

class __darwin_x86_float_state64 extends ffi.Struct {}

class __darwin_x86_avx_state64 extends ffi.Struct {}

class __darwin_x86_avx512_state64 extends ffi.Struct {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  int __trapno;

  @ffi.Uint16()
  int __cpu;

  @ffi.Uint32()
  int __err;

  @ffi.Uint64()
  int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  int __dr0;

  @ffi.Uint64()
  int __dr1;

  @ffi.Uint64()
  int __dr2;

  @ffi.Uint64()
  int __dr3;

  @ffi.Uint64()
  int __dr4;

  @ffi.Uint64()
  int __dr5;

  @ffi.Uint64()
  int __dr6;

  @ffi.Uint64()
  int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Struct {}

class __darwin_mcontext32 extends ffi.Struct {}

class __darwin_mcontext_avx32 extends ffi.Struct {}

class __darwin_mcontext_avx512_32 extends ffi.Struct {}

class __darwin_mcontext64 extends ffi.Struct {}

class __darwin_mcontext64_full extends ffi.Struct {}

class __darwin_mcontext_avx64 extends ffi.Struct {}

class __darwin_mcontext_avx64_full extends ffi.Struct {}

class __darwin_mcontext_avx512_64 extends ffi.Struct {}

class __darwin_mcontext_avx512_64_full extends ffi.Struct {}

class __darwin_sigaltstack extends ffi.Struct {
  ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  int ss_size;

  @ffi.Int32()
  int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {}

class sigevent extends ffi.Struct {}

class __siginfo extends ffi.Struct {}

class siginfo_t extends ffi.Struct {}

class __sigaction extends ffi.Struct {}

class sigaction extends ffi.Struct {}

class sigvec extends ffi.Struct {
  ffi.Pointer<ffi.NativeFunction<_typedefC_4>> sv_handler;

  @ffi.Int32()
  int sv_mask;

  @ffi.Int32()
  int sv_flags;
}

class sigstack extends ffi.Struct {
  ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  int ss_onstack;
}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

// const String __DARWIN_SUF_64_BIT_INO_T = '$INODE64';

// const String __DARWIN_SUF_1050 = '$1050';

// const String __DARWIN_SUF_EXTSN = '$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101500;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int USER_ADDR_NULL = 0;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

typedef _typedefC_6 = ffi.Void Function(
  ffi.Int32,
);

// typedef _c_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_5>> Function(
//   ffi.Int32 arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
// );

// typedef _dart_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_5>> Function(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_6>> arg1,
// );

typedef _c_raise = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_raise = int Function(
  int arg0,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Int32,
);

// typedef _c_bsd_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Function(
//   ffi.Int32 arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg1,
// );

// typedef _dart_bsd_signal = ffi.Pointer<ffi.NativeFunction<_typedefC_7>> Function(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_8>> arg1,
// );

typedef _c_kill = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_kill = int Function(
  int arg0,
  int arg1,
);

typedef _c_killpg = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_killpg = int Function(
  int arg0,
  int arg1,
);

typedef _c_pthread_kill = ffi.Int32 Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  ffi.Int32 arg1,
);

typedef _dart_pthread_kill = int Function(
  ffi.Pointer<_opaque_pthread_t> arg0,
  int arg1,
);

typedef _c_pthread_sigmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_pthread_sigmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_sigaction = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<sigaction> arg1,
  ffi.Pointer<sigaction> arg2,
);

typedef _dart_sigaction = int Function(
  int arg0,
  ffi.Pointer<sigaction> arg1,
  ffi.Pointer<sigaction> arg2,
);

typedef _c_sigaddset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigaddset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigaltstack = ffi.Int32 Function(
  ffi.Pointer<__darwin_sigaltstack> arg0,
  ffi.Pointer<__darwin_sigaltstack> arg1,
);

typedef _dart_sigaltstack = int Function(
  ffi.Pointer<__darwin_sigaltstack> arg0,
  ffi.Pointer<__darwin_sigaltstack> arg1,
);

typedef _c_sigdelset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigdelset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigemptyset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigemptyset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigfillset = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigfillset = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sighold = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sighold = int Function(
  int arg0,
);

typedef _c_sigignore = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigignore = int Function(
  int arg0,
);

typedef _c_siginterrupt = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Int32 arg1,
);

typedef _dart_siginterrupt = int Function(
  int arg0,
  int arg1,
);

typedef _c_sigismember = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Int32 arg1,
);

typedef _dart_sigismember = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  int arg1,
);

typedef _c_sigpause = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigpause = int Function(
  int arg0,
);

typedef _c_sigpending = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigpending = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigprocmask = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _dart_sigprocmask = int Function(
  int arg0,
  ffi.Pointer<ffi.Uint32> arg1,
  ffi.Pointer<ffi.Uint32> arg2,
);

typedef _c_sigrelse = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigrelse = int Function(
  int arg0,
);

typedef _typedefC_10 = ffi.Void Function(
  ffi.Int32,
);

// typedef _c_sigset = ffi.Pointer<ffi.NativeFunction<_typedefC_9>> Function(
//   ffi.Int32 arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
// );

// typedef _dart_sigset = ffi.Pointer<ffi.NativeFunction<_typedefC_9>> Function(
//   int arg0,
//   ffi.Pointer<ffi.NativeFunction<_typedefC_10>> arg1,
// );

typedef _c_sigsuspend = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _dart_sigsuspend = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
);

typedef _c_sigwait = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _dart_sigwait = int Function(
  ffi.Pointer<ffi.Uint32> arg0,
  ffi.Pointer<ffi.Int32> arg1,
);

typedef _c_psignal = ffi.Void Function(
  ffi.Uint32 arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _dart_psignal = void Function(
  int arg0,
  ffi.Pointer<ffi.Int8> arg1,
);

typedef _c_sigblock = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigblock = int Function(
  int arg0,
);

typedef _c_sigsetmask = ffi.Int32 Function(
  ffi.Int32 arg0,
);

typedef _dart_sigsetmask = int Function(
  int arg0,
);

typedef _c_sigvec = ffi.Int32 Function(
  ffi.Int32 arg0,
  ffi.Pointer<sigvec> arg1,
  ffi.Pointer<sigvec> arg2,
);

typedef _dart_sigvec = int Function(
  int arg0,
  ffi.Pointer<sigvec> arg1,
  ffi.Pointer<sigvec> arg2,
);

typedef _c___sigbits = ffi.Int32 Function(
  ffi.Int32 __signo,
);

typedef _dart___sigbits = int Function(
  int __signo,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _typedefC_4 = ffi.Void Function(
  ffi.Int32,
);
