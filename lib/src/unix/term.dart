// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// unistd.h头文件在dart的移植.
class CTermare {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CTermare(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CTermare.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int create_ptm(
    int rows,
    int columns,
  ) {
    return (_create_ptm ??=
        _lookup<ffi.NativeFunction<_c_create_ptm>>('create_ptm')
            .asFunction<_dart_create_ptm>())(
      rows,
      columns,
    );
  }

  _dart_create_ptm _create_ptm;

  void create_subprocess(
    ffi.Pointer<ffi.Int8> env,
    ffi.Pointer<ffi.Int8> cmd,
    ffi.Pointer<ffi.Int8> cwd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
    ffi.Pointer<ffi.Int32> pProcessId,
    int ptmfd,
  ) {
    return (_create_subprocess ??=
        _lookup<ffi.NativeFunction<_c_create_subprocess>>('create_subprocess')
            .asFunction<_dart_create_subprocess>())(
      env,
      cmd,
      cwd,
      argv,
      envp,
      pProcessId,
      ptmfd,
    );
  }

  _dart_create_subprocess _create_subprocess;

  void write_to_fd(
    int fd,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return (_write_to_fd ??=
        _lookup<ffi.NativeFunction<_c_write_to_fd>>('write_to_fd')
            .asFunction<_dart_write_to_fd>())(
      fd,
      str,
    );
  }

  _dart_write_to_fd _write_to_fd;

  void setNonblock(
    int fd,
  ) {
    return (_setNonblock ??=
        _lookup<ffi.NativeFunction<_c_setNonblock>>('setNonblock')
            .asFunction<_dart_setNonblock>())(
      fd,
    );
  }

  _dart_setNonblock _setNonblock;

  ffi.Pointer<ffi.Int8> get_output_from_fd(
    int fd,
  ) {
    return (_get_output_from_fd ??=
        _lookup<ffi.NativeFunction<_c_get_output_from_fd>>('get_output_from_fd')
            .asFunction<_dart_get_output_from_fd>())(
      fd,
    );
  }

  _dart_get_output_from_fd _get_output_from_fd;

  ffi.Pointer<ffi.Int8> getFilePathFromFd(
    int fd,
  ) {
    return (_getFilePathFromFd ??=
        _lookup<ffi.NativeFunction<_c_getFilePathFromFd>>('getFilePathFromFd')
            .asFunction<_dart_getFilePathFromFd>())(
      fd,
    );
  }

  _dart_getFilePathFromFd _getFilePathFromFd;

  void setPtyWindowSize(
    int fd,
    int rows,
    int cols,
  ) {
    return (_setPtyWindowSize ??=
        _lookup<ffi.NativeFunction<_c_setPtyWindowSize>>('setPtyWindowSize')
            .asFunction<_dart_setPtyWindowSize>())(
      fd,
      rows,
      cols,
    );
  }

  _dart_setPtyWindowSize _setPtyWindowSize;
}

typedef _c_create_ptm = ffi.Int32 Function(
  ffi.Int32 rows,
  ffi.Int32 columns,
);

typedef _dart_create_ptm = int Function(
  int rows,
  int columns,
);

typedef _c_create_subprocess = ffi.Void Function(
  ffi.Pointer<ffi.Int8> env,
  ffi.Pointer<ffi.Int8> cmd,
  ffi.Pointer<ffi.Int8> cwd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
  ffi.Pointer<ffi.Int32> pProcessId,
  ffi.Int32 ptmfd,
);

typedef _dart_create_subprocess = void Function(
  ffi.Pointer<ffi.Int8> env,
  ffi.Pointer<ffi.Int8> cmd,
  ffi.Pointer<ffi.Int8> cwd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
  ffi.Pointer<ffi.Int32> pProcessId,
  int ptmfd,
);

typedef _c_write_to_fd = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_write_to_fd = void Function(
  int fd,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_setNonblock = ffi.Void Function(
  ffi.Int32 fd,
);

typedef _dart_setNonblock = void Function(
  int fd,
);

typedef _c_get_output_from_fd = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 fd,
);

typedef _dart_get_output_from_fd = ffi.Pointer<ffi.Int8> Function(
  int fd,
);

typedef _c_getFilePathFromFd = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 fd,
);

typedef _dart_getFilePathFromFd = ffi.Pointer<ffi.Int8> Function(
  int fd,
);

typedef _c_setPtyWindowSize = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 rows,
  ffi.Int32 cols,
);

typedef _dart_setPtyWindowSize = void Function(
  int fd,
  int rows,
  int cols,
);

typedef callback = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);
