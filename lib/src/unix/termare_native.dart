// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `headers/example.h`.
class TermareNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  TermareNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  TermareNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int create_ptm(
    int rows,
    int columns,
  ) {
    return _create_ptm(
      rows,
      columns,
    );
  }

  late final _create_ptm_ptr =
      _lookup<ffi.NativeFunction<_c_create_ptm>>('create_ptm');
  late final _dart_create_ptm _create_ptm =
      _create_ptm_ptr.asFunction<_dart_create_ptm>();

  void create_subprocess(
    ffi.Pointer<ffi.Int8> env,
    ffi.Pointer<ffi.Int8> cmd,
    ffi.Pointer<ffi.Int8> cwd,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
    ffi.Pointer<ffi.Int32> pProcessId,
    int ptmfd,
  ) {
    return _create_subprocess(
      env,
      cmd,
      cwd,
      argv,
      envp,
      pProcessId,
      ptmfd,
    );
  }

  late final _create_subprocess_ptr =
      _lookup<ffi.NativeFunction<_c_create_subprocess>>('create_subprocess');
  late final _dart_create_subprocess _create_subprocess =
      _create_subprocess_ptr.asFunction<_dart_create_subprocess>();

  void write_to_fd(
    int fd,
    ffi.Pointer<ffi.Int8> str,
  ) {
    return _write_to_fd(
      fd,
      str,
    );
  }

  late final _write_to_fd_ptr =
      _lookup<ffi.NativeFunction<_c_write_to_fd>>('write_to_fd');
  late final _dart_write_to_fd _write_to_fd =
      _write_to_fd_ptr.asFunction<_dart_write_to_fd>();

  void setNonblock(
    int fd,
  ) {
    return _setNonblock(
      fd,
    );
  }

  late final _setNonblock_ptr =
      _lookup<ffi.NativeFunction<_c_setNonblock>>('setNonblock');
  late final _dart_setNonblock _setNonblock =
      _setNonblock_ptr.asFunction<_dart_setNonblock>();

  ffi.Pointer<ffi.Int8> get_output_from_fd(
    int fd,
  ) {
    return _get_output_from_fd(
      fd,
    );
  }

  late final _get_output_from_fd_ptr =
      _lookup<ffi.NativeFunction<_c_get_output_from_fd>>('get_output_from_fd');
  late final _dart_get_output_from_fd _get_output_from_fd =
      _get_output_from_fd_ptr.asFunction<_dart_get_output_from_fd>();

  ffi.Pointer<ffi.Int8> getFilePathFromFd(
    int fd,
  ) {
    return _getFilePathFromFd(
      fd,
    );
  }

  late final _getFilePathFromFd_ptr =
      _lookup<ffi.NativeFunction<_c_getFilePathFromFd>>('getFilePathFromFd');
  late final _dart_getFilePathFromFd _getFilePathFromFd =
      _getFilePathFromFd_ptr.asFunction<_dart_getFilePathFromFd>();

  void setPtyWindowSize(
    int fd,
    int rows,
    int cols,
  ) {
    return _setPtyWindowSize(
      fd,
      rows,
      cols,
    );
  }

  late final _setPtyWindowSize_ptr =
      _lookup<ffi.NativeFunction<_c_setPtyWindowSize>>('setPtyWindowSize');
  late final _dart_setPtyWindowSize _setPtyWindowSize =
      _setPtyWindowSize_ptr.asFunction<_dart_setPtyWindowSize>();

  void init_dart_print(
    ffi.Pointer<ffi.NativeFunction<Callback>> callback,
  ) {
    return _init_dart_print(
      callback,
    );
  }

  late final _init_dart_print_ptr =
      _lookup<ffi.NativeFunction<_c_init_dart_print>>('init_dart_print');
  late final _dart_init_dart_print _init_dart_print =
      _init_dart_print_ptr.asFunction<_dart_init_dart_print>();

  void post_thread(
    int ptmfd,
    ffi.Pointer<ffi.NativeFunction<Callback>> callback,
  ) {
    return _post_thread(
      ptmfd,
      callback,
    );
  }

  late final _post_thread_ptr =
      _lookup<ffi.NativeFunction<_c_post_thread>>('post_thread');
  late final _dart_post_thread _post_thread =
      _post_thread_ptr.asFunction<_dart_post_thread>();
}

typedef _c_create_ptm = ffi.Int32 Function(
  ffi.Int32 rows,
  ffi.Int32 columns,
);

typedef _dart_create_ptm = int Function(
  int rows,
  int columns,
);

typedef _c_create_subprocess = ffi.Void Function(
  ffi.Pointer<ffi.Int8> env,
  ffi.Pointer<ffi.Int8> cmd,
  ffi.Pointer<ffi.Int8> cwd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
  ffi.Pointer<ffi.Int32> pProcessId,
  ffi.Int32 ptmfd,
);

typedef _dart_create_subprocess = void Function(
  ffi.Pointer<ffi.Int8> env,
  ffi.Pointer<ffi.Int8> cmd,
  ffi.Pointer<ffi.Int8> cwd,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> argv,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> envp,
  ffi.Pointer<ffi.Int32> pProcessId,
  int ptmfd,
);

typedef _c_write_to_fd = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Pointer<ffi.Int8> str,
);

typedef _dart_write_to_fd = void Function(
  int fd,
  ffi.Pointer<ffi.Int8> str,
);

typedef _c_setNonblock = ffi.Void Function(
  ffi.Int32 fd,
);

typedef _dart_setNonblock = void Function(
  int fd,
);

typedef _c_get_output_from_fd = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 fd,
);

typedef _dart_get_output_from_fd = ffi.Pointer<ffi.Int8> Function(
  int fd,
);

typedef _c_getFilePathFromFd = ffi.Pointer<ffi.Int8> Function(
  ffi.Int32 fd,
);

typedef _dart_getFilePathFromFd = ffi.Pointer<ffi.Int8> Function(
  int fd,
);

typedef _c_setPtyWindowSize = ffi.Void Function(
  ffi.Int32 fd,
  ffi.Int32 rows,
  ffi.Int32 cols,
);

typedef _dart_setPtyWindowSize = void Function(
  int fd,
  int rows,
  int cols,
);

typedef Callback = ffi.Void Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_init_dart_print = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<Callback>> callback,
);

typedef _dart_init_dart_print = void Function(
  ffi.Pointer<ffi.NativeFunction<Callback>> callback,
);

typedef _c_post_thread = ffi.Void Function(
  ffi.Int32 ptmfd,
  ffi.Pointer<ffi.NativeFunction<Callback>> callback,
);

typedef _dart_post_thread = void Function(
  int ptmfd,
  ffi.Pointer<ffi.NativeFunction<Callback>> callback,
);
